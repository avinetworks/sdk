/*
 * Avi avi_global_spec Object API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 20.1.1
 * Contact: support@avinetworks.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.vmware.avi.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.vmware.avi.sdk.model.AwsZoneNetwork;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;
/**
 * IpamDnsAwsProfile
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-03-12T12:27:26.755+05:30[Asia/Kolkata]")
public class IpamDnsAwsProfile {
  @JsonProperty("access_key_id")
  private String accessKeyId = null;

  @JsonProperty("egress_service_subnets")
  private List<String> egressServiceSubnets = null;

  @JsonProperty("iam_assume_role")
  private String iamAssumeRole = null;

  @JsonProperty("publish_vip_to_public_zone")
  private Boolean publishVipToPublicZone = null;

  @JsonProperty("region")
  private String region = null;

  @JsonProperty("secret_access_key")
  private String secretAccessKey = null;

  @JsonProperty("ttl")
  private Integer ttl = 60;

  @JsonProperty("usable_domains")
  private List<String> usableDomains = null;

  @JsonProperty("usable_network_uuids")
  private List<String> usableNetworkUuids = null;

  @JsonProperty("use_iam_roles")
  private Boolean useIamRoles = null;

  @JsonProperty("vpc")
  private String vpc = null;

  @JsonProperty("vpc_id")
  private String vpcId = null;

  @JsonProperty("zones")
  private List<AwsZoneNetwork> zones = null;

  public IpamDnsAwsProfile accessKeyId(String accessKeyId) {
    this.accessKeyId = accessKeyId;
    return this;
  }

   /**
   * AWS access key ID.
   * @return accessKeyId
  **/
  @Schema(description = "AWS access key ID.")
  public String getAccessKeyId() {
    return accessKeyId;
  }

  public void setAccessKeyId(String accessKeyId) {
    this.accessKeyId = accessKeyId;
  }

  public IpamDnsAwsProfile egressServiceSubnets(List<String> egressServiceSubnets) {
    this.egressServiceSubnets = egressServiceSubnets;
    return this;
  }

  public IpamDnsAwsProfile addEgressServiceSubnetsItem(String egressServiceSubnetsItem) {
    if (this.egressServiceSubnets == null) {
      this.egressServiceSubnets = new ArrayList<String>();
    }
    this.egressServiceSubnets.add(egressServiceSubnetsItem);
    return this;
  }

   /**
   * A list of subnets used for source IP allocation for egress services in Openshift/k8s on Aws. Field introduced in 18.2.3.
   * @return egressServiceSubnets
  **/
  @Schema(description = "A list of subnets used for source IP allocation for egress services in Openshift/k8s on Aws. Field introduced in 18.2.3.")
  public List<String> getEgressServiceSubnets() {
    return egressServiceSubnets;
  }

  public void setEgressServiceSubnets(List<String> egressServiceSubnets) {
    this.egressServiceSubnets = egressServiceSubnets;
  }

  public IpamDnsAwsProfile iamAssumeRole(String iamAssumeRole) {
    this.iamAssumeRole = iamAssumeRole;
    return this;
  }

   /**
   * IAM assume role for cross-account access. Field introduced in 17.1.1.
   * @return iamAssumeRole
  **/
  @Schema(description = "IAM assume role for cross-account access. Field introduced in 17.1.1.")
  public String getIamAssumeRole() {
    return iamAssumeRole;
  }

  public void setIamAssumeRole(String iamAssumeRole) {
    this.iamAssumeRole = iamAssumeRole;
  }

  public IpamDnsAwsProfile publishVipToPublicZone(Boolean publishVipToPublicZone) {
    this.publishVipToPublicZone = publishVipToPublicZone;
    return this;
  }

   /**
   * If enabled and the virtual service is not floating ip capable, vip will be published to both private and public zones. This flag is applicable only for AWS DNS profile. Field introduced in 17.2.10.
   * @return publishVipToPublicZone
  **/
  @Schema(description = "If enabled and the virtual service is not floating ip capable, vip will be published to both private and public zones. This flag is applicable only for AWS DNS profile. Field introduced in 17.2.10.")
  public Boolean isPublishVipToPublicZone() {
    return publishVipToPublicZone;
  }

  public void setPublishVipToPublicZone(Boolean publishVipToPublicZone) {
    this.publishVipToPublicZone = publishVipToPublicZone;
  }

  public IpamDnsAwsProfile region(String region) {
    this.region = region;
    return this;
  }

   /**
   * AWS region.
   * @return region
  **/
  @Schema(description = "AWS region.")
  public String getRegion() {
    return region;
  }

  public void setRegion(String region) {
    this.region = region;
  }

  public IpamDnsAwsProfile secretAccessKey(String secretAccessKey) {
    this.secretAccessKey = secretAccessKey;
    return this;
  }

   /**
   * AWS secret access key.
   * @return secretAccessKey
  **/
  @Schema(description = "AWS secret access key.")
  public String getSecretAccessKey() {
    return secretAccessKey;
  }

  public void setSecretAccessKey(String secretAccessKey) {
    this.secretAccessKey = secretAccessKey;
  }

  public IpamDnsAwsProfile ttl(Integer ttl) {
    this.ttl = ttl;
    return this;
  }

   /**
   * Default TTL for all records. Allowed values are 1-172800. Field introduced in 17.1.3.
   * @return ttl
  **/
  @Schema(description = "Default TTL for all records. Allowed values are 1-172800. Field introduced in 17.1.3.")
  public Integer getTtl() {
    return ttl;
  }

  public void setTtl(Integer ttl) {
    this.ttl = ttl;
  }

  public IpamDnsAwsProfile usableDomains(List<String> usableDomains) {
    this.usableDomains = usableDomains;
    return this;
  }

  public IpamDnsAwsProfile addUsableDomainsItem(String usableDomainsItem) {
    if (this.usableDomains == null) {
      this.usableDomains = new ArrayList<String>();
    }
    this.usableDomains.add(usableDomainsItem);
    return this;
  }

   /**
   * Usable domains to pick from Amazon Route 53. Field introduced in 17.1.1.
   * @return usableDomains
  **/
  @Schema(description = "Usable domains to pick from Amazon Route 53. Field introduced in 17.1.1.")
  public List<String> getUsableDomains() {
    return usableDomains;
  }

  public void setUsableDomains(List<String> usableDomains) {
    this.usableDomains = usableDomains;
  }

  public IpamDnsAwsProfile usableNetworkUuids(List<String> usableNetworkUuids) {
    this.usableNetworkUuids = usableNetworkUuids;
    return this;
  }

  public IpamDnsAwsProfile addUsableNetworkUuidsItem(String usableNetworkUuidsItem) {
    if (this.usableNetworkUuids == null) {
      this.usableNetworkUuids = new ArrayList<String>();
    }
    this.usableNetworkUuids.add(usableNetworkUuidsItem);
    return this;
  }

   /**
   * Usable networks for Virtual IP. If VirtualService does not specify a network and auto_allocate_ip is set, then the first available network from this list will be chosen for IP allocation. Field introduced in 17.1.1.
   * @return usableNetworkUuids
  **/
  @Schema(description = "Usable networks for Virtual IP. If VirtualService does not specify a network and auto_allocate_ip is set, then the first available network from this list will be chosen for IP allocation. Field introduced in 17.1.1.")
  public List<String> getUsableNetworkUuids() {
    return usableNetworkUuids;
  }

  public void setUsableNetworkUuids(List<String> usableNetworkUuids) {
    this.usableNetworkUuids = usableNetworkUuids;
  }

  public IpamDnsAwsProfile useIamRoles(Boolean useIamRoles) {
    this.useIamRoles = useIamRoles;
    return this;
  }

   /**
   * Use IAM roles instead of access and secret key.
   * @return useIamRoles
  **/
  @Schema(description = "Use IAM roles instead of access and secret key.")
  public Boolean isUseIamRoles() {
    return useIamRoles;
  }

  public void setUseIamRoles(Boolean useIamRoles) {
    this.useIamRoles = useIamRoles;
  }

  public IpamDnsAwsProfile vpc(String vpc) {
    this.vpc = vpc;
    return this;
  }

   /**
   * VPC name.
   * @return vpc
  **/
  @Schema(description = "VPC name.")
  public String getVpc() {
    return vpc;
  }

  public void setVpc(String vpc) {
    this.vpc = vpc;
  }

  public IpamDnsAwsProfile vpcId(String vpcId) {
    this.vpcId = vpcId;
    return this;
  }

   /**
   * VPC ID.
   * @return vpcId
  **/
  @Schema(required = true, description = "VPC ID.")
  public String getVpcId() {
    return vpcId;
  }

  public void setVpcId(String vpcId) {
    this.vpcId = vpcId;
  }

  public IpamDnsAwsProfile zones(List<AwsZoneNetwork> zones) {
    this.zones = zones;
    return this;
  }

  public IpamDnsAwsProfile addZonesItem(AwsZoneNetwork zonesItem) {
    if (this.zones == null) {
      this.zones = new ArrayList<AwsZoneNetwork>();
    }
    this.zones.add(zonesItem);
    return this;
  }

   /**
   * Network configuration for Virtual IP per AZ. Field introduced in 17.1.3.
   * @return zones
  **/
  @Schema(description = "Network configuration for Virtual IP per AZ. Field introduced in 17.1.3.")
  public List<AwsZoneNetwork> getZones() {
    return zones;
  }

  public void setZones(List<AwsZoneNetwork> zones) {
    this.zones = zones;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IpamDnsAwsProfile ipamDnsAwsProfile = (IpamDnsAwsProfile) o;
    return Objects.equals(this.accessKeyId, ipamDnsAwsProfile.accessKeyId) &&
        Objects.equals(this.egressServiceSubnets, ipamDnsAwsProfile.egressServiceSubnets) &&
        Objects.equals(this.iamAssumeRole, ipamDnsAwsProfile.iamAssumeRole) &&
        Objects.equals(this.publishVipToPublicZone, ipamDnsAwsProfile.publishVipToPublicZone) &&
        Objects.equals(this.region, ipamDnsAwsProfile.region) &&
        Objects.equals(this.secretAccessKey, ipamDnsAwsProfile.secretAccessKey) &&
        Objects.equals(this.ttl, ipamDnsAwsProfile.ttl) &&
        Objects.equals(this.usableDomains, ipamDnsAwsProfile.usableDomains) &&
        Objects.equals(this.usableNetworkUuids, ipamDnsAwsProfile.usableNetworkUuids) &&
        Objects.equals(this.useIamRoles, ipamDnsAwsProfile.useIamRoles) &&
        Objects.equals(this.vpc, ipamDnsAwsProfile.vpc) &&
        Objects.equals(this.vpcId, ipamDnsAwsProfile.vpcId) &&
        Objects.equals(this.zones, ipamDnsAwsProfile.zones);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accessKeyId, egressServiceSubnets, iamAssumeRole, publishVipToPublicZone, region, secretAccessKey, ttl, usableDomains, usableNetworkUuids, useIamRoles, vpc, vpcId, zones);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IpamDnsAwsProfile {\n");
    
    sb.append("    accessKeyId: ").append(toIndentedString(accessKeyId)).append("\n");
    sb.append("    egressServiceSubnets: ").append(toIndentedString(egressServiceSubnets)).append("\n");
    sb.append("    iamAssumeRole: ").append(toIndentedString(iamAssumeRole)).append("\n");
    sb.append("    publishVipToPublicZone: ").append(toIndentedString(publishVipToPublicZone)).append("\n");
    sb.append("    region: ").append(toIndentedString(region)).append("\n");
    sb.append("    secretAccessKey: ").append(toIndentedString(secretAccessKey)).append("\n");
    sb.append("    ttl: ").append(toIndentedString(ttl)).append("\n");
    sb.append("    usableDomains: ").append(toIndentedString(usableDomains)).append("\n");
    sb.append("    usableNetworkUuids: ").append(toIndentedString(usableNetworkUuids)).append("\n");
    sb.append("    useIamRoles: ").append(toIndentedString(useIamRoles)).append("\n");
    sb.append("    vpc: ").append(toIndentedString(vpc)).append("\n");
    sb.append("    vpcId: ").append(toIndentedString(vpcId)).append("\n");
    sb.append("    zones: ").append(toIndentedString(zones)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
