/*
 * Avi avi_global_spec Object API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 20.1.1
 * Contact: support@avinetworks.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.vmware.avi.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
/**
 * HealthMonitorSIP
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-03-12T12:27:26.755+05:30[Asia/Kolkata]")
public class HealthMonitorSIP {
  @JsonProperty("sip_monitor_transport")
  private String sipMonitorTransport = "SIP_UDP_PROTO";

  @JsonProperty("sip_request_code")
  private String sipRequestCode = "SIP_OPTIONS";

  @JsonProperty("sip_response")
  private String sipResponse = "SIP/2.0";

  public HealthMonitorSIP sipMonitorTransport(String sipMonitorTransport) {
    this.sipMonitorTransport = sipMonitorTransport;
    return this;
  }

   /**
   * Specify the transport protocol TCP or UDP, to be used for SIP health monitor. The default transport is UDP. Enum options - SIP_UDP_PROTO, SIP_TCP_PROTO. Field introduced in 17.2.14, 18.1.5, 18.2.1.
   * @return sipMonitorTransport
  **/
  @Schema(description = "Specify the transport protocol TCP or UDP, to be used for SIP health monitor. The default transport is UDP. Enum options - SIP_UDP_PROTO, SIP_TCP_PROTO. Field introduced in 17.2.14, 18.1.5, 18.2.1.")
  public String getSipMonitorTransport() {
    return sipMonitorTransport;
  }

  public void setSipMonitorTransport(String sipMonitorTransport) {
    this.sipMonitorTransport = sipMonitorTransport;
  }

  public HealthMonitorSIP sipRequestCode(String sipRequestCode) {
    this.sipRequestCode = sipRequestCode;
    return this;
  }

   /**
   * Specify the SIP request to be sent to the server. By default, SIP OPTIONS request will be sent. Enum options - SIP_OPTIONS. Field introduced in 17.2.8, 18.1.3, 18.2.1.
   * @return sipRequestCode
  **/
  @Schema(description = "Specify the SIP request to be sent to the server. By default, SIP OPTIONS request will be sent. Enum options - SIP_OPTIONS. Field introduced in 17.2.8, 18.1.3, 18.2.1.")
  public String getSipRequestCode() {
    return sipRequestCode;
  }

  public void setSipRequestCode(String sipRequestCode) {
    this.sipRequestCode = sipRequestCode;
  }

  public HealthMonitorSIP sipResponse(String sipResponse) {
    this.sipResponse = sipResponse;
    return this;
  }

   /**
   * Match for a keyword in the first 2KB of the server header and body response. By default, it matches for SIP/2.0. Field introduced in 17.2.8, 18.1.3, 18.2.1.
   * @return sipResponse
  **/
  @Schema(description = "Match for a keyword in the first 2KB of the server header and body response. By default, it matches for SIP/2.0. Field introduced in 17.2.8, 18.1.3, 18.2.1.")
  public String getSipResponse() {
    return sipResponse;
  }

  public void setSipResponse(String sipResponse) {
    this.sipResponse = sipResponse;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HealthMonitorSIP healthMonitorSIP = (HealthMonitorSIP) o;
    return Objects.equals(this.sipMonitorTransport, healthMonitorSIP.sipMonitorTransport) &&
        Objects.equals(this.sipRequestCode, healthMonitorSIP.sipRequestCode) &&
        Objects.equals(this.sipResponse, healthMonitorSIP.sipResponse);
  }

  @Override
  public int hashCode() {
    return Objects.hash(sipMonitorTransport, sipRequestCode, sipResponse);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HealthMonitorSIP {\n");
    
    sb.append("    sipMonitorTransport: ").append(toIndentedString(sipMonitorTransport)).append("\n");
    sb.append("    sipRequestCode: ").append(toIndentedString(sipRequestCode)).append("\n");
    sb.append("    sipResponse: ").append(toIndentedString(sipResponse)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
