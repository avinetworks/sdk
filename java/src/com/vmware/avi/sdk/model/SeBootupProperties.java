/*
 * Avi avi_global_spec Object API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 20.1.1
 * Contact: support@avinetworks.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.vmware.avi.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.vmware.avi.sdk.model.SeBootupCompressionProperties;
import io.swagger.v3.oas.annotations.media.Schema;
/**
 * SeBootupProperties
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-03-12T12:27:26.755+05:30[Asia/Kolkata]")
public class SeBootupProperties {
  @JsonProperty("distribute_queues")
  private Boolean distributeQueues = null;

  @JsonProperty("distribute_vnics")
  private Boolean distributeVnics = null;

  @JsonProperty("docker_backend_portend")
  private Integer dockerBackendPortend = 30720;

  @JsonProperty("docker_backend_portstart")
  private Integer dockerBackendPortstart = 20480;

  @JsonProperty("fair_queueing_enabled")
  private Boolean fairQueueingEnabled = null;

  @JsonProperty("geo_db_granularity")
  private Integer geoDbGranularity = 1;

  @JsonProperty("l7_conns_per_core")
  private Integer l7ConnsPerCore = 16384;

  @JsonProperty("l7_resvd_listen_conns_per_core")
  private Integer l7ResvdListenConnsPerCore = 256;

  @JsonProperty("log_agent_debug_enabled")
  private Boolean logAgentDebugEnabled = null;

  @JsonProperty("log_agent_trace_enabled")
  private Boolean logAgentTraceEnabled = true;

  @JsonProperty("se_dp_compression")
  private SeBootupCompressionProperties seDpCompression = null;

  @JsonProperty("se_dpdk_pmd")
  private Integer seDpdkPmd = null;

  @JsonProperty("se_emulated_cores")
  private Integer seEmulatedCores = null;

  @JsonProperty("se_ip_encap_ipc")
  private Integer seIpEncapIpc = null;

  @JsonProperty("se_l3_encap_ipc")
  private Integer seL3EncapIpc = null;

  @JsonProperty("se_log_buffer_app_blocking_dequeue")
  private Boolean seLogBufferAppBlockingDequeue = null;

  @JsonProperty("se_log_buffer_applog_size")
  private Integer seLogBufferApplogSize = 4096;

  @JsonProperty("se_log_buffer_chunk_count")
  private Integer seLogBufferChunkCount = 1024;

  @JsonProperty("se_log_buffer_conn_blocking_dequeue")
  private Boolean seLogBufferConnBlockingDequeue = null;

  @JsonProperty("se_log_buffer_connlog_size")
  private Integer seLogBufferConnlogSize = 1024;

  @JsonProperty("se_log_buffer_events_blocking_dequeue")
  private Boolean seLogBufferEventsBlockingDequeue = true;

  @JsonProperty("se_log_buffer_events_size")
  private Integer seLogBufferEventsSize = 512;

  @JsonProperty("se_lro")
  private Integer seLro = null;

  @JsonProperty("se_pcap_pkt_count")
  private Integer sePcapPktCount = null;

  @JsonProperty("se_pcap_pkt_sz")
  private Integer sePcapPktSz = null;

  @JsonProperty("se_rum_sampling_nav_interval")
  private Integer seRumSamplingNavInterval = null;

  @JsonProperty("se_rum_sampling_nav_percent")
  private Integer seRumSamplingNavPercent = null;

  @JsonProperty("se_rum_sampling_res_interval")
  private Integer seRumSamplingResInterval = null;

  @JsonProperty("se_rum_sampling_res_percent")
  private Integer seRumSamplingResPercent = null;

  @JsonProperty("se_tunnel_mode")
  private Integer seTunnelMode = null;

  @JsonProperty("se_tx_batch_size")
  private Integer seTxBatchSize = null;

  @JsonProperty("se_use_dpdk")
  private Integer seUseDpdk = null;

  @JsonProperty("ssl_sess_cache_per_vs")
  private Integer sslSessCachePerVs = 4096;

  @JsonProperty("ssl_sess_cache_timeout")
  private Integer sslSessCacheTimeout = 86400;

  @JsonProperty("tcp_syncache_hashsize")
  private Integer tcpSyncacheHashsize = 8192;

  public SeBootupProperties distributeQueues(Boolean distributeQueues) {
    this.distributeQueues = distributeQueues;
    return this;
  }

   /**
   * Deprecated. Field deprecated in 17.2.8. Field introduced in 17.1.1.
   * @return distributeQueues
  **/
  @Schema(description = "Deprecated. Field deprecated in 17.2.8. Field introduced in 17.1.1.")
  public Boolean isDistributeQueues() {
    return distributeQueues;
  }

  public void setDistributeQueues(Boolean distributeQueues) {
    this.distributeQueues = distributeQueues;
  }

  public SeBootupProperties distributeVnics(Boolean distributeVnics) {
    this.distributeVnics = distributeVnics;
    return this;
  }

   /**
   * Deprecated. Field deprecated in 18.2.5.
   * @return distributeVnics
  **/
  @Schema(description = "Deprecated. Field deprecated in 18.2.5.")
  public Boolean isDistributeVnics() {
    return distributeVnics;
  }

  public void setDistributeVnics(Boolean distributeVnics) {
    this.distributeVnics = distributeVnics;
  }

  public SeBootupProperties dockerBackendPortend(Integer dockerBackendPortend) {
    this.dockerBackendPortend = dockerBackendPortend;
    return this;
  }

   /**
   * End of the Local TCP port range used by SE for backend connections in docker environment.
   * @return dockerBackendPortend
  **/
  @Schema(description = "End of the Local TCP port range used by SE for backend connections in docker environment.")
  public Integer getDockerBackendPortend() {
    return dockerBackendPortend;
  }

  public void setDockerBackendPortend(Integer dockerBackendPortend) {
    this.dockerBackendPortend = dockerBackendPortend;
  }

  public SeBootupProperties dockerBackendPortstart(Integer dockerBackendPortstart) {
    this.dockerBackendPortstart = dockerBackendPortstart;
    return this;
  }

   /**
   * Start of the Local TCP port range used by SE for backend connections in docker environment.
   * @return dockerBackendPortstart
  **/
  @Schema(description = "Start of the Local TCP port range used by SE for backend connections in docker environment.")
  public Integer getDockerBackendPortstart() {
    return dockerBackendPortstart;
  }

  public void setDockerBackendPortstart(Integer dockerBackendPortstart) {
    this.dockerBackendPortstart = dockerBackendPortstart;
  }

  public SeBootupProperties fairQueueingEnabled(Boolean fairQueueingEnabled) {
    this.fairQueueingEnabled = fairQueueingEnabled;
    return this;
  }

   /**
   * Enable or disable fair queueing for packet transmission among virtualservices on an SE.
   * @return fairQueueingEnabled
  **/
  @Schema(description = "Enable or disable fair queueing for packet transmission among virtualservices on an SE.")
  public Boolean isFairQueueingEnabled() {
    return fairQueueingEnabled;
  }

  public void setFairQueueingEnabled(Boolean fairQueueingEnabled) {
    this.fairQueueingEnabled = fairQueueingEnabled;
  }

  public SeBootupProperties geoDbGranularity(Integer geoDbGranularity) {
    this.geoDbGranularity = geoDbGranularity;
    return this;
  }

   /**
   * Granularity or Resolution of co-ordinates used. When the value is 1 the co-ordinates provided in the geo-db are used as is (highest resolution.This value provides a &#x27;zoom-out&#x27; value so that coarser co-ordinates are used. With higher resolution, logs can contain finer location information. But, lower resolution provides significant memory and cpu benefits on the service engine. Besides, given a smaller number of members that are separated geographically, a lower resolution is sufficient for correct load-balancing. Allowed values are 1-20. Field introduced in 17.1.1.
   * @return geoDbGranularity
  **/
  @Schema(description = "Granularity or Resolution of co-ordinates used. When the value is 1 the co-ordinates provided in the geo-db are used as is (highest resolution.This value provides a 'zoom-out' value so that coarser co-ordinates are used. With higher resolution, logs can contain finer location information. But, lower resolution provides significant memory and cpu benefits on the service engine. Besides, given a smaller number of members that are separated geographically, a lower resolution is sufficient for correct load-balancing. Allowed values are 1-20. Field introduced in 17.1.1.")
  public Integer getGeoDbGranularity() {
    return geoDbGranularity;
  }

  public void setGeoDbGranularity(Integer geoDbGranularity) {
    this.geoDbGranularity = geoDbGranularity;
  }

  public SeBootupProperties l7ConnsPerCore(Integer l7ConnsPerCore) {
    this.l7ConnsPerCore = l7ConnsPerCore;
    return this;
  }

   /**
   * Number of L7 connections that can be cached per core.
   * @return l7ConnsPerCore
  **/
  @Schema(description = "Number of L7 connections that can be cached per core.")
  public Integer getL7ConnsPerCore() {
    return l7ConnsPerCore;
  }

  public void setL7ConnsPerCore(Integer l7ConnsPerCore) {
    this.l7ConnsPerCore = l7ConnsPerCore;
  }

  public SeBootupProperties l7ResvdListenConnsPerCore(Integer l7ResvdListenConnsPerCore) {
    this.l7ResvdListenConnsPerCore = l7ResvdListenConnsPerCore;
    return this;
  }

   /**
   * Number of reserved L7 listener connections per core.
   * @return l7ResvdListenConnsPerCore
  **/
  @Schema(description = "Number of reserved L7 listener connections per core.")
  public Integer getL7ResvdListenConnsPerCore() {
    return l7ResvdListenConnsPerCore;
  }

  public void setL7ResvdListenConnsPerCore(Integer l7ResvdListenConnsPerCore) {
    this.l7ResvdListenConnsPerCore = l7ResvdListenConnsPerCore;
  }

  public SeBootupProperties logAgentDebugEnabled(Boolean logAgentDebugEnabled) {
    this.logAgentDebugEnabled = logAgentDebugEnabled;
    return this;
  }

   /**
   * Enable debug logs by default on Service Engine. This includes all other debugging logs. Debug logs can also be explcitly enabled from the CLI shell.
   * @return logAgentDebugEnabled
  **/
  @Schema(description = "Enable debug logs by default on Service Engine. This includes all other debugging logs. Debug logs can also be explcitly enabled from the CLI shell.")
  public Boolean isLogAgentDebugEnabled() {
    return logAgentDebugEnabled;
  }

  public void setLogAgentDebugEnabled(Boolean logAgentDebugEnabled) {
    this.logAgentDebugEnabled = logAgentDebugEnabled;
  }

  public SeBootupProperties logAgentTraceEnabled(Boolean logAgentTraceEnabled) {
    this.logAgentTraceEnabled = logAgentTraceEnabled;
    return this;
  }

   /**
   * Enable trace logs by default on Service Engine. Configuration operations are logged along with other important logs by Service Engine.
   * @return logAgentTraceEnabled
  **/
  @Schema(description = "Enable trace logs by default on Service Engine. Configuration operations are logged along with other important logs by Service Engine.")
  public Boolean isLogAgentTraceEnabled() {
    return logAgentTraceEnabled;
  }

  public void setLogAgentTraceEnabled(Boolean logAgentTraceEnabled) {
    this.logAgentTraceEnabled = logAgentTraceEnabled;
  }

  public SeBootupProperties seDpCompression(SeBootupCompressionProperties seDpCompression) {
    this.seDpCompression = seDpCompression;
    return this;
  }

   /**
   * Get seDpCompression
   * @return seDpCompression
  **/
  @Schema(description = "")
  public SeBootupCompressionProperties getSeDpCompression() {
    return seDpCompression;
  }

  public void setSeDpCompression(SeBootupCompressionProperties seDpCompression) {
    this.seDpCompression = seDpCompression;
  }

  public SeBootupProperties seDpdkPmd(Integer seDpdkPmd) {
    this.seDpdkPmd = seDpdkPmd;
    return this;
  }

   /**
   * This field has been moved to se_group properties 18.1.2 onwards. Field deprecated in 18.1.3.
   * @return seDpdkPmd
  **/
  @Schema(description = "This field has been moved to se_group properties 18.1.2 onwards. Field deprecated in 18.1.3.")
  public Integer getSeDpdkPmd() {
    return seDpdkPmd;
  }

  public void setSeDpdkPmd(Integer seDpdkPmd) {
    this.seDpdkPmd = seDpdkPmd;
  }

  public SeBootupProperties seEmulatedCores(Integer seEmulatedCores) {
    this.seEmulatedCores = seEmulatedCores;
    return this;
  }

   /**
   * Use this to emulate more/less cpus than is actually available. One datapath process is started for each core.
   * @return seEmulatedCores
  **/
  @Schema(description = "Use this to emulate more/less cpus than is actually available. One datapath process is started for each core.")
  public Integer getSeEmulatedCores() {
    return seEmulatedCores;
  }

  public void setSeEmulatedCores(Integer seEmulatedCores) {
    this.seEmulatedCores = seEmulatedCores;
  }

  public SeBootupProperties seIpEncapIpc(Integer seIpEncapIpc) {
    this.seIpEncapIpc = seIpEncapIpc;
    return this;
  }

   /**
   * Determines if SE-SE IPC messages are encapsulated in an IP header       0        Automatically determine based on hypervisor type    1        Use IP encap unconditionally    ~[0,1]   Don&#x27;t use IP encap.
   * @return seIpEncapIpc
  **/
  @Schema(description = "Determines if SE-SE IPC messages are encapsulated in an IP header       0        Automatically determine based on hypervisor type    1        Use IP encap unconditionally    ~[0,1]   Don't use IP encap.")
  public Integer getSeIpEncapIpc() {
    return seIpEncapIpc;
  }

  public void setSeIpEncapIpc(Integer seIpEncapIpc) {
    this.seIpEncapIpc = seIpEncapIpc;
  }

  public SeBootupProperties seL3EncapIpc(Integer seL3EncapIpc) {
    this.seL3EncapIpc = seL3EncapIpc;
    return this;
  }

   /**
   * Determines if SE-SE IPC messages use SE interface IP instead of VIP        0        Automatically determine based on hypervisor type    1        Use SE interface IP unconditionally    ~[0,1]   Don&#x27;t use SE interface IP.
   * @return seL3EncapIpc
  **/
  @Schema(description = "Determines if SE-SE IPC messages use SE interface IP instead of VIP        0        Automatically determine based on hypervisor type    1        Use SE interface IP unconditionally    ~[0,1]   Don't use SE interface IP.")
  public Integer getSeL3EncapIpc() {
    return seL3EncapIpc;
  }

  public void setSeL3EncapIpc(Integer seL3EncapIpc) {
    this.seL3EncapIpc = seL3EncapIpc;
  }

  public SeBootupProperties seLogBufferAppBlockingDequeue(Boolean seLogBufferAppBlockingDequeue) {
    this.seLogBufferAppBlockingDequeue = seLogBufferAppBlockingDequeue;
    return this;
  }

   /**
   * Internal flag that blocks dataplane until all application logs are flushed to log-agent process.
   * @return seLogBufferAppBlockingDequeue
  **/
  @Schema(description = "Internal flag that blocks dataplane until all application logs are flushed to log-agent process.")
  public Boolean isSeLogBufferAppBlockingDequeue() {
    return seLogBufferAppBlockingDequeue;
  }

  public void setSeLogBufferAppBlockingDequeue(Boolean seLogBufferAppBlockingDequeue) {
    this.seLogBufferAppBlockingDequeue = seLogBufferAppBlockingDequeue;
  }

  public SeBootupProperties seLogBufferApplogSize(Integer seLogBufferApplogSize) {
    this.seLogBufferApplogSize = seLogBufferApplogSize;
    return this;
  }

   /**
   * Internal application log buffer size to use on Service Engine. Can be fine tuned for better performance of data plane in specific environments.
   * @return seLogBufferApplogSize
  **/
  @Schema(description = "Internal application log buffer size to use on Service Engine. Can be fine tuned for better performance of data plane in specific environments.")
  public Integer getSeLogBufferApplogSize() {
    return seLogBufferApplogSize;
  }

  public void setSeLogBufferApplogSize(Integer seLogBufferApplogSize) {
    this.seLogBufferApplogSize = seLogBufferApplogSize;
  }

  public SeBootupProperties seLogBufferChunkCount(Integer seLogBufferChunkCount) {
    this.seLogBufferChunkCount = seLogBufferChunkCount;
    return this;
  }

   /**
   * Number of internal buffer chunks to use on Service Engine. Can be fine tuned for better performance of data plane in specific environments.
   * @return seLogBufferChunkCount
  **/
  @Schema(description = "Number of internal buffer chunks to use on Service Engine. Can be fine tuned for better performance of data plane in specific environments.")
  public Integer getSeLogBufferChunkCount() {
    return seLogBufferChunkCount;
  }

  public void setSeLogBufferChunkCount(Integer seLogBufferChunkCount) {
    this.seLogBufferChunkCount = seLogBufferChunkCount;
  }

  public SeBootupProperties seLogBufferConnBlockingDequeue(Boolean seLogBufferConnBlockingDequeue) {
    this.seLogBufferConnBlockingDequeue = seLogBufferConnBlockingDequeue;
    return this;
  }

   /**
   * Internal flag that blocks dataplane until all connection logs are flushed to log-agent process.
   * @return seLogBufferConnBlockingDequeue
  **/
  @Schema(description = "Internal flag that blocks dataplane until all connection logs are flushed to log-agent process.")
  public Boolean isSeLogBufferConnBlockingDequeue() {
    return seLogBufferConnBlockingDequeue;
  }

  public void setSeLogBufferConnBlockingDequeue(Boolean seLogBufferConnBlockingDequeue) {
    this.seLogBufferConnBlockingDequeue = seLogBufferConnBlockingDequeue;
  }

  public SeBootupProperties seLogBufferConnlogSize(Integer seLogBufferConnlogSize) {
    this.seLogBufferConnlogSize = seLogBufferConnlogSize;
    return this;
  }

   /**
   * Internal connection log buffer size to use on Service Engine. Can be fine tuned for better performance of data plane in specific environments.
   * @return seLogBufferConnlogSize
  **/
  @Schema(description = "Internal connection log buffer size to use on Service Engine. Can be fine tuned for better performance of data plane in specific environments.")
  public Integer getSeLogBufferConnlogSize() {
    return seLogBufferConnlogSize;
  }

  public void setSeLogBufferConnlogSize(Integer seLogBufferConnlogSize) {
    this.seLogBufferConnlogSize = seLogBufferConnlogSize;
  }

  public SeBootupProperties seLogBufferEventsBlockingDequeue(Boolean seLogBufferEventsBlockingDequeue) {
    this.seLogBufferEventsBlockingDequeue = seLogBufferEventsBlockingDequeue;
    return this;
  }

   /**
   * Internal flag that blocks dataplane until all outstanding events are flushed to log-agent process.
   * @return seLogBufferEventsBlockingDequeue
  **/
  @Schema(description = "Internal flag that blocks dataplane until all outstanding events are flushed to log-agent process.")
  public Boolean isSeLogBufferEventsBlockingDequeue() {
    return seLogBufferEventsBlockingDequeue;
  }

  public void setSeLogBufferEventsBlockingDequeue(Boolean seLogBufferEventsBlockingDequeue) {
    this.seLogBufferEventsBlockingDequeue = seLogBufferEventsBlockingDequeue;
  }

  public SeBootupProperties seLogBufferEventsSize(Integer seLogBufferEventsSize) {
    this.seLogBufferEventsSize = seLogBufferEventsSize;
    return this;
  }

   /**
   * Internal events buffer size to use on Service Engine. Can be fine tuned for better performance of data plane in specific environments.
   * @return seLogBufferEventsSize
  **/
  @Schema(description = "Internal events buffer size to use on Service Engine. Can be fine tuned for better performance of data plane in specific environments.")
  public Integer getSeLogBufferEventsSize() {
    return seLogBufferEventsSize;
  }

  public void setSeLogBufferEventsSize(Integer seLogBufferEventsSize) {
    this.seLogBufferEventsSize = seLogBufferEventsSize;
  }

  public SeBootupProperties seLro(Integer seLro) {
    this.seLro = seLro;
    return this;
  }

   /**
   * Deprecated. Field deprecated in 18.2.5.
   * @return seLro
  **/
  @Schema(description = "Deprecated. Field deprecated in 18.2.5.")
  public Integer getSeLro() {
    return seLro;
  }

  public void setSeLro(Integer seLro) {
    this.seLro = seLro;
  }

  public SeBootupProperties sePcapPktCount(Integer sePcapPktCount) {
    this.sePcapPktCount = sePcapPktCount;
    return this;
  }

   /**
   * Deprecated. Field deprecated in 18.2.5.
   * @return sePcapPktCount
  **/
  @Schema(description = "Deprecated. Field deprecated in 18.2.5.")
  public Integer getSePcapPktCount() {
    return sePcapPktCount;
  }

  public void setSePcapPktCount(Integer sePcapPktCount) {
    this.sePcapPktCount = sePcapPktCount;
  }

  public SeBootupProperties sePcapPktSz(Integer sePcapPktSz) {
    this.sePcapPktSz = sePcapPktSz;
    return this;
  }

   /**
   * Deprecated. Field deprecated in 18.2.5.
   * @return sePcapPktSz
  **/
  @Schema(description = "Deprecated. Field deprecated in 18.2.5.")
  public Integer getSePcapPktSz() {
    return sePcapPktSz;
  }

  public void setSePcapPktSz(Integer sePcapPktSz) {
    this.sePcapPktSz = sePcapPktSz;
  }

  public SeBootupProperties seRumSamplingNavInterval(Integer seRumSamplingNavInterval) {
    this.seRumSamplingNavInterval = seRumSamplingNavInterval;
    return this;
  }

   /**
   * Deprecated. Field deprecated in 18.2.6.
   * @return seRumSamplingNavInterval
  **/
  @Schema(description = "Deprecated. Field deprecated in 18.2.6.")
  public Integer getSeRumSamplingNavInterval() {
    return seRumSamplingNavInterval;
  }

  public void setSeRumSamplingNavInterval(Integer seRumSamplingNavInterval) {
    this.seRumSamplingNavInterval = seRumSamplingNavInterval;
  }

  public SeBootupProperties seRumSamplingNavPercent(Integer seRumSamplingNavPercent) {
    this.seRumSamplingNavPercent = seRumSamplingNavPercent;
    return this;
  }

   /**
   * Deprecated. Field deprecated in 18.2.6.
   * @return seRumSamplingNavPercent
  **/
  @Schema(description = "Deprecated. Field deprecated in 18.2.6.")
  public Integer getSeRumSamplingNavPercent() {
    return seRumSamplingNavPercent;
  }

  public void setSeRumSamplingNavPercent(Integer seRumSamplingNavPercent) {
    this.seRumSamplingNavPercent = seRumSamplingNavPercent;
  }

  public SeBootupProperties seRumSamplingResInterval(Integer seRumSamplingResInterval) {
    this.seRumSamplingResInterval = seRumSamplingResInterval;
    return this;
  }

   /**
   * Deprecated. Field deprecated in 18.2.6.
   * @return seRumSamplingResInterval
  **/
  @Schema(description = "Deprecated. Field deprecated in 18.2.6.")
  public Integer getSeRumSamplingResInterval() {
    return seRumSamplingResInterval;
  }

  public void setSeRumSamplingResInterval(Integer seRumSamplingResInterval) {
    this.seRumSamplingResInterval = seRumSamplingResInterval;
  }

  public SeBootupProperties seRumSamplingResPercent(Integer seRumSamplingResPercent) {
    this.seRumSamplingResPercent = seRumSamplingResPercent;
    return this;
  }

   /**
   * Deprecated. Field deprecated in 18.2.6.
   * @return seRumSamplingResPercent
  **/
  @Schema(description = "Deprecated. Field deprecated in 18.2.6.")
  public Integer getSeRumSamplingResPercent() {
    return seRumSamplingResPercent;
  }

  public void setSeRumSamplingResPercent(Integer seRumSamplingResPercent) {
    this.seRumSamplingResPercent = seRumSamplingResPercent;
  }

  public SeBootupProperties seTunnelMode(Integer seTunnelMode) {
    this.seTunnelMode = seTunnelMode;
    return this;
  }

   /**
   * Determines if DSR from secondary SE is active or not      0        Automatically determine based on hypervisor type    1        Disable DSR unconditionally    ~[0,1]   Enable DSR unconditionally. Field deprecated in 17.1.1.
   * @return seTunnelMode
  **/
  @Schema(description = "Determines if DSR from secondary SE is active or not      0        Automatically determine based on hypervisor type    1        Disable DSR unconditionally    ~[0,1]   Enable DSR unconditionally. Field deprecated in 17.1.1.")
  public Integer getSeTunnelMode() {
    return seTunnelMode;
  }

  public void setSeTunnelMode(Integer seTunnelMode) {
    this.seTunnelMode = seTunnelMode;
  }

  public SeBootupProperties seTxBatchSize(Integer seTxBatchSize) {
    this.seTxBatchSize = seTxBatchSize;
    return this;
  }

   /**
   * Deprecated. Field deprecated in 18.2.5.
   * @return seTxBatchSize
  **/
  @Schema(description = "Deprecated. Field deprecated in 18.2.5.")
  public Integer getSeTxBatchSize() {
    return seTxBatchSize;
  }

  public void setSeTxBatchSize(Integer seTxBatchSize) {
    this.seTxBatchSize = seTxBatchSize;
  }

  public SeBootupProperties seUseDpdk(Integer seUseDpdk) {
    this.seUseDpdk = seUseDpdk;
    return this;
  }

   /**
   * This field has been moved to se_group properties 18.1.2 onwards. Field deprecated in 18.1.3.
   * @return seUseDpdk
  **/
  @Schema(description = "This field has been moved to se_group properties 18.1.2 onwards. Field deprecated in 18.1.3.")
  public Integer getSeUseDpdk() {
    return seUseDpdk;
  }

  public void setSeUseDpdk(Integer seUseDpdk) {
    this.seUseDpdk = seUseDpdk;
  }

  public SeBootupProperties sslSessCachePerVs(Integer sslSessCachePerVs) {
    this.sslSessCachePerVs = sslSessCachePerVs;
    return this;
  }

   /**
   * Number of ssl_sess_cache_per_vs.
   * @return sslSessCachePerVs
  **/
  @Schema(description = "Number of ssl_sess_cache_per_vs.")
  public Integer getSslSessCachePerVs() {
    return sslSessCachePerVs;
  }

  public void setSslSessCachePerVs(Integer sslSessCachePerVs) {
    this.sslSessCachePerVs = sslSessCachePerVs;
  }

  public SeBootupProperties sslSessCacheTimeout(Integer sslSessCacheTimeout) {
    this.sslSessCacheTimeout = sslSessCacheTimeout;
    return this;
  }

   /**
   * Number of ssl_sess_cache_timeout.
   * @return sslSessCacheTimeout
  **/
  @Schema(description = "Number of ssl_sess_cache_timeout.")
  public Integer getSslSessCacheTimeout() {
    return sslSessCacheTimeout;
  }

  public void setSslSessCacheTimeout(Integer sslSessCacheTimeout) {
    this.sslSessCacheTimeout = sslSessCacheTimeout;
  }

  public SeBootupProperties tcpSyncacheHashsize(Integer tcpSyncacheHashsize) {
    this.tcpSyncacheHashsize = tcpSyncacheHashsize;
    return this;
  }

   /**
   * Size of the TCP SYN cache hash table.
   * @return tcpSyncacheHashsize
  **/
  @Schema(description = "Size of the TCP SYN cache hash table.")
  public Integer getTcpSyncacheHashsize() {
    return tcpSyncacheHashsize;
  }

  public void setTcpSyncacheHashsize(Integer tcpSyncacheHashsize) {
    this.tcpSyncacheHashsize = tcpSyncacheHashsize;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SeBootupProperties seBootupProperties = (SeBootupProperties) o;
    return Objects.equals(this.distributeQueues, seBootupProperties.distributeQueues) &&
        Objects.equals(this.distributeVnics, seBootupProperties.distributeVnics) &&
        Objects.equals(this.dockerBackendPortend, seBootupProperties.dockerBackendPortend) &&
        Objects.equals(this.dockerBackendPortstart, seBootupProperties.dockerBackendPortstart) &&
        Objects.equals(this.fairQueueingEnabled, seBootupProperties.fairQueueingEnabled) &&
        Objects.equals(this.geoDbGranularity, seBootupProperties.geoDbGranularity) &&
        Objects.equals(this.l7ConnsPerCore, seBootupProperties.l7ConnsPerCore) &&
        Objects.equals(this.l7ResvdListenConnsPerCore, seBootupProperties.l7ResvdListenConnsPerCore) &&
        Objects.equals(this.logAgentDebugEnabled, seBootupProperties.logAgentDebugEnabled) &&
        Objects.equals(this.logAgentTraceEnabled, seBootupProperties.logAgentTraceEnabled) &&
        Objects.equals(this.seDpCompression, seBootupProperties.seDpCompression) &&
        Objects.equals(this.seDpdkPmd, seBootupProperties.seDpdkPmd) &&
        Objects.equals(this.seEmulatedCores, seBootupProperties.seEmulatedCores) &&
        Objects.equals(this.seIpEncapIpc, seBootupProperties.seIpEncapIpc) &&
        Objects.equals(this.seL3EncapIpc, seBootupProperties.seL3EncapIpc) &&
        Objects.equals(this.seLogBufferAppBlockingDequeue, seBootupProperties.seLogBufferAppBlockingDequeue) &&
        Objects.equals(this.seLogBufferApplogSize, seBootupProperties.seLogBufferApplogSize) &&
        Objects.equals(this.seLogBufferChunkCount, seBootupProperties.seLogBufferChunkCount) &&
        Objects.equals(this.seLogBufferConnBlockingDequeue, seBootupProperties.seLogBufferConnBlockingDequeue) &&
        Objects.equals(this.seLogBufferConnlogSize, seBootupProperties.seLogBufferConnlogSize) &&
        Objects.equals(this.seLogBufferEventsBlockingDequeue, seBootupProperties.seLogBufferEventsBlockingDequeue) &&
        Objects.equals(this.seLogBufferEventsSize, seBootupProperties.seLogBufferEventsSize) &&
        Objects.equals(this.seLro, seBootupProperties.seLro) &&
        Objects.equals(this.sePcapPktCount, seBootupProperties.sePcapPktCount) &&
        Objects.equals(this.sePcapPktSz, seBootupProperties.sePcapPktSz) &&
        Objects.equals(this.seRumSamplingNavInterval, seBootupProperties.seRumSamplingNavInterval) &&
        Objects.equals(this.seRumSamplingNavPercent, seBootupProperties.seRumSamplingNavPercent) &&
        Objects.equals(this.seRumSamplingResInterval, seBootupProperties.seRumSamplingResInterval) &&
        Objects.equals(this.seRumSamplingResPercent, seBootupProperties.seRumSamplingResPercent) &&
        Objects.equals(this.seTunnelMode, seBootupProperties.seTunnelMode) &&
        Objects.equals(this.seTxBatchSize, seBootupProperties.seTxBatchSize) &&
        Objects.equals(this.seUseDpdk, seBootupProperties.seUseDpdk) &&
        Objects.equals(this.sslSessCachePerVs, seBootupProperties.sslSessCachePerVs) &&
        Objects.equals(this.sslSessCacheTimeout, seBootupProperties.sslSessCacheTimeout) &&
        Objects.equals(this.tcpSyncacheHashsize, seBootupProperties.tcpSyncacheHashsize);
  }

  @Override
  public int hashCode() {
    return Objects.hash(distributeQueues, distributeVnics, dockerBackendPortend, dockerBackendPortstart, fairQueueingEnabled, geoDbGranularity, l7ConnsPerCore, l7ResvdListenConnsPerCore, logAgentDebugEnabled, logAgentTraceEnabled, seDpCompression, seDpdkPmd, seEmulatedCores, seIpEncapIpc, seL3EncapIpc, seLogBufferAppBlockingDequeue, seLogBufferApplogSize, seLogBufferChunkCount, seLogBufferConnBlockingDequeue, seLogBufferConnlogSize, seLogBufferEventsBlockingDequeue, seLogBufferEventsSize, seLro, sePcapPktCount, sePcapPktSz, seRumSamplingNavInterval, seRumSamplingNavPercent, seRumSamplingResInterval, seRumSamplingResPercent, seTunnelMode, seTxBatchSize, seUseDpdk, sslSessCachePerVs, sslSessCacheTimeout, tcpSyncacheHashsize);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SeBootupProperties {\n");
    
    sb.append("    distributeQueues: ").append(toIndentedString(distributeQueues)).append("\n");
    sb.append("    distributeVnics: ").append(toIndentedString(distributeVnics)).append("\n");
    sb.append("    dockerBackendPortend: ").append(toIndentedString(dockerBackendPortend)).append("\n");
    sb.append("    dockerBackendPortstart: ").append(toIndentedString(dockerBackendPortstart)).append("\n");
    sb.append("    fairQueueingEnabled: ").append(toIndentedString(fairQueueingEnabled)).append("\n");
    sb.append("    geoDbGranularity: ").append(toIndentedString(geoDbGranularity)).append("\n");
    sb.append("    l7ConnsPerCore: ").append(toIndentedString(l7ConnsPerCore)).append("\n");
    sb.append("    l7ResvdListenConnsPerCore: ").append(toIndentedString(l7ResvdListenConnsPerCore)).append("\n");
    sb.append("    logAgentDebugEnabled: ").append(toIndentedString(logAgentDebugEnabled)).append("\n");
    sb.append("    logAgentTraceEnabled: ").append(toIndentedString(logAgentTraceEnabled)).append("\n");
    sb.append("    seDpCompression: ").append(toIndentedString(seDpCompression)).append("\n");
    sb.append("    seDpdkPmd: ").append(toIndentedString(seDpdkPmd)).append("\n");
    sb.append("    seEmulatedCores: ").append(toIndentedString(seEmulatedCores)).append("\n");
    sb.append("    seIpEncapIpc: ").append(toIndentedString(seIpEncapIpc)).append("\n");
    sb.append("    seL3EncapIpc: ").append(toIndentedString(seL3EncapIpc)).append("\n");
    sb.append("    seLogBufferAppBlockingDequeue: ").append(toIndentedString(seLogBufferAppBlockingDequeue)).append("\n");
    sb.append("    seLogBufferApplogSize: ").append(toIndentedString(seLogBufferApplogSize)).append("\n");
    sb.append("    seLogBufferChunkCount: ").append(toIndentedString(seLogBufferChunkCount)).append("\n");
    sb.append("    seLogBufferConnBlockingDequeue: ").append(toIndentedString(seLogBufferConnBlockingDequeue)).append("\n");
    sb.append("    seLogBufferConnlogSize: ").append(toIndentedString(seLogBufferConnlogSize)).append("\n");
    sb.append("    seLogBufferEventsBlockingDequeue: ").append(toIndentedString(seLogBufferEventsBlockingDequeue)).append("\n");
    sb.append("    seLogBufferEventsSize: ").append(toIndentedString(seLogBufferEventsSize)).append("\n");
    sb.append("    seLro: ").append(toIndentedString(seLro)).append("\n");
    sb.append("    sePcapPktCount: ").append(toIndentedString(sePcapPktCount)).append("\n");
    sb.append("    sePcapPktSz: ").append(toIndentedString(sePcapPktSz)).append("\n");
    sb.append("    seRumSamplingNavInterval: ").append(toIndentedString(seRumSamplingNavInterval)).append("\n");
    sb.append("    seRumSamplingNavPercent: ").append(toIndentedString(seRumSamplingNavPercent)).append("\n");
    sb.append("    seRumSamplingResInterval: ").append(toIndentedString(seRumSamplingResInterval)).append("\n");
    sb.append("    seRumSamplingResPercent: ").append(toIndentedString(seRumSamplingResPercent)).append("\n");
    sb.append("    seTunnelMode: ").append(toIndentedString(seTunnelMode)).append("\n");
    sb.append("    seTxBatchSize: ").append(toIndentedString(seTxBatchSize)).append("\n");
    sb.append("    seUseDpdk: ").append(toIndentedString(seUseDpdk)).append("\n");
    sb.append("    sslSessCachePerVs: ").append(toIndentedString(sslSessCachePerVs)).append("\n");
    sb.append("    sslSessCacheTimeout: ").append(toIndentedString(sslSessCacheTimeout)).append("\n");
    sb.append("    tcpSyncacheHashsize: ").append(toIndentedString(tcpSyncacheHashsize)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
