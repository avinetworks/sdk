/*
 * Avi avi_global_spec Object API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 20.1.1
 * Contact: support@avinetworks.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.vmware.avi.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.vmware.avi.sdk.model.DockerRegistry;
import com.vmware.avi.sdk.model.IngAttribute;
import com.vmware.avi.sdk.model.IpAddr;
import com.vmware.avi.sdk.model.IpAddrPrefix;
import com.vmware.avi.sdk.model.MesosAttribute;
import com.vmware.avi.sdk.model.NuageSDNController;
import com.vmware.avi.sdk.model.OshiftSharedVirtualService;
import com.vmware.avi.sdk.model.PodToleration;
import com.vmware.avi.sdk.model.RouteInfo;
import com.vmware.avi.sdk.model.SSHSeDeployment;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;
/**
 * OShiftK8SConfiguration
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-03-12T12:27:26.755+05:30[Asia/Kolkata]")
public class OShiftK8SConfiguration {
  @JsonProperty("app_sync_frequency")
  private Integer appSyncFrequency = 300;

  @JsonProperty("auto_assign_fqdn")
  private Boolean autoAssignFqdn = true;

  @JsonProperty("avi_bridge_subnet")
  private IpAddrPrefix aviBridgeSubnet = null;

  @JsonProperty("ca_tls_key_and_certificate_ref")
  private String caTlsKeyAndCertificateRef = null;

  @JsonProperty("client_tls_key_and_certificate_ref")
  private String clientTlsKeyAndCertificateRef = null;

  @JsonProperty("cluster_tag")
  private String clusterTag = null;

  @JsonProperty("container_port_match_http_service")
  private Boolean containerPortMatchHttpService = true;

  @JsonProperty("coredump_directory")
  private String coredumpDirectory = "/var/lib/systemd/coredump";

  @JsonProperty("default_service_as_east_west_service")
  private Boolean defaultServiceAsEastWestService = true;

  @JsonProperty("default_shared_virtualservice")
  private OshiftSharedVirtualService defaultSharedVirtualservice = null;

  @JsonProperty("disable_auto_backend_service_sync")
  private Boolean disableAutoBackendServiceSync = null;

  @JsonProperty("disable_auto_frontend_service_sync")
  private Boolean disableAutoFrontendServiceSync = null;

  @JsonProperty("disable_auto_gs_sync")
  private Boolean disableAutoGsSync = null;

  @JsonProperty("disable_auto_se_creation")
  private Boolean disableAutoSeCreation = null;

  @JsonProperty("docker_endpoint")
  private String dockerEndpoint = "/var/run/docker.sock";

  @JsonProperty("docker_registry_se")
  private DockerRegistry dockerRegistrySe = null;

  @JsonProperty("east_west_placement_subnet")
  private IpAddrPrefix eastWestPlacementSubnet = null;

  @JsonProperty("enable_event_subscription")
  private Boolean enableEventSubscription = true;

  @JsonProperty("enable_route_ingress_hardening")
  private Boolean enableRouteIngressHardening = true;

  @JsonProperty("feproxy_vips_enable_proxy_arp")
  private Boolean feproxyVipsEnableProxyArp = true;

  @JsonProperty("fleet_endpoint")
  private String fleetEndpoint = null;

  @JsonProperty("http_container_ports")
  private List<Integer> httpContainerPorts = null;

  @JsonProperty("ing_exclude_attributes")
  private List<IngAttribute> ingExcludeAttributes = null;

  @JsonProperty("ing_include_attributes")
  private List<IngAttribute> ingIncludeAttributes = null;

  @JsonProperty("l4_health_monitoring")
  private Boolean l4HealthMonitoring = true;

  @JsonProperty("master_nodes")
  private List<String> masterNodes = null;

  @JsonProperty("node_availability_zone_label")
  private String nodeAvailabilityZoneLabel = null;

  @JsonProperty("ns_exclude_attributes")
  private List<MesosAttribute> nsExcludeAttributes = null;

  @JsonProperty("ns_include_attributes")
  private List<MesosAttribute> nsIncludeAttributes = null;

  @JsonProperty("nuage_controller")
  private NuageSDNController nuageController = null;

  @JsonProperty("num_shards")
  private Integer numShards = null;

  @JsonProperty("override_service_ports")
  private Boolean overrideServicePorts = true;

  @JsonProperty("persistent_volume_claim")
  private String persistentVolumeClaim = null;

  @JsonProperty("routes")
  private List<RouteInfo> routes = null;

  @JsonProperty("routes_share_virtualservice")
  private Boolean routesShareVirtualservice = null;

  @JsonProperty("sdn_overlay")
  private Boolean sdnOverlay = true;

  @JsonProperty("se_deployment_method")
  private String seDeploymentMethod = "SE_CREATE_POD";

  @JsonProperty("se_exclude_attributes")
  private List<MesosAttribute> seExcludeAttributes = null;

  @JsonProperty("se_image_pull_secret")
  private String seImagePullSecret = null;

  @JsonProperty("se_include_attributes")
  private List<MesosAttribute> seIncludeAttributes = null;

  @JsonProperty("se_namespace")
  private String seNamespace = "default";

  @JsonProperty("se_pod_tolerations")
  private List<PodToleration> sePodTolerations = null;

  @JsonProperty("se_priority_class")
  private String sePriorityClass = null;

  @JsonProperty("se_restart_batch_size")
  private Integer seRestartBatchSize = 1;

  @JsonProperty("se_restart_force")
  private Boolean seRestartForce = null;

  @JsonProperty("se_spawn_rate")
  private Integer seSpawnRate = 25;

  @JsonProperty("se_volume")
  private String seVolume = "/var/lib/avi";

  @JsonProperty("secure_egress_mode")
  private Boolean secureEgressMode = null;

  @JsonProperty("service_account_token")
  private String serviceAccountToken = null;

  @JsonProperty("service_port_match_http_service")
  private Boolean servicePortMatchHttpService = null;

  @JsonProperty("shard_prefix")
  private String shardPrefix = null;

  @JsonProperty("shared_virtualservice_namespace")
  private Boolean sharedVirtualserviceNamespace = null;

  @JsonProperty("ssh_se_deployment")
  private SSHSeDeployment sshSeDeployment = null;

  @JsonProperty("ssh_user_ref")
  private String sshUserRef = null;

  @JsonProperty("sync_not_ready_addresses")
  private Boolean syncNotReadyAddresses = true;

  @JsonProperty("use_controller_image")
  private Boolean useControllerImage = null;

  @JsonProperty("use_resource_definition_as_ssot")
  private Boolean useResourceDefinitionAsSsot = null;

  @JsonProperty("use_scheduling_disabled_nodes")
  private Boolean useSchedulingDisabledNodes = null;

  @JsonProperty("use_service_cluster_ip_as_ew_vip")
  private Boolean useServiceClusterIpAsEwVip = null;

  @JsonProperty("vip_default_gateway")
  private IpAddr vipDefaultGateway = null;

  public OShiftK8SConfiguration appSyncFrequency(Integer appSyncFrequency) {
    this.appSyncFrequency = appSyncFrequency;
    return this;
  }

   /**
   * Sync frequency in seconds with frameworks.
   * @return appSyncFrequency
  **/
  @Schema(description = "Sync frequency in seconds with frameworks.")
  public Integer getAppSyncFrequency() {
    return appSyncFrequency;
  }

  public void setAppSyncFrequency(Integer appSyncFrequency) {
    this.appSyncFrequency = appSyncFrequency;
  }

  public OShiftK8SConfiguration autoAssignFqdn(Boolean autoAssignFqdn) {
    this.autoAssignFqdn = autoAssignFqdn;
    return this;
  }

   /**
   * Auto assign FQDN to a virtual service if a valid FQDN is not configured. Field introduced in 17.2.8.
   * @return autoAssignFqdn
  **/
  @Schema(description = "Auto assign FQDN to a virtual service if a valid FQDN is not configured. Field introduced in 17.2.8.")
  public Boolean isAutoAssignFqdn() {
    return autoAssignFqdn;
  }

  public void setAutoAssignFqdn(Boolean autoAssignFqdn) {
    this.autoAssignFqdn = autoAssignFqdn;
  }

  public OShiftK8SConfiguration aviBridgeSubnet(IpAddrPrefix aviBridgeSubnet) {
    this.aviBridgeSubnet = aviBridgeSubnet;
    return this;
  }

   /**
   * Get aviBridgeSubnet
   * @return aviBridgeSubnet
  **/
  @Schema(description = "")
  public IpAddrPrefix getAviBridgeSubnet() {
    return aviBridgeSubnet;
  }

  public void setAviBridgeSubnet(IpAddrPrefix aviBridgeSubnet) {
    this.aviBridgeSubnet = aviBridgeSubnet;
  }

  public OShiftK8SConfiguration caTlsKeyAndCertificateRef(String caTlsKeyAndCertificateRef) {
    this.caTlsKeyAndCertificateRef = caTlsKeyAndCertificateRef;
    return this;
  }

   /**
   * UUID of the UCP CA TLS cert and key. It is a reference to an object of type SSLKeyAndCertificate.
   * @return caTlsKeyAndCertificateRef
  **/
  @Schema(description = "UUID of the UCP CA TLS cert and key. It is a reference to an object of type SSLKeyAndCertificate.")
  public String getCaTlsKeyAndCertificateRef() {
    return caTlsKeyAndCertificateRef;
  }

  public void setCaTlsKeyAndCertificateRef(String caTlsKeyAndCertificateRef) {
    this.caTlsKeyAndCertificateRef = caTlsKeyAndCertificateRef;
  }

  public OShiftK8SConfiguration clientTlsKeyAndCertificateRef(String clientTlsKeyAndCertificateRef) {
    this.clientTlsKeyAndCertificateRef = clientTlsKeyAndCertificateRef;
    return this;
  }

   /**
   * UUID of the client TLS cert and key instead of service account token. One of client certificate or token is required. It is a reference to an object of type SSLKeyAndCertificate.
   * @return clientTlsKeyAndCertificateRef
  **/
  @Schema(description = "UUID of the client TLS cert and key instead of service account token. One of client certificate or token is required. It is a reference to an object of type SSLKeyAndCertificate.")
  public String getClientTlsKeyAndCertificateRef() {
    return clientTlsKeyAndCertificateRef;
  }

  public void setClientTlsKeyAndCertificateRef(String clientTlsKeyAndCertificateRef) {
    this.clientTlsKeyAndCertificateRef = clientTlsKeyAndCertificateRef;
  }

  public OShiftK8SConfiguration clusterTag(String clusterTag) {
    this.clusterTag = clusterTag;
    return this;
  }

   /**
   * Openshift/K8S Cluster ID used to uniquely map same named namespaces as tenants in Avi. In order to use more than one OpenShift/K8S cloud on this controller, cluster_tag has to be unique across these clouds. Changing cluster_tag is disruptive as all virtual services in the cloud will be recreated. Field introduced in 17.2.5.
   * @return clusterTag
  **/
  @Schema(description = "Openshift/K8S Cluster ID used to uniquely map same named namespaces as tenants in Avi. In order to use more than one OpenShift/K8S cloud on this controller, cluster_tag has to be unique across these clouds. Changing cluster_tag is disruptive as all virtual services in the cloud will be recreated. Field introduced in 17.2.5.")
  public String getClusterTag() {
    return clusterTag;
  }

  public void setClusterTag(String clusterTag) {
    this.clusterTag = clusterTag;
  }

  public OShiftK8SConfiguration containerPortMatchHttpService(Boolean containerPortMatchHttpService) {
    this.containerPortMatchHttpService = containerPortMatchHttpService;
    return this;
  }

   /**
   * Perform container port matching to create a HTTP Virtualservice instead of a TCP/UDP VirtualService. By default, ports 80, 8080, 443, 8443 are considered HTTP.
   * @return containerPortMatchHttpService
  **/
  @Schema(description = "Perform container port matching to create a HTTP Virtualservice instead of a TCP/UDP VirtualService. By default, ports 80, 8080, 443, 8443 are considered HTTP.")
  public Boolean isContainerPortMatchHttpService() {
    return containerPortMatchHttpService;
  }

  public void setContainerPortMatchHttpService(Boolean containerPortMatchHttpService) {
    this.containerPortMatchHttpService = containerPortMatchHttpService;
  }

  public OShiftK8SConfiguration coredumpDirectory(String coredumpDirectory) {
    this.coredumpDirectory = coredumpDirectory;
    return this;
  }

   /**
   * Directory to mount to check for core dumps on Service Engines. This will be mapped read only to /var/crash on any new Service Engines. This is a disruptive change.
   * @return coredumpDirectory
  **/
  @Schema(description = "Directory to mount to check for core dumps on Service Engines. This will be mapped read only to /var/crash on any new Service Engines. This is a disruptive change.")
  public String getCoredumpDirectory() {
    return coredumpDirectory;
  }

  public void setCoredumpDirectory(String coredumpDirectory) {
    this.coredumpDirectory = coredumpDirectory;
  }

  public OShiftK8SConfiguration defaultServiceAsEastWestService(Boolean defaultServiceAsEastWestService) {
    this.defaultServiceAsEastWestService = defaultServiceAsEastWestService;
    return this;
  }

   /**
   * If there is no explicit east_west_placement field in virtualservice configuration, treat service as a East-West service; default services such a OpenShift API server do not have virtualservice configuration.
   * @return defaultServiceAsEastWestService
  **/
  @Schema(description = "If there is no explicit east_west_placement field in virtualservice configuration, treat service as a East-West service; default services such a OpenShift API server do not have virtualservice configuration.")
  public Boolean isDefaultServiceAsEastWestService() {
    return defaultServiceAsEastWestService;
  }

  public void setDefaultServiceAsEastWestService(Boolean defaultServiceAsEastWestService) {
    this.defaultServiceAsEastWestService = defaultServiceAsEastWestService;
  }

  public OShiftK8SConfiguration defaultSharedVirtualservice(OshiftSharedVirtualService defaultSharedVirtualservice) {
    this.defaultSharedVirtualservice = defaultSharedVirtualservice;
    return this;
  }

   /**
   * Get defaultSharedVirtualservice
   * @return defaultSharedVirtualservice
  **/
  @Schema(description = "")
  public OshiftSharedVirtualService getDefaultSharedVirtualservice() {
    return defaultSharedVirtualservice;
  }

  public void setDefaultSharedVirtualservice(OshiftSharedVirtualService defaultSharedVirtualservice) {
    this.defaultSharedVirtualservice = defaultSharedVirtualservice;
  }

  public OShiftK8SConfiguration disableAutoBackendServiceSync(Boolean disableAutoBackendServiceSync) {
    this.disableAutoBackendServiceSync = disableAutoBackendServiceSync;
    return this;
  }

   /**
   * Disable auto service sync for back end services.
   * @return disableAutoBackendServiceSync
  **/
  @Schema(description = "Disable auto service sync for back end services.")
  public Boolean isDisableAutoBackendServiceSync() {
    return disableAutoBackendServiceSync;
  }

  public void setDisableAutoBackendServiceSync(Boolean disableAutoBackendServiceSync) {
    this.disableAutoBackendServiceSync = disableAutoBackendServiceSync;
  }

  public OShiftK8SConfiguration disableAutoFrontendServiceSync(Boolean disableAutoFrontendServiceSync) {
    this.disableAutoFrontendServiceSync = disableAutoFrontendServiceSync;
    return this;
  }

   /**
   * Disable auto service sync for front end services.
   * @return disableAutoFrontendServiceSync
  **/
  @Schema(description = "Disable auto service sync for front end services.")
  public Boolean isDisableAutoFrontendServiceSync() {
    return disableAutoFrontendServiceSync;
  }

  public void setDisableAutoFrontendServiceSync(Boolean disableAutoFrontendServiceSync) {
    this.disableAutoFrontendServiceSync = disableAutoFrontendServiceSync;
  }

  public OShiftK8SConfiguration disableAutoGsSync(Boolean disableAutoGsSync) {
    this.disableAutoGsSync = disableAutoGsSync;
    return this;
  }

   /**
   * Disable auto sync for GSLB services. Field introduced in 17.1.3.
   * @return disableAutoGsSync
  **/
  @Schema(description = "Disable auto sync for GSLB services. Field introduced in 17.1.3.")
  public Boolean isDisableAutoGsSync() {
    return disableAutoGsSync;
  }

  public void setDisableAutoGsSync(Boolean disableAutoGsSync) {
    this.disableAutoGsSync = disableAutoGsSync;
  }

  public OShiftK8SConfiguration disableAutoSeCreation(Boolean disableAutoSeCreation) {
    this.disableAutoSeCreation = disableAutoSeCreation;
    return this;
  }

   /**
   * Disable SE creation.
   * @return disableAutoSeCreation
  **/
  @Schema(description = "Disable SE creation.")
  public Boolean isDisableAutoSeCreation() {
    return disableAutoSeCreation;
  }

  public void setDisableAutoSeCreation(Boolean disableAutoSeCreation) {
    this.disableAutoSeCreation = disableAutoSeCreation;
  }

  public OShiftK8SConfiguration dockerEndpoint(String dockerEndpoint) {
    this.dockerEndpoint = dockerEndpoint;
    return this;
  }

   /**
   * Host Docker server UNIX socket endpoint. Field introduced in 17.2.14, 18.1.5, 18.2.1.
   * @return dockerEndpoint
  **/
  @Schema(description = "Host Docker server UNIX socket endpoint. Field introduced in 17.2.14, 18.1.5, 18.2.1.")
  public String getDockerEndpoint() {
    return dockerEndpoint;
  }

  public void setDockerEndpoint(String dockerEndpoint) {
    this.dockerEndpoint = dockerEndpoint;
  }

  public OShiftK8SConfiguration dockerRegistrySe(DockerRegistry dockerRegistrySe) {
    this.dockerRegistrySe = dockerRegistrySe;
    return this;
  }

   /**
   * Get dockerRegistrySe
   * @return dockerRegistrySe
  **/
  @Schema(description = "")
  public DockerRegistry getDockerRegistrySe() {
    return dockerRegistrySe;
  }

  public void setDockerRegistrySe(DockerRegistry dockerRegistrySe) {
    this.dockerRegistrySe = dockerRegistrySe;
  }

  public OShiftK8SConfiguration eastWestPlacementSubnet(IpAddrPrefix eastWestPlacementSubnet) {
    this.eastWestPlacementSubnet = eastWestPlacementSubnet;
    return this;
  }

   /**
   * Get eastWestPlacementSubnet
   * @return eastWestPlacementSubnet
  **/
  @Schema(description = "")
  public IpAddrPrefix getEastWestPlacementSubnet() {
    return eastWestPlacementSubnet;
  }

  public void setEastWestPlacementSubnet(IpAddrPrefix eastWestPlacementSubnet) {
    this.eastWestPlacementSubnet = eastWestPlacementSubnet;
  }

  public OShiftK8SConfiguration enableEventSubscription(Boolean enableEventSubscription) {
    this.enableEventSubscription = enableEventSubscription;
    return this;
  }

   /**
   * Enable Kubernetes event subscription.
   * @return enableEventSubscription
  **/
  @Schema(description = "Enable Kubernetes event subscription.")
  public Boolean isEnableEventSubscription() {
    return enableEventSubscription;
  }

  public void setEnableEventSubscription(Boolean enableEventSubscription) {
    this.enableEventSubscription = enableEventSubscription;
  }

  public OShiftK8SConfiguration enableRouteIngressHardening(Boolean enableRouteIngressHardening) {
    this.enableRouteIngressHardening = enableRouteIngressHardening;
    return this;
  }

   /**
   * Knob to turn on adding of HTTP drop rules for host and path combinations in incoming request header, specified as part of Ingress/Route spec. The default state is to enable this behavior. Note  Toggling this knob only affects any new routes/ingresses, existing routes/ingresses present in Avi will continue to function as-is. Field introduced in 18.2.6.
   * @return enableRouteIngressHardening
  **/
  @Schema(description = "Knob to turn on adding of HTTP drop rules for host and path combinations in incoming request header, specified as part of Ingress/Route spec. The default state is to enable this behavior. Note  Toggling this knob only affects any new routes/ingresses, existing routes/ingresses present in Avi will continue to function as-is. Field introduced in 18.2.6.")
  public Boolean isEnableRouteIngressHardening() {
    return enableRouteIngressHardening;
  }

  public void setEnableRouteIngressHardening(Boolean enableRouteIngressHardening) {
    this.enableRouteIngressHardening = enableRouteIngressHardening;
  }

  public OShiftK8SConfiguration feproxyVipsEnableProxyArp(Boolean feproxyVipsEnableProxyArp) {
    this.feproxyVipsEnableProxyArp = feproxyVipsEnableProxyArp;
    return this;
  }

   /**
   * Enable proxy ARP from Host interface for Front End  proxies.
   * @return feproxyVipsEnableProxyArp
  **/
  @Schema(description = "Enable proxy ARP from Host interface for Front End  proxies.")
  public Boolean isFeproxyVipsEnableProxyArp() {
    return feproxyVipsEnableProxyArp;
  }

  public void setFeproxyVipsEnableProxyArp(Boolean feproxyVipsEnableProxyArp) {
    this.feproxyVipsEnableProxyArp = feproxyVipsEnableProxyArp;
  }

  public OShiftK8SConfiguration fleetEndpoint(String fleetEndpoint) {
    this.fleetEndpoint = fleetEndpoint;
    return this;
  }

   /**
   * Optional fleet remote endpoint if fleet is used for SE deployment. Field deprecated in 17.2.13,18.1.5,18.2.1.
   * @return fleetEndpoint
  **/
  @Schema(description = "Optional fleet remote endpoint if fleet is used for SE deployment. Field deprecated in 17.2.13,18.1.5,18.2.1.")
  public String getFleetEndpoint() {
    return fleetEndpoint;
  }

  public void setFleetEndpoint(String fleetEndpoint) {
    this.fleetEndpoint = fleetEndpoint;
  }

  public OShiftK8SConfiguration httpContainerPorts(List<Integer> httpContainerPorts) {
    this.httpContainerPorts = httpContainerPorts;
    return this;
  }

  public OShiftK8SConfiguration addHttpContainerPortsItem(Integer httpContainerPortsItem) {
    if (this.httpContainerPorts == null) {
      this.httpContainerPorts = new ArrayList<Integer>();
    }
    this.httpContainerPorts.add(httpContainerPortsItem);
    return this;
  }

   /**
   * List of container ports that create a HTTP Virtualservice instead of a TCP/UDP VirtualService. Defaults to 80, 8080, 443 and 8443.
   * @return httpContainerPorts
  **/
  @Schema(description = "List of container ports that create a HTTP Virtualservice instead of a TCP/UDP VirtualService. Defaults to 80, 8080, 443 and 8443.")
  public List<Integer> getHttpContainerPorts() {
    return httpContainerPorts;
  }

  public void setHttpContainerPorts(List<Integer> httpContainerPorts) {
    this.httpContainerPorts = httpContainerPorts;
  }

  public OShiftK8SConfiguration ingExcludeAttributes(List<IngAttribute> ingExcludeAttributes) {
    this.ingExcludeAttributes = ingExcludeAttributes;
    return this;
  }

  public OShiftK8SConfiguration addIngExcludeAttributesItem(IngAttribute ingExcludeAttributesItem) {
    if (this.ingExcludeAttributes == null) {
      this.ingExcludeAttributes = new ArrayList<IngAttribute>();
    }
    this.ingExcludeAttributes.add(ingExcludeAttributesItem);
    return this;
  }

   /**
   * Do not sync applications only for ingress that have these exclude attributes configured. Field introduced in 17.2.15, 18.1.5, 18.2.1.
   * @return ingExcludeAttributes
  **/
  @Schema(description = "Do not sync applications only for ingress that have these exclude attributes configured. Field introduced in 17.2.15, 18.1.5, 18.2.1.")
  public List<IngAttribute> getIngExcludeAttributes() {
    return ingExcludeAttributes;
  }

  public void setIngExcludeAttributes(List<IngAttribute> ingExcludeAttributes) {
    this.ingExcludeAttributes = ingExcludeAttributes;
  }

  public OShiftK8SConfiguration ingIncludeAttributes(List<IngAttribute> ingIncludeAttributes) {
    this.ingIncludeAttributes = ingIncludeAttributes;
    return this;
  }

  public OShiftK8SConfiguration addIngIncludeAttributesItem(IngAttribute ingIncludeAttributesItem) {
    if (this.ingIncludeAttributes == null) {
      this.ingIncludeAttributes = new ArrayList<IngAttribute>();
    }
    this.ingIncludeAttributes.add(ingIncludeAttributesItem);
    return this;
  }

   /**
   * Sync applications only for ingress objects that have these include attributes configured. Default values are populated for this field if not provided. The default value are  &#x27;attribute&#x27;  &#x27;kubernetes.io/ingress.class&#x27;, &#x27;value&#x27; &#x27;avi&#x27;. Field introduced in 17.2.15, 18.1.5, 18.2.1.
   * @return ingIncludeAttributes
  **/
  @Schema(description = "Sync applications only for ingress objects that have these include attributes configured. Default values are populated for this field if not provided. The default value are  'attribute'  'kubernetes.io/ingress.class', 'value' 'avi'. Field introduced in 17.2.15, 18.1.5, 18.2.1.")
  public List<IngAttribute> getIngIncludeAttributes() {
    return ingIncludeAttributes;
  }

  public void setIngIncludeAttributes(List<IngAttribute> ingIncludeAttributes) {
    this.ingIncludeAttributes = ingIncludeAttributes;
  }

  public OShiftK8SConfiguration l4HealthMonitoring(Boolean l4HealthMonitoring) {
    this.l4HealthMonitoring = l4HealthMonitoring;
    return this;
  }

   /**
   * Perform Layer4 (TCP/UDP) health monitoring even for Layer7 (HTTP) Pools.
   * @return l4HealthMonitoring
  **/
  @Schema(description = "Perform Layer4 (TCP/UDP) health monitoring even for Layer7 (HTTP) Pools.")
  public Boolean isL4HealthMonitoring() {
    return l4HealthMonitoring;
  }

  public void setL4HealthMonitoring(Boolean l4HealthMonitoring) {
    this.l4HealthMonitoring = l4HealthMonitoring;
  }

  public OShiftK8SConfiguration masterNodes(List<String> masterNodes) {
    this.masterNodes = masterNodes;
    return this;
  }

  public OShiftK8SConfiguration addMasterNodesItem(String masterNodesItem) {
    if (this.masterNodes == null) {
      this.masterNodes = new ArrayList<String>();
    }
    this.masterNodes.add(masterNodesItem);
    return this;
  }

   /**
   * List of OpenShift/Kubernetes master nodes; In case of a load balanced OpenShift/K8S cluster, use Virtual IP of the cluster. Each node is of the form node 8443 or http //node 8080. If scheme is not provided, https is assumed.
   * @return masterNodes
  **/
  @Schema(description = "List of OpenShift/Kubernetes master nodes; In case of a load balanced OpenShift/K8S cluster, use Virtual IP of the cluster. Each node is of the form node 8443 or http //node 8080. If scheme is not provided, https is assumed.")
  public List<String> getMasterNodes() {
    return masterNodes;
  }

  public void setMasterNodes(List<String> masterNodes) {
    this.masterNodes = masterNodes;
  }

  public OShiftK8SConfiguration nodeAvailabilityZoneLabel(String nodeAvailabilityZoneLabel) {
    this.nodeAvailabilityZoneLabel = nodeAvailabilityZoneLabel;
    return this;
  }

   /**
   * OpenShift/K8S Node label to be used as OpenShift/K8S Node&#x27;s availability zone in a dual availability zone deployment. ServiceEngines belonging to the availability zone will be rebooted during a manual DR failover.
   * @return nodeAvailabilityZoneLabel
  **/
  @Schema(description = "OpenShift/K8S Node label to be used as OpenShift/K8S Node's availability zone in a dual availability zone deployment. ServiceEngines belonging to the availability zone will be rebooted during a manual DR failover.")
  public String getNodeAvailabilityZoneLabel() {
    return nodeAvailabilityZoneLabel;
  }

  public void setNodeAvailabilityZoneLabel(String nodeAvailabilityZoneLabel) {
    this.nodeAvailabilityZoneLabel = nodeAvailabilityZoneLabel;
  }

  public OShiftK8SConfiguration nsExcludeAttributes(List<MesosAttribute> nsExcludeAttributes) {
    this.nsExcludeAttributes = nsExcludeAttributes;
    return this;
  }

  public OShiftK8SConfiguration addNsExcludeAttributesItem(MesosAttribute nsExcludeAttributesItem) {
    if (this.nsExcludeAttributes == null) {
      this.nsExcludeAttributes = new ArrayList<MesosAttribute>();
    }
    this.nsExcludeAttributes.add(nsExcludeAttributesItem);
    return this;
  }

   /**
   * Syncing of applications is disabled only for namespaces/projects that have these exclude attributes configured. If there are apps synced already for these namespaces, they will be removed from Avi. Field introduced in 17.1.9,17.2.3.
   * @return nsExcludeAttributes
  **/
  @Schema(description = "Syncing of applications is disabled only for namespaces/projects that have these exclude attributes configured. If there are apps synced already for these namespaces, they will be removed from Avi. Field introduced in 17.1.9,17.2.3.")
  public List<MesosAttribute> getNsExcludeAttributes() {
    return nsExcludeAttributes;
  }

  public void setNsExcludeAttributes(List<MesosAttribute> nsExcludeAttributes) {
    this.nsExcludeAttributes = nsExcludeAttributes;
  }

  public OShiftK8SConfiguration nsIncludeAttributes(List<MesosAttribute> nsIncludeAttributes) {
    this.nsIncludeAttributes = nsIncludeAttributes;
    return this;
  }

  public OShiftK8SConfiguration addNsIncludeAttributesItem(MesosAttribute nsIncludeAttributesItem) {
    if (this.nsIncludeAttributes == null) {
      this.nsIncludeAttributes = new ArrayList<MesosAttribute>();
    }
    this.nsIncludeAttributes.add(nsIncludeAttributesItem);
    return this;
  }

   /**
   * Sync applications only for namespaces/projects that have these include attributes configured. Field introduced in 17.1.9,17.2.3.
   * @return nsIncludeAttributes
  **/
  @Schema(description = "Sync applications only for namespaces/projects that have these include attributes configured. Field introduced in 17.1.9,17.2.3.")
  public List<MesosAttribute> getNsIncludeAttributes() {
    return nsIncludeAttributes;
  }

  public void setNsIncludeAttributes(List<MesosAttribute> nsIncludeAttributes) {
    this.nsIncludeAttributes = nsIncludeAttributes;
  }

  public OShiftK8SConfiguration nuageController(NuageSDNController nuageController) {
    this.nuageController = nuageController;
    return this;
  }

   /**
   * Get nuageController
   * @return nuageController
  **/
  @Schema(description = "")
  public NuageSDNController getNuageController() {
    return nuageController;
  }

  public void setNuageController(NuageSDNController nuageController) {
    this.nuageController = nuageController;
  }

  public OShiftK8SConfiguration numShards(Integer numShards) {
    this.numShards = numShards;
    return this;
  }

   /**
   * Enables sharding of Routes and Ingresses to this number (if non zero) of virtual services in the admin tenant per SEGroup. Sharding is done by hashing on the namespace of the Ingress/Route object. This knob is valid only if shared_virtualservice_namespace flag is set. Field introduced in 18.2.5.
   * @return numShards
  **/
  @Schema(description = "Enables sharding of Routes and Ingresses to this number (if non zero) of virtual services in the admin tenant per SEGroup. Sharding is done by hashing on the namespace of the Ingress/Route object. This knob is valid only if shared_virtualservice_namespace flag is set. Field introduced in 18.2.5.")
  public Integer getNumShards() {
    return numShards;
  }

  public void setNumShards(Integer numShards) {
    this.numShards = numShards;
  }

  public OShiftK8SConfiguration overrideServicePorts(Boolean overrideServicePorts) {
    this.overrideServicePorts = overrideServicePorts;
    return this;
  }

   /**
   * Override Service Ports with well known ports (80/443) for http/https Route/Ingress VirtualServices. Field introduced in 17.2.12,18.1.3.
   * @return overrideServicePorts
  **/
  @Schema(description = "Override Service Ports with well known ports (80/443) for http/https Route/Ingress VirtualServices. Field introduced in 17.2.12,18.1.3.")
  public Boolean isOverrideServicePorts() {
    return overrideServicePorts;
  }

  public void setOverrideServicePorts(Boolean overrideServicePorts) {
    this.overrideServicePorts = overrideServicePorts;
  }

  public OShiftK8SConfiguration persistentVolumeClaim(String persistentVolumeClaim) {
    this.persistentVolumeClaim = persistentVolumeClaim;
    return this;
  }

   /**
   * Persistent Volume Claim name to be used for persistent storage for Avi service engines. This could be used in scenarios where host based volumes are ephemeral. Refer https //kubernetes.io/docs/concepts/storage/persistent-volumes/#persistentvolumeclaims for more details on the usage of this field. Field introduced in 18.2.6.
   * @return persistentVolumeClaim
  **/
  @Schema(description = "Persistent Volume Claim name to be used for persistent storage for Avi service engines. This could be used in scenarios where host based volumes are ephemeral. Refer https //kubernetes.io/docs/concepts/storage/persistent-volumes/#persistentvolumeclaims for more details on the usage of this field. Field introduced in 18.2.6.")
  public String getPersistentVolumeClaim() {
    return persistentVolumeClaim;
  }

  public void setPersistentVolumeClaim(String persistentVolumeClaim) {
    this.persistentVolumeClaim = persistentVolumeClaim;
  }

  public OShiftK8SConfiguration routes(List<RouteInfo> routes) {
    this.routes = routes;
    return this;
  }

  public OShiftK8SConfiguration addRoutesItem(RouteInfo routesItem) {
    if (this.routes == null) {
      this.routes = new ArrayList<RouteInfo>();
    }
    this.routes.add(routesItem);
    return this;
  }

   /**
   * Routes support adding routes to a particular namespace routing table in Openshift/K8s cluster. Each route is a combination of subnet and nexthop ip address or nexthop interface name, and a enum type is used to distinguish an entry in the host (default behaviour) or in the container/pod or in other namespace. This knob should be enabled in the following cases  1. Forwarding the network packets to the same network interface from where it came from in the OpenShift/K8s node. 2. OpenShift/K8s Node connected to the Internet via multiple network interfaces on different networks/ISPs.3. Handling North-South traffic originating from with in the node when the default gateway for outgoing traffic of vs is configured.4. Handling the container/pod traffic by adding the routes in the container/pod. Field introduced in 18.2.6.
   * @return routes
  **/
  @Schema(description = "Routes support adding routes to a particular namespace routing table in Openshift/K8s cluster. Each route is a combination of subnet and nexthop ip address or nexthop interface name, and a enum type is used to distinguish an entry in the host (default behaviour) or in the container/pod or in other namespace. This knob should be enabled in the following cases  1. Forwarding the network packets to the same network interface from where it came from in the OpenShift/K8s node. 2. OpenShift/K8s Node connected to the Internet via multiple network interfaces on different networks/ISPs.3. Handling North-South traffic originating from with in the node when the default gateway for outgoing traffic of vs is configured.4. Handling the container/pod traffic by adding the routes in the container/pod. Field introduced in 18.2.6.")
  public List<RouteInfo> getRoutes() {
    return routes;
  }

  public void setRoutes(List<RouteInfo> routes) {
    this.routes = routes;
  }

  public OShiftK8SConfiguration routesShareVirtualservice(Boolean routesShareVirtualservice) {
    this.routesShareVirtualservice = routesShareVirtualservice;
    return this;
  }

   /**
   * Deprecated. Field deprecated in 17.1.9. Field introduced in 17.1.1.
   * @return routesShareVirtualservice
  **/
  @Schema(description = "Deprecated. Field deprecated in 17.1.9. Field introduced in 17.1.1.")
  public Boolean isRoutesShareVirtualservice() {
    return routesShareVirtualservice;
  }

  public void setRoutesShareVirtualservice(Boolean routesShareVirtualservice) {
    this.routesShareVirtualservice = routesShareVirtualservice;
  }

  public OShiftK8SConfiguration sdnOverlay(Boolean sdnOverlay) {
    this.sdnOverlay = sdnOverlay;
    return this;
  }

   /**
   * Cluster uses overlay based SDN. Enable this flag if cluster uses a overlay based SDN for OpenShift, Flannel, Weave, Nuage. Disable for routed mode.
   * @return sdnOverlay
  **/
  @Schema(description = "Cluster uses overlay based SDN. Enable this flag if cluster uses a overlay based SDN for OpenShift, Flannel, Weave, Nuage. Disable for routed mode.")
  public Boolean isSdnOverlay() {
    return sdnOverlay;
  }

  public void setSdnOverlay(Boolean sdnOverlay) {
    this.sdnOverlay = sdnOverlay;
  }

  public OShiftK8SConfiguration seDeploymentMethod(String seDeploymentMethod) {
    this.seDeploymentMethod = seDeploymentMethod;
    return this;
  }

   /**
   * Use SSH/Pod for SE deployment. Enum options - SE_CREATE_FLEET, SE_CREATE_SSH, SE_CREATE_POD.
   * @return seDeploymentMethod
  **/
  @Schema(description = "Use SSH/Pod for SE deployment. Enum options - SE_CREATE_FLEET, SE_CREATE_SSH, SE_CREATE_POD.")
  public String getSeDeploymentMethod() {
    return seDeploymentMethod;
  }

  public void setSeDeploymentMethod(String seDeploymentMethod) {
    this.seDeploymentMethod = seDeploymentMethod;
  }

  public OShiftK8SConfiguration seExcludeAttributes(List<MesosAttribute> seExcludeAttributes) {
    this.seExcludeAttributes = seExcludeAttributes;
    return this;
  }

  public OShiftK8SConfiguration addSeExcludeAttributesItem(MesosAttribute seExcludeAttributesItem) {
    if (this.seExcludeAttributes == null) {
      this.seExcludeAttributes = new ArrayList<MesosAttribute>();
    }
    this.seExcludeAttributes.add(seExcludeAttributesItem);
    return this;
  }

   /**
   * Exclude hosts with attributes for SE creation.
   * @return seExcludeAttributes
  **/
  @Schema(description = "Exclude hosts with attributes for SE creation.")
  public List<MesosAttribute> getSeExcludeAttributes() {
    return seExcludeAttributes;
  }

  public void setSeExcludeAttributes(List<MesosAttribute> seExcludeAttributes) {
    this.seExcludeAttributes = seExcludeAttributes;
  }

  public OShiftK8SConfiguration seImagePullSecret(String seImagePullSecret) {
    this.seImagePullSecret = seImagePullSecret;
    return this;
  }

   /**
   * OpenShift/K8S secret name to be used for private docker repos when deploying SE as a Pod. Reference Link  https //kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/. Field introduced in 17.2.13,18.1.3,18.2.1.
   * @return seImagePullSecret
  **/
  @Schema(description = "OpenShift/K8S secret name to be used for private docker repos when deploying SE as a Pod. Reference Link  https //kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/. Field introduced in 17.2.13,18.1.3,18.2.1.")
  public String getSeImagePullSecret() {
    return seImagePullSecret;
  }

  public void setSeImagePullSecret(String seImagePullSecret) {
    this.seImagePullSecret = seImagePullSecret;
  }

  public OShiftK8SConfiguration seIncludeAttributes(List<MesosAttribute> seIncludeAttributes) {
    this.seIncludeAttributes = seIncludeAttributes;
    return this;
  }

  public OShiftK8SConfiguration addSeIncludeAttributesItem(MesosAttribute seIncludeAttributesItem) {
    if (this.seIncludeAttributes == null) {
      this.seIncludeAttributes = new ArrayList<MesosAttribute>();
    }
    this.seIncludeAttributes.add(seIncludeAttributesItem);
    return this;
  }

   /**
   * Create SEs just on hosts with include attributes.
   * @return seIncludeAttributes
  **/
  @Schema(description = "Create SEs just on hosts with include attributes.")
  public List<MesosAttribute> getSeIncludeAttributes() {
    return seIncludeAttributes;
  }

  public void setSeIncludeAttributes(List<MesosAttribute> seIncludeAttributes) {
    this.seIncludeAttributes = seIncludeAttributes;
  }

  public OShiftK8SConfiguration seNamespace(String seNamespace) {
    this.seNamespace = seNamespace;
    return this;
  }

   /**
   * Kubernetes namespace to be used for deploying Avi service engines. This namespace is used to create daemonsets, service accounts, etc. for Avi only use. Setting this value is a disruptive operation and assumes the namespace exists in kubernetes. &#x27;default&#x27; namespace is picked if this field is unset. Field introduced in 18.2.6.
   * @return seNamespace
  **/
  @Schema(description = "Kubernetes namespace to be used for deploying Avi service engines. This namespace is used to create daemonsets, service accounts, etc. for Avi only use. Setting this value is a disruptive operation and assumes the namespace exists in kubernetes. 'default' namespace is picked if this field is unset. Field introduced in 18.2.6.")
  public String getSeNamespace() {
    return seNamespace;
  }

  public void setSeNamespace(String seNamespace) {
    this.seNamespace = seNamespace;
  }

  public OShiftK8SConfiguration sePodTolerations(List<PodToleration> sePodTolerations) {
    this.sePodTolerations = sePodTolerations;
    return this;
  }

  public OShiftK8SConfiguration addSePodTolerationsItem(PodToleration sePodTolerationsItem) {
    if (this.sePodTolerations == null) {
      this.sePodTolerations = new ArrayList<PodToleration>();
    }
    this.sePodTolerations.add(sePodTolerationsItem);
    return this;
  }

   /**
   * Match SE Pod tolerations against taints of OpenShift/K8S nodes https //kubernetes.io/docs/concepts/configuration/taint-and-toleration/. Field introduced in 17.2.14, 18.1.5, 18.2.1.
   * @return sePodTolerations
  **/
  @Schema(description = "Match SE Pod tolerations against taints of OpenShift/K8S nodes https //kubernetes.io/docs/concepts/configuration/taint-and-toleration/. Field introduced in 17.2.14, 18.1.5, 18.2.1.")
  public List<PodToleration> getSePodTolerations() {
    return sePodTolerations;
  }

  public void setSePodTolerations(List<PodToleration> sePodTolerations) {
    this.sePodTolerations = sePodTolerations;
  }

  public OShiftK8SConfiguration sePriorityClass(String sePriorityClass) {
    this.sePriorityClass = sePriorityClass;
    return this;
  }

   /**
   * Priority class for AVI SEs when running as pods. User is expected to have the priority class (with this name) created in Kubernetes, beforehand. If the priority class doesn&#x27;t exist while assigning this field, the SE pods may not start. If empty no priority class will be used for deploying SE pods (default behaviour). Field introduced in 18.2.6.
   * @return sePriorityClass
  **/
  @Schema(description = "Priority class for AVI SEs when running as pods. User is expected to have the priority class (with this name) created in Kubernetes, beforehand. If the priority class doesn't exist while assigning this field, the SE pods may not start. If empty no priority class will be used for deploying SE pods (default behaviour). Field introduced in 18.2.6.")
  public String getSePriorityClass() {
    return sePriorityClass;
  }

  public void setSePriorityClass(String sePriorityClass) {
    this.sePriorityClass = sePriorityClass;
  }

  public OShiftK8SConfiguration seRestartBatchSize(Integer seRestartBatchSize) {
    this.seRestartBatchSize = seRestartBatchSize;
    return this;
  }

   /**
   * Restart ServiceEngines by batch on ServiceEngineGroup updates (cpu, memory..etc). Field introduced in 17.2.15, 18.1.5, 18.2.1.
   * @return seRestartBatchSize
  **/
  @Schema(description = "Restart ServiceEngines by batch on ServiceEngineGroup updates (cpu, memory..etc). Field introduced in 17.2.15, 18.1.5, 18.2.1.")
  public Integer getSeRestartBatchSize() {
    return seRestartBatchSize;
  }

  public void setSeRestartBatchSize(Integer seRestartBatchSize) {
    this.seRestartBatchSize = seRestartBatchSize;
  }

  public OShiftK8SConfiguration seRestartForce(Boolean seRestartForce) {
    this.seRestartForce = seRestartForce;
    return this;
  }

   /**
   * Restart ServiceEngines forcely if VirtualServices failed to migrate to another SE. Field introduced in 17.2.15, 18.1.5, 18.2.1.
   * @return seRestartForce
  **/
  @Schema(description = "Restart ServiceEngines forcely if VirtualServices failed to migrate to another SE. Field introduced in 17.2.15, 18.1.5, 18.2.1.")
  public Boolean isSeRestartForce() {
    return seRestartForce;
  }

  public void setSeRestartForce(Boolean seRestartForce) {
    this.seRestartForce = seRestartForce;
  }

  public OShiftK8SConfiguration seSpawnRate(Integer seSpawnRate) {
    this.seSpawnRate = seSpawnRate;
    return this;
  }

   /**
   * New SE spawn rate per minute. Field deprecated in 17.2.13,18.1.5,18.2.1.
   * @return seSpawnRate
  **/
  @Schema(description = "New SE spawn rate per minute. Field deprecated in 17.2.13,18.1.5,18.2.1.")
  public Integer getSeSpawnRate() {
    return seSpawnRate;
  }

  public void setSeSpawnRate(Integer seSpawnRate) {
    this.seSpawnRate = seSpawnRate;
  }

  public OShiftK8SConfiguration seVolume(String seVolume) {
    this.seVolume = seVolume;
    return this;
  }

   /**
   * Host volume to be used as a disk for Avi SE, This is a disruptive change.
   * @return seVolume
  **/
  @Schema(description = "Host volume to be used as a disk for Avi SE, This is a disruptive change.")
  public String getSeVolume() {
    return seVolume;
  }

  public void setSeVolume(String seVolume) {
    this.seVolume = seVolume;
  }

  public OShiftK8SConfiguration secureEgressMode(Boolean secureEgressMode) {
    this.secureEgressMode = secureEgressMode;
    return this;
  }

   /**
   * Allow Avi Vantage to create SecurityContextConstraints and ServiceAccounts which allow Egress Pods to run in privileged mode in an Openshift environment. Enabling this would exclude egress services from &#x27;disable_auto_backend_service_sync&#x27; (if set) behaviour. Note  Access credentials must have cluster-admin role privileges. Field introduced in 17.1.1.
   * @return secureEgressMode
  **/
  @Schema(description = "Allow Avi Vantage to create SecurityContextConstraints and ServiceAccounts which allow Egress Pods to run in privileged mode in an Openshift environment. Enabling this would exclude egress services from 'disable_auto_backend_service_sync' (if set) behaviour. Note  Access credentials must have cluster-admin role privileges. Field introduced in 17.1.1.")
  public Boolean isSecureEgressMode() {
    return secureEgressMode;
  }

  public void setSecureEgressMode(Boolean secureEgressMode) {
    this.secureEgressMode = secureEgressMode;
  }

  public OShiftK8SConfiguration serviceAccountToken(String serviceAccountToken) {
    this.serviceAccountToken = serviceAccountToken;
    return this;
  }

   /**
   * Authorization token for service account instead of client certificate. One of client certificate or token is required.
   * @return serviceAccountToken
  **/
  @Schema(description = "Authorization token for service account instead of client certificate. One of client certificate or token is required.")
  public String getServiceAccountToken() {
    return serviceAccountToken;
  }

  public void setServiceAccountToken(String serviceAccountToken) {
    this.serviceAccountToken = serviceAccountToken;
  }

  public OShiftK8SConfiguration servicePortMatchHttpService(Boolean servicePortMatchHttpService) {
    this.servicePortMatchHttpService = servicePortMatchHttpService;
    return this;
  }

   /**
   * Perform service port matching to create a HTTP Virtualservice instead of a TCP/UDP VirtualService. Field deprecated in 17.2.11,18.1.2.
   * @return servicePortMatchHttpService
  **/
  @Schema(description = "Perform service port matching to create a HTTP Virtualservice instead of a TCP/UDP VirtualService. Field deprecated in 17.2.11,18.1.2.")
  public Boolean isServicePortMatchHttpService() {
    return servicePortMatchHttpService;
  }

  public void setServicePortMatchHttpService(Boolean servicePortMatchHttpService) {
    this.servicePortMatchHttpService = servicePortMatchHttpService;
  }

  public OShiftK8SConfiguration shardPrefix(String shardPrefix) {
    this.shardPrefix = shardPrefix;
    return this;
  }

   /**
   * Prefix to be used for Shard VS name when num_shards knob is non zero. Format for Shard VS name will be &lt;shard_prefix&gt;-&lt;idx&gt;-CloudName-SEGroupName. Field introduced in 18.2.5.
   * @return shardPrefix
  **/
  @Schema(description = "Prefix to be used for Shard VS name when num_shards knob is non zero. Format for Shard VS name will be <shard_prefix>-<idx>-CloudName-SEGroupName. Field introduced in 18.2.5.")
  public String getShardPrefix() {
    return shardPrefix;
  }

  public void setShardPrefix(String shardPrefix) {
    this.shardPrefix = shardPrefix;
  }

  public OShiftK8SConfiguration sharedVirtualserviceNamespace(Boolean sharedVirtualserviceNamespace) {
    this.sharedVirtualserviceNamespace = sharedVirtualserviceNamespace;
    return this;
  }

   /**
   * Projects/Namespaces use a shared virtualservice for http/https Routes and Ingress objects unless overriden by the avi_virtualservice  dedicated|shared annotation. Field introduced in 17.1.9,17.2.3.
   * @return sharedVirtualserviceNamespace
  **/
  @Schema(description = "Projects/Namespaces use a shared virtualservice for http/https Routes and Ingress objects unless overriden by the avi_virtualservice  dedicated|shared annotation. Field introduced in 17.1.9,17.2.3.")
  public Boolean isSharedVirtualserviceNamespace() {
    return sharedVirtualserviceNamespace;
  }

  public void setSharedVirtualserviceNamespace(Boolean sharedVirtualserviceNamespace) {
    this.sharedVirtualserviceNamespace = sharedVirtualserviceNamespace;
  }

  public OShiftK8SConfiguration sshSeDeployment(SSHSeDeployment sshSeDeployment) {
    this.sshSeDeployment = sshSeDeployment;
    return this;
  }

   /**
   * Get sshSeDeployment
   * @return sshSeDeployment
  **/
  @Schema(description = "")
  public SSHSeDeployment getSshSeDeployment() {
    return sshSeDeployment;
  }

  public void setSshSeDeployment(SSHSeDeployment sshSeDeployment) {
    this.sshSeDeployment = sshSeDeployment;
  }

  public OShiftK8SConfiguration sshUserRef(String sshUserRef) {
    this.sshUserRef = sshUserRef;
    return this;
  }

   /**
   * Cloud connector user uuid for SSH to hosts. It is a reference to an object of type CloudConnectorUser. Field introduced in 17.1.1.
   * @return sshUserRef
  **/
  @Schema(description = "Cloud connector user uuid for SSH to hosts. It is a reference to an object of type CloudConnectorUser. Field introduced in 17.1.1.")
  public String getSshUserRef() {
    return sshUserRef;
  }

  public void setSshUserRef(String sshUserRef) {
    this.sshUserRef = sshUserRef;
  }

  public OShiftK8SConfiguration syncNotReadyAddresses(Boolean syncNotReadyAddresses) {
    this.syncNotReadyAddresses = syncNotReadyAddresses;
    return this;
  }

   /**
   * Allow the not_ready_addresses in the kubernetes endpoint object to be added as servers in the AVI pool object. Field introduced in 18.2.5.
   * @return syncNotReadyAddresses
  **/
  @Schema(description = "Allow the not_ready_addresses in the kubernetes endpoint object to be added as servers in the AVI pool object. Field introduced in 18.2.5.")
  public Boolean isSyncNotReadyAddresses() {
    return syncNotReadyAddresses;
  }

  public void setSyncNotReadyAddresses(Boolean syncNotReadyAddresses) {
    this.syncNotReadyAddresses = syncNotReadyAddresses;
  }

  public OShiftK8SConfiguration useControllerImage(Boolean useControllerImage) {
    this.useControllerImage = useControllerImage;
    return this;
  }

   /**
   * If true, use controller generated SE docker image via fileservice, else use docker repository image as defined by docker_registry_se.
   * @return useControllerImage
  **/
  @Schema(description = "If true, use controller generated SE docker image via fileservice, else use docker repository image as defined by docker_registry_se.")
  public Boolean isUseControllerImage() {
    return useControllerImage;
  }

  public void setUseControllerImage(Boolean useControllerImage) {
    this.useControllerImage = useControllerImage;
  }

  public OShiftK8SConfiguration useResourceDefinitionAsSsot(Boolean useResourceDefinitionAsSsot) {
    this.useResourceDefinitionAsSsot = useResourceDefinitionAsSsot;
    return this;
  }

   /**
   * Use OpenShift/Kubernetes resource definition and annotations as single-source-of-truth. Any changes made in Avi Controller via UI or CLI will be overridden by values provided in annotations. Field introduced in 17.2.13, 18.1.4, 18.2.1.
   * @return useResourceDefinitionAsSsot
  **/
  @Schema(description = "Use OpenShift/Kubernetes resource definition and annotations as single-source-of-truth. Any changes made in Avi Controller via UI or CLI will be overridden by values provided in annotations. Field introduced in 17.2.13, 18.1.4, 18.2.1.")
  public Boolean isUseResourceDefinitionAsSsot() {
    return useResourceDefinitionAsSsot;
  }

  public void setUseResourceDefinitionAsSsot(Boolean useResourceDefinitionAsSsot) {
    this.useResourceDefinitionAsSsot = useResourceDefinitionAsSsot;
  }

  public OShiftK8SConfiguration useSchedulingDisabledNodes(Boolean useSchedulingDisabledNodes) {
    this.useSchedulingDisabledNodes = useSchedulingDisabledNodes;
    return this;
  }

   /**
   * Enable VirtualService placement on Service Engines on nodes with scheduling disabled. When false, Service Engines are disabled on nodes where scheduling is disabled.
   * @return useSchedulingDisabledNodes
  **/
  @Schema(description = "Enable VirtualService placement on Service Engines on nodes with scheduling disabled. When false, Service Engines are disabled on nodes where scheduling is disabled.")
  public Boolean isUseSchedulingDisabledNodes() {
    return useSchedulingDisabledNodes;
  }

  public void setUseSchedulingDisabledNodes(Boolean useSchedulingDisabledNodes) {
    this.useSchedulingDisabledNodes = useSchedulingDisabledNodes;
  }

  public OShiftK8SConfiguration useServiceClusterIpAsEwVip(Boolean useServiceClusterIpAsEwVip) {
    this.useServiceClusterIpAsEwVip = useServiceClusterIpAsEwVip;
    return this;
  }

   /**
   * Use Cluster IP of service as VIP for East-West services; This option requires that kube proxy is disabled on all nodes.
   * @return useServiceClusterIpAsEwVip
  **/
  @Schema(description = "Use Cluster IP of service as VIP for East-West services; This option requires that kube proxy is disabled on all nodes.")
  public Boolean isUseServiceClusterIpAsEwVip() {
    return useServiceClusterIpAsEwVip;
  }

  public void setUseServiceClusterIpAsEwVip(Boolean useServiceClusterIpAsEwVip) {
    this.useServiceClusterIpAsEwVip = useServiceClusterIpAsEwVip;
  }

  public OShiftK8SConfiguration vipDefaultGateway(IpAddr vipDefaultGateway) {
    this.vipDefaultGateway = vipDefaultGateway;
    return this;
  }

   /**
   * Get vipDefaultGateway
   * @return vipDefaultGateway
  **/
  @Schema(description = "")
  public IpAddr getVipDefaultGateway() {
    return vipDefaultGateway;
  }

  public void setVipDefaultGateway(IpAddr vipDefaultGateway) {
    this.vipDefaultGateway = vipDefaultGateway;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OShiftK8SConfiguration oshiftK8SConfiguration = (OShiftK8SConfiguration) o;
    return Objects.equals(this.appSyncFrequency, oshiftK8SConfiguration.appSyncFrequency) &&
        Objects.equals(this.autoAssignFqdn, oshiftK8SConfiguration.autoAssignFqdn) &&
        Objects.equals(this.aviBridgeSubnet, oshiftK8SConfiguration.aviBridgeSubnet) &&
        Objects.equals(this.caTlsKeyAndCertificateRef, oshiftK8SConfiguration.caTlsKeyAndCertificateRef) &&
        Objects.equals(this.clientTlsKeyAndCertificateRef, oshiftK8SConfiguration.clientTlsKeyAndCertificateRef) &&
        Objects.equals(this.clusterTag, oshiftK8SConfiguration.clusterTag) &&
        Objects.equals(this.containerPortMatchHttpService, oshiftK8SConfiguration.containerPortMatchHttpService) &&
        Objects.equals(this.coredumpDirectory, oshiftK8SConfiguration.coredumpDirectory) &&
        Objects.equals(this.defaultServiceAsEastWestService, oshiftK8SConfiguration.defaultServiceAsEastWestService) &&
        Objects.equals(this.defaultSharedVirtualservice, oshiftK8SConfiguration.defaultSharedVirtualservice) &&
        Objects.equals(this.disableAutoBackendServiceSync, oshiftK8SConfiguration.disableAutoBackendServiceSync) &&
        Objects.equals(this.disableAutoFrontendServiceSync, oshiftK8SConfiguration.disableAutoFrontendServiceSync) &&
        Objects.equals(this.disableAutoGsSync, oshiftK8SConfiguration.disableAutoGsSync) &&
        Objects.equals(this.disableAutoSeCreation, oshiftK8SConfiguration.disableAutoSeCreation) &&
        Objects.equals(this.dockerEndpoint, oshiftK8SConfiguration.dockerEndpoint) &&
        Objects.equals(this.dockerRegistrySe, oshiftK8SConfiguration.dockerRegistrySe) &&
        Objects.equals(this.eastWestPlacementSubnet, oshiftK8SConfiguration.eastWestPlacementSubnet) &&
        Objects.equals(this.enableEventSubscription, oshiftK8SConfiguration.enableEventSubscription) &&
        Objects.equals(this.enableRouteIngressHardening, oshiftK8SConfiguration.enableRouteIngressHardening) &&
        Objects.equals(this.feproxyVipsEnableProxyArp, oshiftK8SConfiguration.feproxyVipsEnableProxyArp) &&
        Objects.equals(this.fleetEndpoint, oshiftK8SConfiguration.fleetEndpoint) &&
        Objects.equals(this.httpContainerPorts, oshiftK8SConfiguration.httpContainerPorts) &&
        Objects.equals(this.ingExcludeAttributes, oshiftK8SConfiguration.ingExcludeAttributes) &&
        Objects.equals(this.ingIncludeAttributes, oshiftK8SConfiguration.ingIncludeAttributes) &&
        Objects.equals(this.l4HealthMonitoring, oshiftK8SConfiguration.l4HealthMonitoring) &&
        Objects.equals(this.masterNodes, oshiftK8SConfiguration.masterNodes) &&
        Objects.equals(this.nodeAvailabilityZoneLabel, oshiftK8SConfiguration.nodeAvailabilityZoneLabel) &&
        Objects.equals(this.nsExcludeAttributes, oshiftK8SConfiguration.nsExcludeAttributes) &&
        Objects.equals(this.nsIncludeAttributes, oshiftK8SConfiguration.nsIncludeAttributes) &&
        Objects.equals(this.nuageController, oshiftK8SConfiguration.nuageController) &&
        Objects.equals(this.numShards, oshiftK8SConfiguration.numShards) &&
        Objects.equals(this.overrideServicePorts, oshiftK8SConfiguration.overrideServicePorts) &&
        Objects.equals(this.persistentVolumeClaim, oshiftK8SConfiguration.persistentVolumeClaim) &&
        Objects.equals(this.routes, oshiftK8SConfiguration.routes) &&
        Objects.equals(this.routesShareVirtualservice, oshiftK8SConfiguration.routesShareVirtualservice) &&
        Objects.equals(this.sdnOverlay, oshiftK8SConfiguration.sdnOverlay) &&
        Objects.equals(this.seDeploymentMethod, oshiftK8SConfiguration.seDeploymentMethod) &&
        Objects.equals(this.seExcludeAttributes, oshiftK8SConfiguration.seExcludeAttributes) &&
        Objects.equals(this.seImagePullSecret, oshiftK8SConfiguration.seImagePullSecret) &&
        Objects.equals(this.seIncludeAttributes, oshiftK8SConfiguration.seIncludeAttributes) &&
        Objects.equals(this.seNamespace, oshiftK8SConfiguration.seNamespace) &&
        Objects.equals(this.sePodTolerations, oshiftK8SConfiguration.sePodTolerations) &&
        Objects.equals(this.sePriorityClass, oshiftK8SConfiguration.sePriorityClass) &&
        Objects.equals(this.seRestartBatchSize, oshiftK8SConfiguration.seRestartBatchSize) &&
        Objects.equals(this.seRestartForce, oshiftK8SConfiguration.seRestartForce) &&
        Objects.equals(this.seSpawnRate, oshiftK8SConfiguration.seSpawnRate) &&
        Objects.equals(this.seVolume, oshiftK8SConfiguration.seVolume) &&
        Objects.equals(this.secureEgressMode, oshiftK8SConfiguration.secureEgressMode) &&
        Objects.equals(this.serviceAccountToken, oshiftK8SConfiguration.serviceAccountToken) &&
        Objects.equals(this.servicePortMatchHttpService, oshiftK8SConfiguration.servicePortMatchHttpService) &&
        Objects.equals(this.shardPrefix, oshiftK8SConfiguration.shardPrefix) &&
        Objects.equals(this.sharedVirtualserviceNamespace, oshiftK8SConfiguration.sharedVirtualserviceNamespace) &&
        Objects.equals(this.sshSeDeployment, oshiftK8SConfiguration.sshSeDeployment) &&
        Objects.equals(this.sshUserRef, oshiftK8SConfiguration.sshUserRef) &&
        Objects.equals(this.syncNotReadyAddresses, oshiftK8SConfiguration.syncNotReadyAddresses) &&
        Objects.equals(this.useControllerImage, oshiftK8SConfiguration.useControllerImage) &&
        Objects.equals(this.useResourceDefinitionAsSsot, oshiftK8SConfiguration.useResourceDefinitionAsSsot) &&
        Objects.equals(this.useSchedulingDisabledNodes, oshiftK8SConfiguration.useSchedulingDisabledNodes) &&
        Objects.equals(this.useServiceClusterIpAsEwVip, oshiftK8SConfiguration.useServiceClusterIpAsEwVip) &&
        Objects.equals(this.vipDefaultGateway, oshiftK8SConfiguration.vipDefaultGateway);
  }

  @Override
  public int hashCode() {
    return Objects.hash(appSyncFrequency, autoAssignFqdn, aviBridgeSubnet, caTlsKeyAndCertificateRef, clientTlsKeyAndCertificateRef, clusterTag, containerPortMatchHttpService, coredumpDirectory, defaultServiceAsEastWestService, defaultSharedVirtualservice, disableAutoBackendServiceSync, disableAutoFrontendServiceSync, disableAutoGsSync, disableAutoSeCreation, dockerEndpoint, dockerRegistrySe, eastWestPlacementSubnet, enableEventSubscription, enableRouteIngressHardening, feproxyVipsEnableProxyArp, fleetEndpoint, httpContainerPorts, ingExcludeAttributes, ingIncludeAttributes, l4HealthMonitoring, masterNodes, nodeAvailabilityZoneLabel, nsExcludeAttributes, nsIncludeAttributes, nuageController, numShards, overrideServicePorts, persistentVolumeClaim, routes, routesShareVirtualservice, sdnOverlay, seDeploymentMethod, seExcludeAttributes, seImagePullSecret, seIncludeAttributes, seNamespace, sePodTolerations, sePriorityClass, seRestartBatchSize, seRestartForce, seSpawnRate, seVolume, secureEgressMode, serviceAccountToken, servicePortMatchHttpService, shardPrefix, sharedVirtualserviceNamespace, sshSeDeployment, sshUserRef, syncNotReadyAddresses, useControllerImage, useResourceDefinitionAsSsot, useSchedulingDisabledNodes, useServiceClusterIpAsEwVip, vipDefaultGateway);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OShiftK8SConfiguration {\n");
    
    sb.append("    appSyncFrequency: ").append(toIndentedString(appSyncFrequency)).append("\n");
    sb.append("    autoAssignFqdn: ").append(toIndentedString(autoAssignFqdn)).append("\n");
    sb.append("    aviBridgeSubnet: ").append(toIndentedString(aviBridgeSubnet)).append("\n");
    sb.append("    caTlsKeyAndCertificateRef: ").append(toIndentedString(caTlsKeyAndCertificateRef)).append("\n");
    sb.append("    clientTlsKeyAndCertificateRef: ").append(toIndentedString(clientTlsKeyAndCertificateRef)).append("\n");
    sb.append("    clusterTag: ").append(toIndentedString(clusterTag)).append("\n");
    sb.append("    containerPortMatchHttpService: ").append(toIndentedString(containerPortMatchHttpService)).append("\n");
    sb.append("    coredumpDirectory: ").append(toIndentedString(coredumpDirectory)).append("\n");
    sb.append("    defaultServiceAsEastWestService: ").append(toIndentedString(defaultServiceAsEastWestService)).append("\n");
    sb.append("    defaultSharedVirtualservice: ").append(toIndentedString(defaultSharedVirtualservice)).append("\n");
    sb.append("    disableAutoBackendServiceSync: ").append(toIndentedString(disableAutoBackendServiceSync)).append("\n");
    sb.append("    disableAutoFrontendServiceSync: ").append(toIndentedString(disableAutoFrontendServiceSync)).append("\n");
    sb.append("    disableAutoGsSync: ").append(toIndentedString(disableAutoGsSync)).append("\n");
    sb.append("    disableAutoSeCreation: ").append(toIndentedString(disableAutoSeCreation)).append("\n");
    sb.append("    dockerEndpoint: ").append(toIndentedString(dockerEndpoint)).append("\n");
    sb.append("    dockerRegistrySe: ").append(toIndentedString(dockerRegistrySe)).append("\n");
    sb.append("    eastWestPlacementSubnet: ").append(toIndentedString(eastWestPlacementSubnet)).append("\n");
    sb.append("    enableEventSubscription: ").append(toIndentedString(enableEventSubscription)).append("\n");
    sb.append("    enableRouteIngressHardening: ").append(toIndentedString(enableRouteIngressHardening)).append("\n");
    sb.append("    feproxyVipsEnableProxyArp: ").append(toIndentedString(feproxyVipsEnableProxyArp)).append("\n");
    sb.append("    fleetEndpoint: ").append(toIndentedString(fleetEndpoint)).append("\n");
    sb.append("    httpContainerPorts: ").append(toIndentedString(httpContainerPorts)).append("\n");
    sb.append("    ingExcludeAttributes: ").append(toIndentedString(ingExcludeAttributes)).append("\n");
    sb.append("    ingIncludeAttributes: ").append(toIndentedString(ingIncludeAttributes)).append("\n");
    sb.append("    l4HealthMonitoring: ").append(toIndentedString(l4HealthMonitoring)).append("\n");
    sb.append("    masterNodes: ").append(toIndentedString(masterNodes)).append("\n");
    sb.append("    nodeAvailabilityZoneLabel: ").append(toIndentedString(nodeAvailabilityZoneLabel)).append("\n");
    sb.append("    nsExcludeAttributes: ").append(toIndentedString(nsExcludeAttributes)).append("\n");
    sb.append("    nsIncludeAttributes: ").append(toIndentedString(nsIncludeAttributes)).append("\n");
    sb.append("    nuageController: ").append(toIndentedString(nuageController)).append("\n");
    sb.append("    numShards: ").append(toIndentedString(numShards)).append("\n");
    sb.append("    overrideServicePorts: ").append(toIndentedString(overrideServicePorts)).append("\n");
    sb.append("    persistentVolumeClaim: ").append(toIndentedString(persistentVolumeClaim)).append("\n");
    sb.append("    routes: ").append(toIndentedString(routes)).append("\n");
    sb.append("    routesShareVirtualservice: ").append(toIndentedString(routesShareVirtualservice)).append("\n");
    sb.append("    sdnOverlay: ").append(toIndentedString(sdnOverlay)).append("\n");
    sb.append("    seDeploymentMethod: ").append(toIndentedString(seDeploymentMethod)).append("\n");
    sb.append("    seExcludeAttributes: ").append(toIndentedString(seExcludeAttributes)).append("\n");
    sb.append("    seImagePullSecret: ").append(toIndentedString(seImagePullSecret)).append("\n");
    sb.append("    seIncludeAttributes: ").append(toIndentedString(seIncludeAttributes)).append("\n");
    sb.append("    seNamespace: ").append(toIndentedString(seNamespace)).append("\n");
    sb.append("    sePodTolerations: ").append(toIndentedString(sePodTolerations)).append("\n");
    sb.append("    sePriorityClass: ").append(toIndentedString(sePriorityClass)).append("\n");
    sb.append("    seRestartBatchSize: ").append(toIndentedString(seRestartBatchSize)).append("\n");
    sb.append("    seRestartForce: ").append(toIndentedString(seRestartForce)).append("\n");
    sb.append("    seSpawnRate: ").append(toIndentedString(seSpawnRate)).append("\n");
    sb.append("    seVolume: ").append(toIndentedString(seVolume)).append("\n");
    sb.append("    secureEgressMode: ").append(toIndentedString(secureEgressMode)).append("\n");
    sb.append("    serviceAccountToken: ").append(toIndentedString(serviceAccountToken)).append("\n");
    sb.append("    servicePortMatchHttpService: ").append(toIndentedString(servicePortMatchHttpService)).append("\n");
    sb.append("    shardPrefix: ").append(toIndentedString(shardPrefix)).append("\n");
    sb.append("    sharedVirtualserviceNamespace: ").append(toIndentedString(sharedVirtualserviceNamespace)).append("\n");
    sb.append("    sshSeDeployment: ").append(toIndentedString(sshSeDeployment)).append("\n");
    sb.append("    sshUserRef: ").append(toIndentedString(sshUserRef)).append("\n");
    sb.append("    syncNotReadyAddresses: ").append(toIndentedString(syncNotReadyAddresses)).append("\n");
    sb.append("    useControllerImage: ").append(toIndentedString(useControllerImage)).append("\n");
    sb.append("    useResourceDefinitionAsSsot: ").append(toIndentedString(useResourceDefinitionAsSsot)).append("\n");
    sb.append("    useSchedulingDisabledNodes: ").append(toIndentedString(useSchedulingDisabledNodes)).append("\n");
    sb.append("    useServiceClusterIpAsEwVip: ").append(toIndentedString(useServiceClusterIpAsEwVip)).append("\n");
    sb.append("    vipDefaultGateway: ").append(toIndentedString(vipDefaultGateway)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
