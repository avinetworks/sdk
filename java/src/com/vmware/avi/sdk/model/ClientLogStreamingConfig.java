/*
 * Avi avi_global_spec Object API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 20.1.1
 * Contact: support@avinetworks.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.vmware.avi.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.vmware.avi.sdk.model.ClientLogStreamingFormat;
import com.vmware.avi.sdk.model.StreamingSyslogConfig;
import io.swagger.v3.oas.annotations.media.Schema;
/**
 * ClientLogStreamingConfig
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-03-12T12:27:26.755+05:30[Asia/Kolkata]")
public class ClientLogStreamingConfig {
  @JsonProperty("external_server")
  private String externalServer = null;

  @JsonProperty("external_server_port")
  private Integer externalServerPort = 514;

  @JsonProperty("format_config")
  private ClientLogStreamingFormat formatConfig = null;

  @JsonProperty("log_types_to_send")
  private String logTypesToSend = "LOGS_ALL";

  @JsonProperty("max_logs_per_second")
  private Integer maxLogsPerSecond = 100;

  @JsonProperty("protocol")
  private String protocol = "LOG_STREAMING_PROTOCOL_UDP";

  @JsonProperty("syslog_config")
  private StreamingSyslogConfig syslogConfig = null;

  public ClientLogStreamingConfig externalServer(String externalServer) {
    this.externalServer = externalServer;
    return this;
  }

   /**
   * IP address or hostnames (FQDNs) of destination servers. If an FQDN is provided, this should be resolvable on Avi Service Engines. Multiple servers are supported by furnishing a comma-separated list of IP addresses or host names, for example, 11.11.11.11,23.12.12.4. Optionally, a separate port can be specified for each external server in the list, for example, 11.11.11.11 234,12.12.12.12 343. Field introduced in 17.1.1.
   * @return externalServer
  **/
  @Schema(required = true, description = "IP address or hostnames (FQDNs) of destination servers. If an FQDN is provided, this should be resolvable on Avi Service Engines. Multiple servers are supported by furnishing a comma-separated list of IP addresses or host names, for example, 11.11.11.11,23.12.12.4. Optionally, a separate port can be specified for each external server in the list, for example, 11.11.11.11 234,12.12.12.12 343. Field introduced in 17.1.1.")
  public String getExternalServer() {
    return externalServer;
  }

  public void setExternalServer(String externalServer) {
    this.externalServer = externalServer;
  }

  public ClientLogStreamingConfig externalServerPort(Integer externalServerPort) {
    this.externalServerPort = externalServerPort;
    return this;
  }

   /**
   * The service port to use for the external servers. If multiple external servers have been specified, the single port number specified here will apply to all those servers for which an explicit port number has not been specified in the external server list. Field introduced in 17.1.1.
   * @return externalServerPort
  **/
  @Schema(description = "The service port to use for the external servers. If multiple external servers have been specified, the single port number specified here will apply to all those servers for which an explicit port number has not been specified in the external server list. Field introduced in 17.1.1.")
  public Integer getExternalServerPort() {
    return externalServerPort;
  }

  public void setExternalServerPort(Integer externalServerPort) {
    this.externalServerPort = externalServerPort;
  }

  public ClientLogStreamingConfig formatConfig(ClientLogStreamingFormat formatConfig) {
    this.formatConfig = formatConfig;
    return this;
  }

   /**
   * Get formatConfig
   * @return formatConfig
  **/
  @Schema(description = "")
  public ClientLogStreamingFormat getFormatConfig() {
    return formatConfig;
  }

  public void setFormatConfig(ClientLogStreamingFormat formatConfig) {
    this.formatConfig = formatConfig;
  }

  public ClientLogStreamingConfig logTypesToSend(String logTypesToSend) {
    this.logTypesToSend = logTypesToSend;
    return this;
  }

   /**
   * Type of logs to stream to the external server. Default is LOGS_ALL, i.e., send all logs. Enum options - LOGS_SIGNIFICANT_ONLY, LOGS_UDF_ONLY, LOGS_UDF_SIGNIFICANT, LOGS_ALL. Field introduced in 17.1.1.
   * @return logTypesToSend
  **/
  @Schema(description = "Type of logs to stream to the external server. Default is LOGS_ALL, i.e., send all logs. Enum options - LOGS_SIGNIFICANT_ONLY, LOGS_UDF_ONLY, LOGS_UDF_SIGNIFICANT, LOGS_ALL. Field introduced in 17.1.1.")
  public String getLogTypesToSend() {
    return logTypesToSend;
  }

  public void setLogTypesToSend(String logTypesToSend) {
    this.logTypesToSend = logTypesToSend;
  }

  public ClientLogStreamingConfig maxLogsPerSecond(Integer maxLogsPerSecond) {
    this.maxLogsPerSecond = maxLogsPerSecond;
    return this;
  }

   /**
   * Maximum number of logs per second streamed to the remote server. By default, 100 logs per second are streamed. Set this to zero(0) to not enforce any limit. Field introduced in 17.1.1.
   * @return maxLogsPerSecond
  **/
  @Schema(description = "Maximum number of logs per second streamed to the remote server. By default, 100 logs per second are streamed. Set this to zero(0) to not enforce any limit. Field introduced in 17.1.1.")
  public Integer getMaxLogsPerSecond() {
    return maxLogsPerSecond;
  }

  public void setMaxLogsPerSecond(Integer maxLogsPerSecond) {
    this.maxLogsPerSecond = maxLogsPerSecond;
  }

  public ClientLogStreamingConfig protocol(String protocol) {
    this.protocol = protocol;
    return this;
  }

   /**
   * Protocol to use for streaming logs. Enum options - LOG_STREAMING_PROTOCOL_UDP, LOG_STREAMING_PROTOCOL_SYSLOG_OVER_UDP, LOG_STREAMING_PROTOCOL_TCP, LOG_STREAMING_PROTOCOL_SYSLOG_OVER_TCP, LOG_STREAMING_PROTOCOL_RAW_OVER_UDP. Field introduced in 18.1.1.
   * @return protocol
  **/
  @Schema(description = "Protocol to use for streaming logs. Enum options - LOG_STREAMING_PROTOCOL_UDP, LOG_STREAMING_PROTOCOL_SYSLOG_OVER_UDP, LOG_STREAMING_PROTOCOL_TCP, LOG_STREAMING_PROTOCOL_SYSLOG_OVER_TCP, LOG_STREAMING_PROTOCOL_RAW_OVER_UDP. Field introduced in 18.1.1.")
  public String getProtocol() {
    return protocol;
  }

  public void setProtocol(String protocol) {
    this.protocol = protocol;
  }

  public ClientLogStreamingConfig syslogConfig(StreamingSyslogConfig syslogConfig) {
    this.syslogConfig = syslogConfig;
    return this;
  }

   /**
   * Get syslogConfig
   * @return syslogConfig
  **/
  @Schema(description = "")
  public StreamingSyslogConfig getSyslogConfig() {
    return syslogConfig;
  }

  public void setSyslogConfig(StreamingSyslogConfig syslogConfig) {
    this.syslogConfig = syslogConfig;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ClientLogStreamingConfig clientLogStreamingConfig = (ClientLogStreamingConfig) o;
    return Objects.equals(this.externalServer, clientLogStreamingConfig.externalServer) &&
        Objects.equals(this.externalServerPort, clientLogStreamingConfig.externalServerPort) &&
        Objects.equals(this.formatConfig, clientLogStreamingConfig.formatConfig) &&
        Objects.equals(this.logTypesToSend, clientLogStreamingConfig.logTypesToSend) &&
        Objects.equals(this.maxLogsPerSecond, clientLogStreamingConfig.maxLogsPerSecond) &&
        Objects.equals(this.protocol, clientLogStreamingConfig.protocol) &&
        Objects.equals(this.syslogConfig, clientLogStreamingConfig.syslogConfig);
  }

  @Override
  public int hashCode() {
    return Objects.hash(externalServer, externalServerPort, formatConfig, logTypesToSend, maxLogsPerSecond, protocol, syslogConfig);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ClientLogStreamingConfig {\n");
    
    sb.append("    externalServer: ").append(toIndentedString(externalServer)).append("\n");
    sb.append("    externalServerPort: ").append(toIndentedString(externalServerPort)).append("\n");
    sb.append("    formatConfig: ").append(toIndentedString(formatConfig)).append("\n");
    sb.append("    logTypesToSend: ").append(toIndentedString(logTypesToSend)).append("\n");
    sb.append("    maxLogsPerSecond: ").append(toIndentedString(maxLogsPerSecond)).append("\n");
    sb.append("    protocol: ").append(toIndentedString(protocol)).append("\n");
    sb.append("    syslogConfig: ").append(toIndentedString(syslogConfig)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
