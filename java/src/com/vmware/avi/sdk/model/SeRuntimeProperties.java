/*
 * Avi avi_global_spec Object API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 20.1.1
 * Contact: support@avinetworks.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.vmware.avi.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.vmware.avi.sdk.model.AppHdr;
import com.vmware.avi.sdk.model.DosThresholdProfile;
import com.vmware.avi.sdk.model.IpAddrPrefix;
import com.vmware.avi.sdk.model.PortRange;
import com.vmware.avi.sdk.model.SeRateLimiters;
import com.vmware.avi.sdk.model.SeRuntimeCompressionProperties;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;
/**
 * SeRuntimeProperties
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-03-12T12:27:26.755+05:30[Asia/Kolkata]")
public class SeRuntimeProperties {
  @JsonProperty("admin_ssh_enabled")
  private Boolean adminSshEnabled = true;

  @JsonProperty("app_headers")
  private List<AppHdr> appHeaders = null;

  @JsonProperty("baremetal_dispatcher_handles_flows")
  private Boolean baremetalDispatcherHandlesFlows = null;

  @JsonProperty("connections_lossy_log_rate_limiter_threshold")
  private Integer connectionsLossyLogRateLimiterThreshold = 1000;

  @JsonProperty("connections_udfnf_log_rate_limiter_threshold")
  private Integer connectionsUdfnfLogRateLimiterThreshold = 1000;

  @JsonProperty("disable_flow_probes")
  private Boolean disableFlowProbes = null;

  @JsonProperty("disable_gro")
  private Boolean disableGro = null;

  @JsonProperty("disable_tso")
  private Boolean disableTso = null;

  @JsonProperty("dos_profile")
  private DosThresholdProfile dosProfile = null;

  @JsonProperty("downstream_send_timeout")
  private Integer downstreamSendTimeout = 3600000;

  @JsonProperty("dp_aggressive_hb_frequency")
  private Integer dpAggressiveHbFrequency = 100;

  @JsonProperty("dp_aggressive_hb_timeout_count")
  private Integer dpAggressiveHbTimeoutCount = 10;

  @JsonProperty("dp_hb_frequency")
  private Integer dpHbFrequency = 100;

  @JsonProperty("dp_hb_timeout_count")
  private Integer dpHbTimeoutCount = 10;

  @JsonProperty("dupip_frequency")
  private Integer dupipFrequency = null;

  @JsonProperty("dupip_timeout_count")
  private Integer dupipTimeoutCount = 5;

  @JsonProperty("enable_hsm_log")
  private Boolean enableHsmLog = null;

  @JsonProperty("feproxy_vips_enable_proxy_arp")
  private Boolean feproxyVipsEnableProxyArp = true;

  @JsonProperty("flow_table_batch_push_frequency")
  private Integer flowTableBatchPushFrequency = 5;

  @JsonProperty("flow_table_max_entries_deprecated")
  private Integer flowTableMaxEntriesDeprecated = 100000000;

  @JsonProperty("flow_table_new_syn_max_entries")
  private Integer flowTableNewSynMaxEntries = 40000;

  @JsonProperty("global_mtu")
  private Integer globalMtu = null;

  @JsonProperty("http_rum_console_log")
  private Boolean httpRumConsoleLog = null;

  @JsonProperty("http_rum_min_content_length")
  private Integer httpRumMinContentLength = 64;

  @JsonProperty("lb_batch_push_frequency")
  private Integer lbBatchPushFrequency = 5;

  @JsonProperty("lb_fail_max_time")
  private Integer lbFailMaxTime = 5;

  @JsonProperty("lbaction_num_requests_to_dispatch")
  private Integer lbactionNumRequestsToDispatch = 4;

  @JsonProperty("lbaction_rq_per_request_max_retries")
  private Integer lbactionRqPerRequestMaxRetries = 22;

  @JsonProperty("log_agent_compress_logs")
  private Boolean logAgentCompressLogs = true;

  @JsonProperty("log_agent_conn_send_buffer_size")
  private Integer logAgentConnSendBufferSize = 16384;

  @JsonProperty("log_agent_export_msg_buffer_size")
  private Integer logAgentExportMsgBufferSize = 524288;

  @JsonProperty("log_agent_export_wait_time")
  private Integer logAgentExportWaitTime = 100;

  @JsonProperty("log_agent_file_sz_appl")
  private Integer logAgentFileSzAppl = 4;

  @JsonProperty("log_agent_file_sz_conn")
  private Integer logAgentFileSzConn = 4;

  @JsonProperty("log_agent_file_sz_debug")
  private Integer logAgentFileSzDebug = 4;

  @JsonProperty("log_agent_file_sz_event")
  private Integer logAgentFileSzEvent = 4;

  @JsonProperty("log_agent_log_storage_min_sz")
  private Integer logAgentLogStorageMinSz = 1024;

  @JsonProperty("log_agent_max_active_adf_files_per_vs")
  private Integer logAgentMaxActiveAdfFilesPerVs = 100;

  @JsonProperty("log_agent_max_concurrent_rsync")
  private Integer logAgentMaxConcurrentRsync = 1024;

  @JsonProperty("log_agent_max_logmessage_proto_sz")
  private Integer logAgentMaxLogmessageProtoSz = 65536;

  @JsonProperty("log_agent_max_storage_excess_percent")
  private Integer logAgentMaxStorageExcessPercent = 110;

  @JsonProperty("log_agent_max_storage_ignore_percent")
  private Float logAgentMaxStorageIgnorePercent = 20.0f;

  @JsonProperty("log_agent_min_storage_per_vs")
  private Integer logAgentMinStoragePerVs = 10;

  @JsonProperty("log_agent_pause_interval")
  private Integer logAgentPauseInterval = null;

  @JsonProperty("log_agent_sleep_interval")
  private Integer logAgentSleepInterval = 10;

  @JsonProperty("log_agent_unknown_vs_timer")
  private Integer logAgentUnknownVsTimer = 1800;

  @JsonProperty("log_message_max_file_list_size")
  private Integer logMessageMaxFileListSize = 64;

  @JsonProperty("max_throughput")
  private Integer maxThroughput = 10000;

  @JsonProperty("mcache_enabled")
  private Boolean mcacheEnabled = null;

  @JsonProperty("mcache_fetch_enabled")
  private Boolean mcacheFetchEnabled = null;

  @JsonProperty("mcache_max_cache_size")
  private Long mcacheMaxCacheSize = null;

  @JsonProperty("mcache_store_in_enabled")
  private Boolean mcacheStoreInEnabled = null;

  @JsonProperty("mcache_store_in_max_size")
  private Integer mcacheStoreInMaxSize = null;

  @JsonProperty("mcache_store_in_min_size")
  private Integer mcacheStoreInMinSize = null;

  @JsonProperty("mcache_store_out_enabled")
  private Boolean mcacheStoreOutEnabled = null;

  @JsonProperty("mcache_store_se_max_size")
  private Long mcacheStoreSeMaxSize = null;

  @JsonProperty("ngx_free_connection_stack")
  private Boolean ngxFreeConnectionStack = null;

  @JsonProperty("persistence_entries_low_watermark")
  private Integer persistenceEntriesLowWatermark = 20000;

  @JsonProperty("persistence_mem_max")
  private Integer persistenceMemMax = null;

  @JsonProperty("scaleout_udp_per_pkt")
  private Boolean scaleoutUdpPerPkt = true;

  @JsonProperty("se_auth_ldap_bind_timeout")
  private Integer seAuthLdapBindTimeout = 5000;

  @JsonProperty("se_auth_ldap_cache_size")
  private Integer seAuthLdapCacheSize = 100000;

  @JsonProperty("se_auth_ldap_connect_timeout")
  private Integer seAuthLdapConnectTimeout = 10000;

  @JsonProperty("se_auth_ldap_conns_per_server")
  private Integer seAuthLdapConnsPerServer = 1;

  @JsonProperty("se_auth_ldap_reconnect_timeout")
  private Integer seAuthLdapReconnectTimeout = 10000;

  @JsonProperty("se_auth_ldap_request_timeout")
  private Integer seAuthLdapRequestTimeout = 10000;

  @JsonProperty("se_auth_ldap_servers_failover_only")
  private Boolean seAuthLdapServersFailoverOnly = null;

  @JsonProperty("se_dp_compression")
  private SeRuntimeCompressionProperties seDpCompression = null;

  @JsonProperty("se_dp_hm_drops")
  private Integer seDpHmDrops = null;

  @JsonProperty("se_dp_if_state_poll_interval")
  private Integer seDpIfStatePollInterval = 10;

  @JsonProperty("se_dp_log_nf_enqueue_percent")
  private Integer seDpLogNfEnqueuePercent = 70;

  @JsonProperty("se_dp_log_udf_enqueue_percent")
  private Integer seDpLogUdfEnqueuePercent = 90;

  @JsonProperty("se_dp_vnic_queue_stall_event_sleep")
  private Integer seDpVnicQueueStallEventSleep = null;

  @JsonProperty("se_dp_vnic_queue_stall_threshold")
  private Integer seDpVnicQueueStallThreshold = null;

  @JsonProperty("se_dp_vnic_queue_stall_timeout")
  private Integer seDpVnicQueueStallTimeout = null;

  @JsonProperty("se_dp_vnic_restart_on_queue_stall_count")
  private Integer seDpVnicRestartOnQueueStallCount = null;

  @JsonProperty("se_dp_vnic_stall_se_restart_window")
  private Integer seDpVnicStallSeRestartWindow = null;

  @JsonProperty("se_dump_core_on_assert")
  private Boolean seDumpCoreOnAssert = null;

  @JsonProperty("se_handle_interface_routes")
  private Boolean seHandleInterfaceRoutes = null;

  @JsonProperty("se_hb_persist_fudge_bits")
  private Integer seHbPersistFudgeBits = 3;

  @JsonProperty("se_mac_error_threshold_to_disable_promiscious")
  private Integer seMacErrorThresholdToDisablePromiscious = 1000;

  @JsonProperty("se_malloc_thresh")
  private Integer seMallocThresh = null;

  @JsonProperty("se_memory_poison")
  private Boolean seMemoryPoison = true;

  @JsonProperty("se_metrics_interval")
  private Integer seMetricsInterval = 60000;

  @JsonProperty("se_metrics_rt_enabled")
  private Boolean seMetricsRtEnabled = true;

  @JsonProperty("se_metrics_rt_interval")
  private Integer seMetricsRtInterval = 1000;

  @JsonProperty("se_packet_buffer_max")
  private Integer sePacketBufferMax = null;

  @JsonProperty("se_random_tcp_drops")
  private Boolean seRandomTcpDrops = null;

  @JsonProperty("se_rate_limiters")
  private SeRateLimiters seRateLimiters = null;

  @JsonProperty("service_ip_subnets")
  private List<IpAddrPrefix> serviceIpSubnets = null;

  @JsonProperty("service_port_ranges")
  private List<PortRange> servicePortRanges = null;

  @JsonProperty("services_accessible_all_interfaces")
  private Boolean servicesAccessibleAllInterfaces = null;

  @JsonProperty("spdy_fwd_proxy_parse_enable")
  private Boolean spdyFwdProxyParseEnable = true;

  @JsonProperty("tcp_syn_cache_max")
  private Integer tcpSynCacheMax = 32768;

  @JsonProperty("tcp_syncache_max_retransmit_default")
  private Integer tcpSyncacheMaxRetransmitDefault = 4;

  @JsonProperty("upstream_connect_timeout")
  private Integer upstreamConnectTimeout = 3600000;

  @JsonProperty("upstream_connpool_cache_thresh")
  private Integer upstreamConnpoolCacheThresh = -1;

  @JsonProperty("upstream_connpool_conn_idle_thresh_tmo")
  private Integer upstreamConnpoolConnIdleThreshTmo = -1;

  @JsonProperty("upstream_connpool_conn_idle_tmo")
  private Integer upstreamConnpoolConnIdleTmo = null;

  @JsonProperty("upstream_connpool_conn_life_tmo")
  private Integer upstreamConnpoolConnLifeTmo = null;

  @JsonProperty("upstream_connpool_conn_max_reuse")
  private Integer upstreamConnpoolConnMaxReuse = null;

  @JsonProperty("upstream_connpool_core_max_cache")
  private Integer upstreamConnpoolCoreMaxCache = -1;

  @JsonProperty("upstream_connpool_enable")
  private Boolean upstreamConnpoolEnable = true;

  @JsonProperty("upstream_connpool_server_max_cache")
  private Integer upstreamConnpoolServerMaxCache = null;

  @JsonProperty("upstream_connpool_strategy")
  private Integer upstreamConnpoolStrategy = -1;

  @JsonProperty("upstream_keepalive")
  private Boolean upstreamKeepalive = null;

  @JsonProperty("upstream_read_timeout")
  private Integer upstreamReadTimeout = 3600000;

  @JsonProperty("upstream_send_timeout")
  private Integer upstreamSendTimeout = 3600000;

  @JsonProperty("user_defined_metric_age")
  private Integer userDefinedMetricAge = 60;

  public SeRuntimeProperties adminSshEnabled(Boolean adminSshEnabled) {
    this.adminSshEnabled = adminSshEnabled;
    return this;
  }

   /**
   * Allow admin user ssh access to SE. Field introduced in 18.2.5.
   * @return adminSshEnabled
  **/
  @Schema(description = "Allow admin user ssh access to SE. Field introduced in 18.2.5.")
  public Boolean isAdminSshEnabled() {
    return adminSshEnabled;
  }

  public void setAdminSshEnabled(Boolean adminSshEnabled) {
    this.adminSshEnabled = adminSshEnabled;
  }

  public SeRuntimeProperties appHeaders(List<AppHdr> appHeaders) {
    this.appHeaders = appHeaders;
    return this;
  }

  public SeRuntimeProperties addAppHeadersItem(AppHdr appHeadersItem) {
    if (this.appHeaders == null) {
      this.appHeaders = new ArrayList<AppHdr>();
    }
    this.appHeaders.add(appHeadersItem);
    return this;
  }

   /**
   * Placeholder for description of property app_headers of obj type SeRuntimeProperties field type str  type object
   * @return appHeaders
  **/
  @Schema(description = "Placeholder for description of property app_headers of obj type SeRuntimeProperties field type str  type object")
  public List<AppHdr> getAppHeaders() {
    return appHeaders;
  }

  public void setAppHeaders(List<AppHdr> appHeaders) {
    this.appHeaders = appHeaders;
  }

  public SeRuntimeProperties baremetalDispatcherHandlesFlows(Boolean baremetalDispatcherHandlesFlows) {
    this.baremetalDispatcherHandlesFlows = baremetalDispatcherHandlesFlows;
    return this;
  }

   /**
   * Control if dispatcher core also handles TCP flows in baremetal SE.
   * @return baremetalDispatcherHandlesFlows
  **/
  @Schema(description = "Control if dispatcher core also handles TCP flows in baremetal SE.")
  public Boolean isBaremetalDispatcherHandlesFlows() {
    return baremetalDispatcherHandlesFlows;
  }

  public void setBaremetalDispatcherHandlesFlows(Boolean baremetalDispatcherHandlesFlows) {
    this.baremetalDispatcherHandlesFlows = baremetalDispatcherHandlesFlows;
  }

  public SeRuntimeProperties connectionsLossyLogRateLimiterThreshold(Integer connectionsLossyLogRateLimiterThreshold) {
    this.connectionsLossyLogRateLimiterThreshold = connectionsLossyLogRateLimiterThreshold;
    return this;
  }

   /**
   * Rate limit on maximum adf lossy log to pushper second.
   * @return connectionsLossyLogRateLimiterThreshold
  **/
  @Schema(description = "Rate limit on maximum adf lossy log to pushper second.")
  public Integer getConnectionsLossyLogRateLimiterThreshold() {
    return connectionsLossyLogRateLimiterThreshold;
  }

  public void setConnectionsLossyLogRateLimiterThreshold(Integer connectionsLossyLogRateLimiterThreshold) {
    this.connectionsLossyLogRateLimiterThreshold = connectionsLossyLogRateLimiterThreshold;
  }

  public SeRuntimeProperties connectionsUdfnfLogRateLimiterThreshold(Integer connectionsUdfnfLogRateLimiterThreshold) {
    this.connectionsUdfnfLogRateLimiterThreshold = connectionsUdfnfLogRateLimiterThreshold;
    return this;
  }

   /**
   * Rate limit on maximum adf udf or nf log to pushper second.
   * @return connectionsUdfnfLogRateLimiterThreshold
  **/
  @Schema(description = "Rate limit on maximum adf udf or nf log to pushper second.")
  public Integer getConnectionsUdfnfLogRateLimiterThreshold() {
    return connectionsUdfnfLogRateLimiterThreshold;
  }

  public void setConnectionsUdfnfLogRateLimiterThreshold(Integer connectionsUdfnfLogRateLimiterThreshold) {
    this.connectionsUdfnfLogRateLimiterThreshold = connectionsUdfnfLogRateLimiterThreshold;
  }

  public SeRuntimeProperties disableFlowProbes(Boolean disableFlowProbes) {
    this.disableFlowProbes = disableFlowProbes;
    return this;
  }

   /**
   * Disable Flow Probes for Scaled out VS&#x27;es. Field introduced in 17.1.1.
   * @return disableFlowProbes
  **/
  @Schema(description = "Disable Flow Probes for Scaled out VS'es. Field introduced in 17.1.1.")
  public Boolean isDisableFlowProbes() {
    return disableFlowProbes;
  }

  public void setDisableFlowProbes(Boolean disableFlowProbes) {
    this.disableFlowProbes = disableFlowProbes;
  }

  public SeRuntimeProperties disableGro(Boolean disableGro) {
    this.disableGro = disableGro;
    return this;
  }

   /**
   * Deprecated. Field deprecated in 17.2.5. Field introduced in 17.2.1.
   * @return disableGro
  **/
  @Schema(description = "Deprecated. Field deprecated in 17.2.5. Field introduced in 17.2.1.")
  public Boolean isDisableGro() {
    return disableGro;
  }

  public void setDisableGro(Boolean disableGro) {
    this.disableGro = disableGro;
  }

  public SeRuntimeProperties disableTso(Boolean disableTso) {
    this.disableTso = disableTso;
    return this;
  }

   /**
   * Deprecated. Field deprecated in 17.2.5. Field introduced in 17.2.4.
   * @return disableTso
  **/
  @Schema(description = "Deprecated. Field deprecated in 17.2.5. Field introduced in 17.2.4.")
  public Boolean isDisableTso() {
    return disableTso;
  }

  public void setDisableTso(Boolean disableTso) {
    this.disableTso = disableTso;
  }

  public SeRuntimeProperties dosProfile(DosThresholdProfile dosProfile) {
    this.dosProfile = dosProfile;
    return this;
  }

   /**
   * Get dosProfile
   * @return dosProfile
  **/
  @Schema(description = "")
  public DosThresholdProfile getDosProfile() {
    return dosProfile;
  }

  public void setDosProfile(DosThresholdProfile dosProfile) {
    this.dosProfile = dosProfile;
  }

  public SeRuntimeProperties downstreamSendTimeout(Integer downstreamSendTimeout) {
    this.downstreamSendTimeout = downstreamSendTimeout;
    return this;
  }

   /**
   * Timeout for downstream to become writable.
   * @return downstreamSendTimeout
  **/
  @Schema(description = "Timeout for downstream to become writable.")
  public Integer getDownstreamSendTimeout() {
    return downstreamSendTimeout;
  }

  public void setDownstreamSendTimeout(Integer downstreamSendTimeout) {
    this.downstreamSendTimeout = downstreamSendTimeout;
  }

  public SeRuntimeProperties dpAggressiveHbFrequency(Integer dpAggressiveHbFrequency) {
    this.dpAggressiveHbFrequency = dpAggressiveHbFrequency;
    return this;
  }

   /**
   * Frequency of SE - SE HB messages when aggressive failure mode detection is enabled.
   * @return dpAggressiveHbFrequency
  **/
  @Schema(description = "Frequency of SE - SE HB messages when aggressive failure mode detection is enabled.")
  public Integer getDpAggressiveHbFrequency() {
    return dpAggressiveHbFrequency;
  }

  public void setDpAggressiveHbFrequency(Integer dpAggressiveHbFrequency) {
    this.dpAggressiveHbFrequency = dpAggressiveHbFrequency;
  }

  public SeRuntimeProperties dpAggressiveHbTimeoutCount(Integer dpAggressiveHbTimeoutCount) {
    this.dpAggressiveHbTimeoutCount = dpAggressiveHbTimeoutCount;
    return this;
  }

   /**
   * Consecutive HB failures after which failure is reported to controller,when aggressive failure mode detection is enabled.
   * @return dpAggressiveHbTimeoutCount
  **/
  @Schema(description = "Consecutive HB failures after which failure is reported to controller,when aggressive failure mode detection is enabled.")
  public Integer getDpAggressiveHbTimeoutCount() {
    return dpAggressiveHbTimeoutCount;
  }

  public void setDpAggressiveHbTimeoutCount(Integer dpAggressiveHbTimeoutCount) {
    this.dpAggressiveHbTimeoutCount = dpAggressiveHbTimeoutCount;
  }

  public SeRuntimeProperties dpHbFrequency(Integer dpHbFrequency) {
    this.dpHbFrequency = dpHbFrequency;
    return this;
  }

   /**
   * Frequency of SE - SE HB messages when aggressive failure mode detection is not enabled.
   * @return dpHbFrequency
  **/
  @Schema(description = "Frequency of SE - SE HB messages when aggressive failure mode detection is not enabled.")
  public Integer getDpHbFrequency() {
    return dpHbFrequency;
  }

  public void setDpHbFrequency(Integer dpHbFrequency) {
    this.dpHbFrequency = dpHbFrequency;
  }

  public SeRuntimeProperties dpHbTimeoutCount(Integer dpHbTimeoutCount) {
    this.dpHbTimeoutCount = dpHbTimeoutCount;
    return this;
  }

   /**
   * Consecutive HB failures after which failure is reported to controller, when aggressive failure mode detection is not enabled.
   * @return dpHbTimeoutCount
  **/
  @Schema(description = "Consecutive HB failures after which failure is reported to controller, when aggressive failure mode detection is not enabled.")
  public Integer getDpHbTimeoutCount() {
    return dpHbTimeoutCount;
  }

  public void setDpHbTimeoutCount(Integer dpHbTimeoutCount) {
    this.dpHbTimeoutCount = dpHbTimeoutCount;
  }

  public SeRuntimeProperties dupipFrequency(Integer dupipFrequency) {
    this.dupipFrequency = dupipFrequency;
    return this;
  }

   /**
   * Frequency of ARP requests sent by SE for each VIP to detect duplicate IP when it loses conectivity to controller.
   * @return dupipFrequency
  **/
  @Schema(description = "Frequency of ARP requests sent by SE for each VIP to detect duplicate IP when it loses conectivity to controller.")
  public Integer getDupipFrequency() {
    return dupipFrequency;
  }

  public void setDupipFrequency(Integer dupipFrequency) {
    this.dupipFrequency = dupipFrequency;
  }

  public SeRuntimeProperties dupipTimeoutCount(Integer dupipTimeoutCount) {
    this.dupipTimeoutCount = dupipTimeoutCount;
    return this;
  }

   /**
   * Number of ARP responses received for the VIP after which SE decides that the VIP has been moved and disables the VIP.
   * @return dupipTimeoutCount
  **/
  @Schema(description = "Number of ARP responses received for the VIP after which SE decides that the VIP has been moved and disables the VIP.")
  public Integer getDupipTimeoutCount() {
    return dupipTimeoutCount;
  }

  public void setDupipTimeoutCount(Integer dupipTimeoutCount) {
    this.dupipTimeoutCount = dupipTimeoutCount;
  }

  public SeRuntimeProperties enableHsmLog(Boolean enableHsmLog) {
    this.enableHsmLog = enableHsmLog;
    return this;
  }

   /**
   * Enable HSM luna engine logs. Field introduced in 16.4.8, 17.1.11, 17.2.3.
   * @return enableHsmLog
  **/
  @Schema(description = "Enable HSM luna engine logs. Field introduced in 16.4.8, 17.1.11, 17.2.3.")
  public Boolean isEnableHsmLog() {
    return enableHsmLog;
  }

  public void setEnableHsmLog(Boolean enableHsmLog) {
    this.enableHsmLog = enableHsmLog;
  }

  public SeRuntimeProperties feproxyVipsEnableProxyArp(Boolean feproxyVipsEnableProxyArp) {
    this.feproxyVipsEnableProxyArp = feproxyVipsEnableProxyArp;
    return this;
  }

   /**
   * Enable proxy ARP from Host interface for Front End  proxies.
   * @return feproxyVipsEnableProxyArp
  **/
  @Schema(description = "Enable proxy ARP from Host interface for Front End  proxies.")
  public Boolean isFeproxyVipsEnableProxyArp() {
    return feproxyVipsEnableProxyArp;
  }

  public void setFeproxyVipsEnableProxyArp(Boolean feproxyVipsEnableProxyArp) {
    this.feproxyVipsEnableProxyArp = feproxyVipsEnableProxyArp;
  }

  public SeRuntimeProperties flowTableBatchPushFrequency(Integer flowTableBatchPushFrequency) {
    this.flowTableBatchPushFrequency = flowTableBatchPushFrequency;
    return this;
  }

   /**
   * How often to push the flow table IPC messages in the main loop. The value is the number of times through the loop before pushing the batch. i.e, a value of 1 means every time through the loop.
   * @return flowTableBatchPushFrequency
  **/
  @Schema(description = "How often to push the flow table IPC messages in the main loop. The value is the number of times through the loop before pushing the batch. i.e, a value of 1 means every time through the loop.")
  public Integer getFlowTableBatchPushFrequency() {
    return flowTableBatchPushFrequency;
  }

  public void setFlowTableBatchPushFrequency(Integer flowTableBatchPushFrequency) {
    this.flowTableBatchPushFrequency = flowTableBatchPushFrequency;
  }

  public SeRuntimeProperties flowTableMaxEntriesDeprecated(Integer flowTableMaxEntriesDeprecated) {
    this.flowTableMaxEntriesDeprecated = flowTableMaxEntriesDeprecated;
    return this;
  }

   /**
   * Deprecated. Field deprecated in 17.1.1.
   * @return flowTableMaxEntriesDeprecated
  **/
  @Schema(description = "Deprecated. Field deprecated in 17.1.1.")
  public Integer getFlowTableMaxEntriesDeprecated() {
    return flowTableMaxEntriesDeprecated;
  }

  public void setFlowTableMaxEntriesDeprecated(Integer flowTableMaxEntriesDeprecated) {
    this.flowTableMaxEntriesDeprecated = flowTableMaxEntriesDeprecated;
  }

  public SeRuntimeProperties flowTableNewSynMaxEntries(Integer flowTableNewSynMaxEntries) {
    this.flowTableNewSynMaxEntries = flowTableNewSynMaxEntries;
    return this;
  }

   /**
   * Deprecated. Field deprecated in 17.2.5.
   * @return flowTableNewSynMaxEntries
  **/
  @Schema(description = "Deprecated. Field deprecated in 17.2.5.")
  public Integer getFlowTableNewSynMaxEntries() {
    return flowTableNewSynMaxEntries;
  }

  public void setFlowTableNewSynMaxEntries(Integer flowTableNewSynMaxEntries) {
    this.flowTableNewSynMaxEntries = flowTableNewSynMaxEntries;
  }

  public SeRuntimeProperties globalMtu(Integer globalMtu) {
    this.globalMtu = globalMtu;
    return this;
  }

   /**
   * Overrides the MTU value received via DHCP or some other means. Use this when the infrastructure advertises an MTU that is not supported by all devices in the network. For example, in AWS or when an overlay is used.
   * @return globalMtu
  **/
  @Schema(description = "Overrides the MTU value received via DHCP or some other means. Use this when the infrastructure advertises an MTU that is not supported by all devices in the network. For example, in AWS or when an overlay is used.")
  public Integer getGlobalMtu() {
    return globalMtu;
  }

  public void setGlobalMtu(Integer globalMtu) {
    this.globalMtu = globalMtu;
  }

  public SeRuntimeProperties httpRumConsoleLog(Boolean httpRumConsoleLog) {
    this.httpRumConsoleLog = httpRumConsoleLog;
    return this;
  }

   /**
   * Enable Javascript console logs on the client browser when collecting client insights.
   * @return httpRumConsoleLog
  **/
  @Schema(description = "Enable Javascript console logs on the client browser when collecting client insights.")
  public Boolean isHttpRumConsoleLog() {
    return httpRumConsoleLog;
  }

  public void setHttpRumConsoleLog(Boolean httpRumConsoleLog) {
    this.httpRumConsoleLog = httpRumConsoleLog;
  }

  public SeRuntimeProperties httpRumMinContentLength(Integer httpRumMinContentLength) {
    this.httpRumMinContentLength = httpRumMinContentLength;
    return this;
  }

   /**
   * Minimum response size content length to sample for client insights.
   * @return httpRumMinContentLength
  **/
  @Schema(description = "Minimum response size content length to sample for client insights.")
  public Integer getHttpRumMinContentLength() {
    return httpRumMinContentLength;
  }

  public void setHttpRumMinContentLength(Integer httpRumMinContentLength) {
    this.httpRumMinContentLength = httpRumMinContentLength;
  }

  public SeRuntimeProperties lbBatchPushFrequency(Integer lbBatchPushFrequency) {
    this.lbBatchPushFrequency = lbBatchPushFrequency;
    return this;
  }

   /**
   * How often to push the LB IPC messages in the main loop. The value is the number of times the loop has to run before pushing the batch. i.e, a value of 1 means the batch is pushed every time the loop runs. Field deprecated in 18.1.3. Field introduced in 17.2.8.
   * @return lbBatchPushFrequency
  **/
  @Schema(description = "How often to push the LB IPC messages in the main loop. The value is the number of times the loop has to run before pushing the batch. i.e, a value of 1 means the batch is pushed every time the loop runs. Field deprecated in 18.1.3. Field introduced in 17.2.8.")
  public Integer getLbBatchPushFrequency() {
    return lbBatchPushFrequency;
  }

  public void setLbBatchPushFrequency(Integer lbBatchPushFrequency) {
    this.lbBatchPushFrequency = lbBatchPushFrequency;
  }

  public SeRuntimeProperties lbFailMaxTime(Integer lbFailMaxTime) {
    this.lbFailMaxTime = lbFailMaxTime;
    return this;
  }

   /**
   * Deprecated. Field deprecated in 17.1.1.
   * @return lbFailMaxTime
  **/
  @Schema(description = "Deprecated. Field deprecated in 17.1.1.")
  public Integer getLbFailMaxTime() {
    return lbFailMaxTime;
  }

  public void setLbFailMaxTime(Integer lbFailMaxTime) {
    this.lbFailMaxTime = lbFailMaxTime;
  }

  public SeRuntimeProperties lbactionNumRequestsToDispatch(Integer lbactionNumRequestsToDispatch) {
    this.lbactionNumRequestsToDispatch = lbactionNumRequestsToDispatch;
    return this;
  }

   /**
   * Number of requests to dispatch from the request queue at a regular interval.
   * @return lbactionNumRequestsToDispatch
  **/
  @Schema(description = "Number of requests to dispatch from the request queue at a regular interval.")
  public Integer getLbactionNumRequestsToDispatch() {
    return lbactionNumRequestsToDispatch;
  }

  public void setLbactionNumRequestsToDispatch(Integer lbactionNumRequestsToDispatch) {
    this.lbactionNumRequestsToDispatch = lbactionNumRequestsToDispatch;
  }

  public SeRuntimeProperties lbactionRqPerRequestMaxRetries(Integer lbactionRqPerRequestMaxRetries) {
    this.lbactionRqPerRequestMaxRetries = lbactionRqPerRequestMaxRetries;
    return this;
  }

   /**
   * Maximum retries per request in the request queue.
   * @return lbactionRqPerRequestMaxRetries
  **/
  @Schema(description = "Maximum retries per request in the request queue.")
  public Integer getLbactionRqPerRequestMaxRetries() {
    return lbactionRqPerRequestMaxRetries;
  }

  public void setLbactionRqPerRequestMaxRetries(Integer lbactionRqPerRequestMaxRetries) {
    this.lbactionRqPerRequestMaxRetries = lbactionRqPerRequestMaxRetries;
  }

  public SeRuntimeProperties logAgentCompressLogs(Boolean logAgentCompressLogs) {
    this.logAgentCompressLogs = logAgentCompressLogs;
    return this;
  }

   /**
   * Flag to indicate if log files are compressed upon full on the Service Engine.
   * @return logAgentCompressLogs
  **/
  @Schema(description = "Flag to indicate if log files are compressed upon full on the Service Engine.")
  public Boolean isLogAgentCompressLogs() {
    return logAgentCompressLogs;
  }

  public void setLogAgentCompressLogs(Boolean logAgentCompressLogs) {
    this.logAgentCompressLogs = logAgentCompressLogs;
  }

  public SeRuntimeProperties logAgentConnSendBufferSize(Integer logAgentConnSendBufferSize) {
    this.logAgentConnSendBufferSize = logAgentConnSendBufferSize;
    return this;
  }

   /**
   * Log-agent test property used to simulate slow TCP connections.
   * @return logAgentConnSendBufferSize
  **/
  @Schema(description = "Log-agent test property used to simulate slow TCP connections.")
  public Integer getLogAgentConnSendBufferSize() {
    return logAgentConnSendBufferSize;
  }

  public void setLogAgentConnSendBufferSize(Integer logAgentConnSendBufferSize) {
    this.logAgentConnSendBufferSize = logAgentConnSendBufferSize;
  }

  public SeRuntimeProperties logAgentExportMsgBufferSize(Integer logAgentExportMsgBufferSize) {
    this.logAgentExportMsgBufferSize = logAgentExportMsgBufferSize;
    return this;
  }

   /**
   * Maximum size of data sent by log-agent to Controller over the TCP connection.
   * @return logAgentExportMsgBufferSize
  **/
  @Schema(description = "Maximum size of data sent by log-agent to Controller over the TCP connection.")
  public Integer getLogAgentExportMsgBufferSize() {
    return logAgentExportMsgBufferSize;
  }

  public void setLogAgentExportMsgBufferSize(Integer logAgentExportMsgBufferSize) {
    this.logAgentExportMsgBufferSize = logAgentExportMsgBufferSize;
  }

  public SeRuntimeProperties logAgentExportWaitTime(Integer logAgentExportWaitTime) {
    this.logAgentExportWaitTime = logAgentExportWaitTime;
    return this;
  }

   /**
   * Time log-agent waits before sending data to the Controller.
   * @return logAgentExportWaitTime
  **/
  @Schema(description = "Time log-agent waits before sending data to the Controller.")
  public Integer getLogAgentExportWaitTime() {
    return logAgentExportWaitTime;
  }

  public void setLogAgentExportWaitTime(Integer logAgentExportWaitTime) {
    this.logAgentExportWaitTime = logAgentExportWaitTime;
  }

  public SeRuntimeProperties logAgentFileSzAppl(Integer logAgentFileSzAppl) {
    this.logAgentFileSzAppl = logAgentFileSzAppl;
    return this;
  }

   /**
   * Maximum application log file size before rollover.
   * @return logAgentFileSzAppl
  **/
  @Schema(description = "Maximum application log file size before rollover.")
  public Integer getLogAgentFileSzAppl() {
    return logAgentFileSzAppl;
  }

  public void setLogAgentFileSzAppl(Integer logAgentFileSzAppl) {
    this.logAgentFileSzAppl = logAgentFileSzAppl;
  }

  public SeRuntimeProperties logAgentFileSzConn(Integer logAgentFileSzConn) {
    this.logAgentFileSzConn = logAgentFileSzConn;
    return this;
  }

   /**
   * Maximum connection log file size before rollover.
   * @return logAgentFileSzConn
  **/
  @Schema(description = "Maximum connection log file size before rollover.")
  public Integer getLogAgentFileSzConn() {
    return logAgentFileSzConn;
  }

  public void setLogAgentFileSzConn(Integer logAgentFileSzConn) {
    this.logAgentFileSzConn = logAgentFileSzConn;
  }

  public SeRuntimeProperties logAgentFileSzDebug(Integer logAgentFileSzDebug) {
    this.logAgentFileSzDebug = logAgentFileSzDebug;
    return this;
  }

   /**
   * Maximum debug log file size before rollover.
   * @return logAgentFileSzDebug
  **/
  @Schema(description = "Maximum debug log file size before rollover.")
  public Integer getLogAgentFileSzDebug() {
    return logAgentFileSzDebug;
  }

  public void setLogAgentFileSzDebug(Integer logAgentFileSzDebug) {
    this.logAgentFileSzDebug = logAgentFileSzDebug;
  }

  public SeRuntimeProperties logAgentFileSzEvent(Integer logAgentFileSzEvent) {
    this.logAgentFileSzEvent = logAgentFileSzEvent;
    return this;
  }

   /**
   * Maximum event log file size before rollover.
   * @return logAgentFileSzEvent
  **/
  @Schema(description = "Maximum event log file size before rollover.")
  public Integer getLogAgentFileSzEvent() {
    return logAgentFileSzEvent;
  }

  public void setLogAgentFileSzEvent(Integer logAgentFileSzEvent) {
    this.logAgentFileSzEvent = logAgentFileSzEvent;
  }

  public SeRuntimeProperties logAgentLogStorageMinSz(Integer logAgentLogStorageMinSz) {
    this.logAgentLogStorageMinSz = logAgentLogStorageMinSz;
    return this;
  }

   /**
   * Minimum storage allocated for logs irrespective of memory and cores.
   * @return logAgentLogStorageMinSz
  **/
  @Schema(description = "Minimum storage allocated for logs irrespective of memory and cores.")
  public Integer getLogAgentLogStorageMinSz() {
    return logAgentLogStorageMinSz;
  }

  public void setLogAgentLogStorageMinSz(Integer logAgentLogStorageMinSz) {
    this.logAgentLogStorageMinSz = logAgentLogStorageMinSz;
  }

  public SeRuntimeProperties logAgentMaxActiveAdfFilesPerVs(Integer logAgentMaxActiveAdfFilesPerVs) {
    this.logAgentMaxActiveAdfFilesPerVs = logAgentMaxActiveAdfFilesPerVs;
    return this;
  }

   /**
   * Maximum number of Virtual Service log files maintained for significant logs on the Service Engine.
   * @return logAgentMaxActiveAdfFilesPerVs
  **/
  @Schema(description = "Maximum number of Virtual Service log files maintained for significant logs on the Service Engine.")
  public Integer getLogAgentMaxActiveAdfFilesPerVs() {
    return logAgentMaxActiveAdfFilesPerVs;
  }

  public void setLogAgentMaxActiveAdfFilesPerVs(Integer logAgentMaxActiveAdfFilesPerVs) {
    this.logAgentMaxActiveAdfFilesPerVs = logAgentMaxActiveAdfFilesPerVs;
  }

  public SeRuntimeProperties logAgentMaxConcurrentRsync(Integer logAgentMaxConcurrentRsync) {
    this.logAgentMaxConcurrentRsync = logAgentMaxConcurrentRsync;
    return this;
  }

   /**
   * Maximum concurrent rsync requests initiated from log-agent to the Controller.
   * @return logAgentMaxConcurrentRsync
  **/
  @Schema(description = "Maximum concurrent rsync requests initiated from log-agent to the Controller.")
  public Integer getLogAgentMaxConcurrentRsync() {
    return logAgentMaxConcurrentRsync;
  }

  public void setLogAgentMaxConcurrentRsync(Integer logAgentMaxConcurrentRsync) {
    this.logAgentMaxConcurrentRsync = logAgentMaxConcurrentRsync;
  }

  public SeRuntimeProperties logAgentMaxLogmessageProtoSz(Integer logAgentMaxLogmessageProtoSz) {
    this.logAgentMaxLogmessageProtoSz = logAgentMaxLogmessageProtoSz;
    return this;
  }

   /**
   * Maximum size of serialized log message on the Service Engine.
   * @return logAgentMaxLogmessageProtoSz
  **/
  @Schema(description = "Maximum size of serialized log message on the Service Engine.")
  public Integer getLogAgentMaxLogmessageProtoSz() {
    return logAgentMaxLogmessageProtoSz;
  }

  public void setLogAgentMaxLogmessageProtoSz(Integer logAgentMaxLogmessageProtoSz) {
    this.logAgentMaxLogmessageProtoSz = logAgentMaxLogmessageProtoSz;
  }

  public SeRuntimeProperties logAgentMaxStorageExcessPercent(Integer logAgentMaxStorageExcessPercent) {
    this.logAgentMaxStorageExcessPercent = logAgentMaxStorageExcessPercent;
    return this;
  }

   /**
   * Excess percentage threshold of disk size to trigger cleanup of logs on the Service Engine.
   * @return logAgentMaxStorageExcessPercent
  **/
  @Schema(description = "Excess percentage threshold of disk size to trigger cleanup of logs on the Service Engine.")
  public Integer getLogAgentMaxStorageExcessPercent() {
    return logAgentMaxStorageExcessPercent;
  }

  public void setLogAgentMaxStorageExcessPercent(Integer logAgentMaxStorageExcessPercent) {
    this.logAgentMaxStorageExcessPercent = logAgentMaxStorageExcessPercent;
  }

  public SeRuntimeProperties logAgentMaxStorageIgnorePercent(Float logAgentMaxStorageIgnorePercent) {
    this.logAgentMaxStorageIgnorePercent = logAgentMaxStorageIgnorePercent;
    return this;
  }

   /**
   * Maximum storage on the disk not allocated for logs on the Service Engine.
   * @return logAgentMaxStorageIgnorePercent
  **/
  @Schema(description = "Maximum storage on the disk not allocated for logs on the Service Engine.")
  public Float getLogAgentMaxStorageIgnorePercent() {
    return logAgentMaxStorageIgnorePercent;
  }

  public void setLogAgentMaxStorageIgnorePercent(Float logAgentMaxStorageIgnorePercent) {
    this.logAgentMaxStorageIgnorePercent = logAgentMaxStorageIgnorePercent;
  }

  public SeRuntimeProperties logAgentMinStoragePerVs(Integer logAgentMinStoragePerVs) {
    this.logAgentMinStoragePerVs = logAgentMinStoragePerVs;
    return this;
  }

   /**
   * Minimum storage allocated to any given VirtualService on the Service Engine.
   * @return logAgentMinStoragePerVs
  **/
  @Schema(description = "Minimum storage allocated to any given VirtualService on the Service Engine.")
  public Integer getLogAgentMinStoragePerVs() {
    return logAgentMinStoragePerVs;
  }

  public void setLogAgentMinStoragePerVs(Integer logAgentMinStoragePerVs) {
    this.logAgentMinStoragePerVs = logAgentMinStoragePerVs;
  }

  public SeRuntimeProperties logAgentPauseInterval(Integer logAgentPauseInterval) {
    this.logAgentPauseInterval = logAgentPauseInterval;
    return this;
  }

   /**
   * Time interval log-agent pauses between logs obtained from the dataplane.
   * @return logAgentPauseInterval
  **/
  @Schema(description = "Time interval log-agent pauses between logs obtained from the dataplane.")
  public Integer getLogAgentPauseInterval() {
    return logAgentPauseInterval;
  }

  public void setLogAgentPauseInterval(Integer logAgentPauseInterval) {
    this.logAgentPauseInterval = logAgentPauseInterval;
  }

  public SeRuntimeProperties logAgentSleepInterval(Integer logAgentSleepInterval) {
    this.logAgentSleepInterval = logAgentSleepInterval;
    return this;
  }

   /**
   * Internal timer to stall log-agent and prevent it from hogging CPU cycles on the Service Engine.
   * @return logAgentSleepInterval
  **/
  @Schema(description = "Internal timer to stall log-agent and prevent it from hogging CPU cycles on the Service Engine.")
  public Integer getLogAgentSleepInterval() {
    return logAgentSleepInterval;
  }

  public void setLogAgentSleepInterval(Integer logAgentSleepInterval) {
    this.logAgentSleepInterval = logAgentSleepInterval;
  }

  public SeRuntimeProperties logAgentUnknownVsTimer(Integer logAgentUnknownVsTimer) {
    this.logAgentUnknownVsTimer = logAgentUnknownVsTimer;
    return this;
  }

   /**
   * Timeout to purge unknown Virtual Service logs from the Service Engine.
   * @return logAgentUnknownVsTimer
  **/
  @Schema(description = "Timeout to purge unknown Virtual Service logs from the Service Engine.")
  public Integer getLogAgentUnknownVsTimer() {
    return logAgentUnknownVsTimer;
  }

  public void setLogAgentUnknownVsTimer(Integer logAgentUnknownVsTimer) {
    this.logAgentUnknownVsTimer = logAgentUnknownVsTimer;
  }

  public SeRuntimeProperties logMessageMaxFileListSize(Integer logMessageMaxFileListSize) {
    this.logMessageMaxFileListSize = logMessageMaxFileListSize;
    return this;
  }

   /**
   * Maximum number of file names in a log message.
   * @return logMessageMaxFileListSize
  **/
  @Schema(description = "Maximum number of file names in a log message.")
  public Integer getLogMessageMaxFileListSize() {
    return logMessageMaxFileListSize;
  }

  public void setLogMessageMaxFileListSize(Integer logMessageMaxFileListSize) {
    this.logMessageMaxFileListSize = logMessageMaxFileListSize;
  }

  public SeRuntimeProperties maxThroughput(Integer maxThroughput) {
    this.maxThroughput = maxThroughput;
    return this;
  }

   /**
   * Deprecated. Field deprecated in 17.1.1.
   * @return maxThroughput
  **/
  @Schema(description = "Deprecated. Field deprecated in 17.1.1.")
  public Integer getMaxThroughput() {
    return maxThroughput;
  }

  public void setMaxThroughput(Integer maxThroughput) {
    this.maxThroughput = maxThroughput;
  }

  public SeRuntimeProperties mcacheEnabled(Boolean mcacheEnabled) {
    this.mcacheEnabled = mcacheEnabled;
    return this;
  }

   /**
   * enables mcache - controls fetch/store/store_out.
   * @return mcacheEnabled
  **/
  @Schema(description = "enables mcache - controls fetch/store/store_out.")
  public Boolean isMcacheEnabled() {
    return mcacheEnabled;
  }

  public void setMcacheEnabled(Boolean mcacheEnabled) {
    this.mcacheEnabled = mcacheEnabled;
  }

  public SeRuntimeProperties mcacheFetchEnabled(Boolean mcacheFetchEnabled) {
    this.mcacheFetchEnabled = mcacheFetchEnabled;
    return this;
  }

   /**
   * enables mcache_fetch.
   * @return mcacheFetchEnabled
  **/
  @Schema(description = "enables mcache_fetch.")
  public Boolean isMcacheFetchEnabled() {
    return mcacheFetchEnabled;
  }

  public void setMcacheFetchEnabled(Boolean mcacheFetchEnabled) {
    this.mcacheFetchEnabled = mcacheFetchEnabled;
  }

  public SeRuntimeProperties mcacheMaxCacheSize(Long mcacheMaxCacheSize) {
    this.mcacheMaxCacheSize = mcacheMaxCacheSize;
    return this;
  }

   /**
   * Use SE Group&#x27;s app_cache_percent to set cache memory usage limit on SE. Field deprecated in 18.2.3.
   * @return mcacheMaxCacheSize
  **/
  @Schema(description = "Use SE Group's app_cache_percent to set cache memory usage limit on SE. Field deprecated in 18.2.3.")
  public Long getMcacheMaxCacheSize() {
    return mcacheMaxCacheSize;
  }

  public void setMcacheMaxCacheSize(Long mcacheMaxCacheSize) {
    this.mcacheMaxCacheSize = mcacheMaxCacheSize;
  }

  public SeRuntimeProperties mcacheStoreInEnabled(Boolean mcacheStoreInEnabled) {
    this.mcacheStoreInEnabled = mcacheStoreInEnabled;
    return this;
  }

   /**
   * enables mcache_store.
   * @return mcacheStoreInEnabled
  **/
  @Schema(description = "enables mcache_store.")
  public Boolean isMcacheStoreInEnabled() {
    return mcacheStoreInEnabled;
  }

  public void setMcacheStoreInEnabled(Boolean mcacheStoreInEnabled) {
    this.mcacheStoreInEnabled = mcacheStoreInEnabled;
  }

  public SeRuntimeProperties mcacheStoreInMaxSize(Integer mcacheStoreInMaxSize) {
    this.mcacheStoreInMaxSize = mcacheStoreInMaxSize;
    return this;
  }

   /**
   * max object size.
   * @return mcacheStoreInMaxSize
  **/
  @Schema(description = "max object size.")
  public Integer getMcacheStoreInMaxSize() {
    return mcacheStoreInMaxSize;
  }

  public void setMcacheStoreInMaxSize(Integer mcacheStoreInMaxSize) {
    this.mcacheStoreInMaxSize = mcacheStoreInMaxSize;
  }

  public SeRuntimeProperties mcacheStoreInMinSize(Integer mcacheStoreInMinSize) {
    this.mcacheStoreInMinSize = mcacheStoreInMinSize;
    return this;
  }

   /**
   * min object size.
   * @return mcacheStoreInMinSize
  **/
  @Schema(description = "min object size.")
  public Integer getMcacheStoreInMinSize() {
    return mcacheStoreInMinSize;
  }

  public void setMcacheStoreInMinSize(Integer mcacheStoreInMinSize) {
    this.mcacheStoreInMinSize = mcacheStoreInMinSize;
  }

  public SeRuntimeProperties mcacheStoreOutEnabled(Boolean mcacheStoreOutEnabled) {
    this.mcacheStoreOutEnabled = mcacheStoreOutEnabled;
    return this;
  }

   /**
   * enables mcache_store_out.
   * @return mcacheStoreOutEnabled
  **/
  @Schema(description = "enables mcache_store_out.")
  public Boolean isMcacheStoreOutEnabled() {
    return mcacheStoreOutEnabled;
  }

  public void setMcacheStoreOutEnabled(Boolean mcacheStoreOutEnabled) {
    this.mcacheStoreOutEnabled = mcacheStoreOutEnabled;
  }

  public SeRuntimeProperties mcacheStoreSeMaxSize(Long mcacheStoreSeMaxSize) {
    this.mcacheStoreSeMaxSize = mcacheStoreSeMaxSize;
    return this;
  }

   /**
   * Use SE Group&#x27;s app_cache_percent to set cache memory usage limit on SE. Field deprecated in 18.2.3.
   * @return mcacheStoreSeMaxSize
  **/
  @Schema(description = "Use SE Group's app_cache_percent to set cache memory usage limit on SE. Field deprecated in 18.2.3.")
  public Long getMcacheStoreSeMaxSize() {
    return mcacheStoreSeMaxSize;
  }

  public void setMcacheStoreSeMaxSize(Long mcacheStoreSeMaxSize) {
    this.mcacheStoreSeMaxSize = mcacheStoreSeMaxSize;
  }

  public SeRuntimeProperties ngxFreeConnectionStack(Boolean ngxFreeConnectionStack) {
    this.ngxFreeConnectionStack = ngxFreeConnectionStack;
    return this;
  }

   /**
   * Placeholder for description of property ngx_free_connection_stack of obj type SeRuntimeProperties field type str  type boolean
   * @return ngxFreeConnectionStack
  **/
  @Schema(description = "Placeholder for description of property ngx_free_connection_stack of obj type SeRuntimeProperties field type str  type boolean")
  public Boolean isNgxFreeConnectionStack() {
    return ngxFreeConnectionStack;
  }

  public void setNgxFreeConnectionStack(Boolean ngxFreeConnectionStack) {
    this.ngxFreeConnectionStack = ngxFreeConnectionStack;
  }

  public SeRuntimeProperties persistenceEntriesLowWatermark(Integer persistenceEntriesLowWatermark) {
    this.persistenceEntriesLowWatermark = persistenceEntriesLowWatermark;
    return this;
  }

   /**
   * Deprecated. Field deprecated in 17.1.1.
   * @return persistenceEntriesLowWatermark
  **/
  @Schema(description = "Deprecated. Field deprecated in 17.1.1.")
  public Integer getPersistenceEntriesLowWatermark() {
    return persistenceEntriesLowWatermark;
  }

  public void setPersistenceEntriesLowWatermark(Integer persistenceEntriesLowWatermark) {
    this.persistenceEntriesLowWatermark = persistenceEntriesLowWatermark;
  }

  public SeRuntimeProperties persistenceMemMax(Integer persistenceMemMax) {
    this.persistenceMemMax = persistenceMemMax;
    return this;
  }

   /**
   * Maximum memory in bytes allocated for persistence entries. Allowed values are 0-33554432.
   * @return persistenceMemMax
  **/
  @Schema(description = "Maximum memory in bytes allocated for persistence entries. Allowed values are 0-33554432.")
  public Integer getPersistenceMemMax() {
    return persistenceMemMax;
  }

  public void setPersistenceMemMax(Integer persistenceMemMax) {
    this.persistenceMemMax = persistenceMemMax;
  }

  public SeRuntimeProperties scaleoutUdpPerPkt(Boolean scaleoutUdpPerPkt) {
    this.scaleoutUdpPerPkt = scaleoutUdpPerPkt;
    return this;
  }

   /**
   * Enable punting of UDP packets from primary to other Service Engines. This applies to Virtual Services with Per-Packet Loadbalancing enabled.
   * @return scaleoutUdpPerPkt
  **/
  @Schema(description = "Enable punting of UDP packets from primary to other Service Engines. This applies to Virtual Services with Per-Packet Loadbalancing enabled.")
  public Boolean isScaleoutUdpPerPkt() {
    return scaleoutUdpPerPkt;
  }

  public void setScaleoutUdpPerPkt(Boolean scaleoutUdpPerPkt) {
    this.scaleoutUdpPerPkt = scaleoutUdpPerPkt;
  }

  public SeRuntimeProperties seAuthLdapBindTimeout(Integer seAuthLdapBindTimeout) {
    this.seAuthLdapBindTimeout = seAuthLdapBindTimeout;
    return this;
  }

   /**
   * LDAP basicauth default bind timeout enforced on connections to LDAP server.
   * @return seAuthLdapBindTimeout
  **/
  @Schema(description = "LDAP basicauth default bind timeout enforced on connections to LDAP server.")
  public Integer getSeAuthLdapBindTimeout() {
    return seAuthLdapBindTimeout;
  }

  public void setSeAuthLdapBindTimeout(Integer seAuthLdapBindTimeout) {
    this.seAuthLdapBindTimeout = seAuthLdapBindTimeout;
  }

  public SeRuntimeProperties seAuthLdapCacheSize(Integer seAuthLdapCacheSize) {
    this.seAuthLdapCacheSize = seAuthLdapCacheSize;
    return this;
  }

   /**
   * Size of LDAP basicauth credentials cache used on the dataplane.
   * @return seAuthLdapCacheSize
  **/
  @Schema(description = "Size of LDAP basicauth credentials cache used on the dataplane.")
  public Integer getSeAuthLdapCacheSize() {
    return seAuthLdapCacheSize;
  }

  public void setSeAuthLdapCacheSize(Integer seAuthLdapCacheSize) {
    this.seAuthLdapCacheSize = seAuthLdapCacheSize;
  }

  public SeRuntimeProperties seAuthLdapConnectTimeout(Integer seAuthLdapConnectTimeout) {
    this.seAuthLdapConnectTimeout = seAuthLdapConnectTimeout;
    return this;
  }

   /**
   * LDAP basicauth default connection timeout enforced on connections to LDAP server.
   * @return seAuthLdapConnectTimeout
  **/
  @Schema(description = "LDAP basicauth default connection timeout enforced on connections to LDAP server.")
  public Integer getSeAuthLdapConnectTimeout() {
    return seAuthLdapConnectTimeout;
  }

  public void setSeAuthLdapConnectTimeout(Integer seAuthLdapConnectTimeout) {
    this.seAuthLdapConnectTimeout = seAuthLdapConnectTimeout;
  }

  public SeRuntimeProperties seAuthLdapConnsPerServer(Integer seAuthLdapConnsPerServer) {
    this.seAuthLdapConnsPerServer = seAuthLdapConnsPerServer;
    return this;
  }

   /**
   * Number of concurrent connections to LDAP server by a single basic auth LDAP process.
   * @return seAuthLdapConnsPerServer
  **/
  @Schema(description = "Number of concurrent connections to LDAP server by a single basic auth LDAP process.")
  public Integer getSeAuthLdapConnsPerServer() {
    return seAuthLdapConnsPerServer;
  }

  public void setSeAuthLdapConnsPerServer(Integer seAuthLdapConnsPerServer) {
    this.seAuthLdapConnsPerServer = seAuthLdapConnsPerServer;
  }

  public SeRuntimeProperties seAuthLdapReconnectTimeout(Integer seAuthLdapReconnectTimeout) {
    this.seAuthLdapReconnectTimeout = seAuthLdapReconnectTimeout;
    return this;
  }

   /**
   * LDAP basicauth default reconnect timeout enforced on connections to LDAP server.
   * @return seAuthLdapReconnectTimeout
  **/
  @Schema(description = "LDAP basicauth default reconnect timeout enforced on connections to LDAP server.")
  public Integer getSeAuthLdapReconnectTimeout() {
    return seAuthLdapReconnectTimeout;
  }

  public void setSeAuthLdapReconnectTimeout(Integer seAuthLdapReconnectTimeout) {
    this.seAuthLdapReconnectTimeout = seAuthLdapReconnectTimeout;
  }

  public SeRuntimeProperties seAuthLdapRequestTimeout(Integer seAuthLdapRequestTimeout) {
    this.seAuthLdapRequestTimeout = seAuthLdapRequestTimeout;
    return this;
  }

   /**
   * LDAP basicauth default login or group search request timeout enforced on connections to LDAP server.
   * @return seAuthLdapRequestTimeout
  **/
  @Schema(description = "LDAP basicauth default login or group search request timeout enforced on connections to LDAP server.")
  public Integer getSeAuthLdapRequestTimeout() {
    return seAuthLdapRequestTimeout;
  }

  public void setSeAuthLdapRequestTimeout(Integer seAuthLdapRequestTimeout) {
    this.seAuthLdapRequestTimeout = seAuthLdapRequestTimeout;
  }

  public SeRuntimeProperties seAuthLdapServersFailoverOnly(Boolean seAuthLdapServersFailoverOnly) {
    this.seAuthLdapServersFailoverOnly = seAuthLdapServersFailoverOnly;
    return this;
  }

   /**
   * LDAP basicauth uses multiple ldap servers in the event of a failover only.
   * @return seAuthLdapServersFailoverOnly
  **/
  @Schema(description = "LDAP basicauth uses multiple ldap servers in the event of a failover only.")
  public Boolean isSeAuthLdapServersFailoverOnly() {
    return seAuthLdapServersFailoverOnly;
  }

  public void setSeAuthLdapServersFailoverOnly(Boolean seAuthLdapServersFailoverOnly) {
    this.seAuthLdapServersFailoverOnly = seAuthLdapServersFailoverOnly;
  }

  public SeRuntimeProperties seDpCompression(SeRuntimeCompressionProperties seDpCompression) {
    this.seDpCompression = seDpCompression;
    return this;
  }

   /**
   * Get seDpCompression
   * @return seDpCompression
  **/
  @Schema(description = "")
  public SeRuntimeCompressionProperties getSeDpCompression() {
    return seDpCompression;
  }

  public void setSeDpCompression(SeRuntimeCompressionProperties seDpCompression) {
    this.seDpCompression = seDpCompression;
  }

  public SeRuntimeProperties seDpHmDrops(Integer seDpHmDrops) {
    this.seDpHmDrops = seDpHmDrops;
    return this;
  }

   /**
   * Internal only. Used to simulate SE - SE HB failure.
   * @return seDpHmDrops
  **/
  @Schema(description = "Internal only. Used to simulate SE - SE HB failure.")
  public Integer getSeDpHmDrops() {
    return seDpHmDrops;
  }

  public void setSeDpHmDrops(Integer seDpHmDrops) {
    this.seDpHmDrops = seDpHmDrops;
  }

  public SeRuntimeProperties seDpIfStatePollInterval(Integer seDpIfStatePollInterval) {
    this.seDpIfStatePollInterval = seDpIfStatePollInterval;
    return this;
  }

   /**
   * Number of jiffies between polling interface state.
   * @return seDpIfStatePollInterval
  **/
  @Schema(description = "Number of jiffies between polling interface state.")
  public Integer getSeDpIfStatePollInterval() {
    return seDpIfStatePollInterval;
  }

  public void setSeDpIfStatePollInterval(Integer seDpIfStatePollInterval) {
    this.seDpIfStatePollInterval = seDpIfStatePollInterval;
  }

  public SeRuntimeProperties seDpLogNfEnqueuePercent(Integer seDpLogNfEnqueuePercent) {
    this.seDpLogNfEnqueuePercent = seDpLogNfEnqueuePercent;
    return this;
  }

   /**
   * Internal buffer full indicator on the Service Engine beyond which the unfiltered logs are abandoned.
   * @return seDpLogNfEnqueuePercent
  **/
  @Schema(description = "Internal buffer full indicator on the Service Engine beyond which the unfiltered logs are abandoned.")
  public Integer getSeDpLogNfEnqueuePercent() {
    return seDpLogNfEnqueuePercent;
  }

  public void setSeDpLogNfEnqueuePercent(Integer seDpLogNfEnqueuePercent) {
    this.seDpLogNfEnqueuePercent = seDpLogNfEnqueuePercent;
  }

  public SeRuntimeProperties seDpLogUdfEnqueuePercent(Integer seDpLogUdfEnqueuePercent) {
    this.seDpLogUdfEnqueuePercent = seDpLogUdfEnqueuePercent;
    return this;
  }

   /**
   * Internal buffer full indicator on the Service Engine beyond which the user filtered logs are abandoned.
   * @return seDpLogUdfEnqueuePercent
  **/
  @Schema(description = "Internal buffer full indicator on the Service Engine beyond which the user filtered logs are abandoned.")
  public Integer getSeDpLogUdfEnqueuePercent() {
    return seDpLogUdfEnqueuePercent;
  }

  public void setSeDpLogUdfEnqueuePercent(Integer seDpLogUdfEnqueuePercent) {
    this.seDpLogUdfEnqueuePercent = seDpLogUdfEnqueuePercent;
  }

  public SeRuntimeProperties seDpVnicQueueStallEventSleep(Integer seDpVnicQueueStallEventSleep) {
    this.seDpVnicQueueStallEventSleep = seDpVnicQueueStallEventSleep;
    return this;
  }

   /**
   * Deprecated. Field deprecated in 18.2.5. Field introduced in 17.1.1.
   * @return seDpVnicQueueStallEventSleep
  **/
  @Schema(description = "Deprecated. Field deprecated in 18.2.5. Field introduced in 17.1.1.")
  public Integer getSeDpVnicQueueStallEventSleep() {
    return seDpVnicQueueStallEventSleep;
  }

  public void setSeDpVnicQueueStallEventSleep(Integer seDpVnicQueueStallEventSleep) {
    this.seDpVnicQueueStallEventSleep = seDpVnicQueueStallEventSleep;
  }

  public SeRuntimeProperties seDpVnicQueueStallThreshold(Integer seDpVnicQueueStallThreshold) {
    this.seDpVnicQueueStallThreshold = seDpVnicQueueStallThreshold;
    return this;
  }

   /**
   * Deprecated. Field deprecated in 18.2.5. Field introduced in 17.1.1.
   * @return seDpVnicQueueStallThreshold
  **/
  @Schema(description = "Deprecated. Field deprecated in 18.2.5. Field introduced in 17.1.1.")
  public Integer getSeDpVnicQueueStallThreshold() {
    return seDpVnicQueueStallThreshold;
  }

  public void setSeDpVnicQueueStallThreshold(Integer seDpVnicQueueStallThreshold) {
    this.seDpVnicQueueStallThreshold = seDpVnicQueueStallThreshold;
  }

  public SeRuntimeProperties seDpVnicQueueStallTimeout(Integer seDpVnicQueueStallTimeout) {
    this.seDpVnicQueueStallTimeout = seDpVnicQueueStallTimeout;
    return this;
  }

   /**
   * Deprecated. Field deprecated in 18.2.5. Field introduced in 17.1.1.
   * @return seDpVnicQueueStallTimeout
  **/
  @Schema(description = "Deprecated. Field deprecated in 18.2.5. Field introduced in 17.1.1.")
  public Integer getSeDpVnicQueueStallTimeout() {
    return seDpVnicQueueStallTimeout;
  }

  public void setSeDpVnicQueueStallTimeout(Integer seDpVnicQueueStallTimeout) {
    this.seDpVnicQueueStallTimeout = seDpVnicQueueStallTimeout;
  }

  public SeRuntimeProperties seDpVnicRestartOnQueueStallCount(Integer seDpVnicRestartOnQueueStallCount) {
    this.seDpVnicRestartOnQueueStallCount = seDpVnicRestartOnQueueStallCount;
    return this;
  }

   /**
   * Deprecated. Field deprecated in 18.2.5. Field introduced in 17.1.14, 17.2.5, 18.1.1.
   * @return seDpVnicRestartOnQueueStallCount
  **/
  @Schema(description = "Deprecated. Field deprecated in 18.2.5. Field introduced in 17.1.14, 17.2.5, 18.1.1.")
  public Integer getSeDpVnicRestartOnQueueStallCount() {
    return seDpVnicRestartOnQueueStallCount;
  }

  public void setSeDpVnicRestartOnQueueStallCount(Integer seDpVnicRestartOnQueueStallCount) {
    this.seDpVnicRestartOnQueueStallCount = seDpVnicRestartOnQueueStallCount;
  }

  public SeRuntimeProperties seDpVnicStallSeRestartWindow(Integer seDpVnicStallSeRestartWindow) {
    this.seDpVnicStallSeRestartWindow = seDpVnicStallSeRestartWindow;
    return this;
  }

   /**
   * Deprecated. Field deprecated in 18.2.5. Field introduced in 17.1.14, 17.2.5, 18.1.1.
   * @return seDpVnicStallSeRestartWindow
  **/
  @Schema(description = "Deprecated. Field deprecated in 18.2.5. Field introduced in 17.1.14, 17.2.5, 18.1.1.")
  public Integer getSeDpVnicStallSeRestartWindow() {
    return seDpVnicStallSeRestartWindow;
  }

  public void setSeDpVnicStallSeRestartWindow(Integer seDpVnicStallSeRestartWindow) {
    this.seDpVnicStallSeRestartWindow = seDpVnicStallSeRestartWindow;
  }

  public SeRuntimeProperties seDumpCoreOnAssert(Boolean seDumpCoreOnAssert) {
    this.seDumpCoreOnAssert = seDumpCoreOnAssert;
    return this;
  }

   /**
   * Enable core dump on assert. Field introduced in 18.1.3, 18.2.1.
   * @return seDumpCoreOnAssert
  **/
  @Schema(description = "Enable core dump on assert. Field introduced in 18.1.3, 18.2.1.")
  public Boolean isSeDumpCoreOnAssert() {
    return seDumpCoreOnAssert;
  }

  public void setSeDumpCoreOnAssert(Boolean seDumpCoreOnAssert) {
    this.seDumpCoreOnAssert = seDumpCoreOnAssert;
  }

  public SeRuntimeProperties seHandleInterfaceRoutes(Boolean seHandleInterfaceRoutes) {
    this.seHandleInterfaceRoutes = seHandleInterfaceRoutes;
    return this;
  }

   /**
   * Accept/ignore interface routes (i.e, no next hop IP address).
   * @return seHandleInterfaceRoutes
  **/
  @Schema(description = "Accept/ignore interface routes (i.e, no next hop IP address).")
  public Boolean isSeHandleInterfaceRoutes() {
    return seHandleInterfaceRoutes;
  }

  public void setSeHandleInterfaceRoutes(Boolean seHandleInterfaceRoutes) {
    this.seHandleInterfaceRoutes = seHandleInterfaceRoutes;
  }

  public SeRuntimeProperties seHbPersistFudgeBits(Integer seHbPersistFudgeBits) {
    this.seHbPersistFudgeBits = seHbPersistFudgeBits;
    return this;
  }

   /**
   * Internal use only. Allowed values are 0-7.
   * @return seHbPersistFudgeBits
  **/
  @Schema(description = "Internal use only. Allowed values are 0-7.")
  public Integer getSeHbPersistFudgeBits() {
    return seHbPersistFudgeBits;
  }

  public void setSeHbPersistFudgeBits(Integer seHbPersistFudgeBits) {
    this.seHbPersistFudgeBits = seHbPersistFudgeBits;
  }

  public SeRuntimeProperties seMacErrorThresholdToDisablePromiscious(Integer seMacErrorThresholdToDisablePromiscious) {
    this.seMacErrorThresholdToDisablePromiscious = seMacErrorThresholdToDisablePromiscious;
    return this;
  }

   /**
   * Number of packets with wrong mac after which SE attempts to disable promiscious mode.
   * @return seMacErrorThresholdToDisablePromiscious
  **/
  @Schema(description = "Number of packets with wrong mac after which SE attempts to disable promiscious mode.")
  public Integer getSeMacErrorThresholdToDisablePromiscious() {
    return seMacErrorThresholdToDisablePromiscious;
  }

  public void setSeMacErrorThresholdToDisablePromiscious(Integer seMacErrorThresholdToDisablePromiscious) {
    this.seMacErrorThresholdToDisablePromiscious = seMacErrorThresholdToDisablePromiscious;
  }

  public SeRuntimeProperties seMallocThresh(Integer seMallocThresh) {
    this.seMallocThresh = seMallocThresh;
    return this;
  }

   /**
   * Deprecated. Field deprecated in 17.1.1.
   * @return seMallocThresh
  **/
  @Schema(description = "Deprecated. Field deprecated in 17.1.1.")
  public Integer getSeMallocThresh() {
    return seMallocThresh;
  }

  public void setSeMallocThresh(Integer seMallocThresh) {
    this.seMallocThresh = seMallocThresh;
  }

  public SeRuntimeProperties seMemoryPoison(Boolean seMemoryPoison) {
    this.seMemoryPoison = seMemoryPoison;
    return this;
  }

   /**
   * Internal use only. Enables poisoning of freed memory blocks.
   * @return seMemoryPoison
  **/
  @Schema(description = "Internal use only. Enables poisoning of freed memory blocks.")
  public Boolean isSeMemoryPoison() {
    return seMemoryPoison;
  }

  public void setSeMemoryPoison(Boolean seMemoryPoison) {
    this.seMemoryPoison = seMemoryPoison;
  }

  public SeRuntimeProperties seMetricsInterval(Integer seMetricsInterval) {
    this.seMetricsInterval = seMetricsInterval;
    return this;
  }

   /**
   * Internal use only. Frequency (ms) of metrics updates from SE to controller.
   * @return seMetricsInterval
  **/
  @Schema(description = "Internal use only. Frequency (ms) of metrics updates from SE to controller.")
  public Integer getSeMetricsInterval() {
    return seMetricsInterval;
  }

  public void setSeMetricsInterval(Integer seMetricsInterval) {
    this.seMetricsInterval = seMetricsInterval;
  }

  public SeRuntimeProperties seMetricsRtEnabled(Boolean seMetricsRtEnabled) {
    this.seMetricsRtEnabled = seMetricsRtEnabled;
    return this;
  }

   /**
   * Internal use only. Enable or disable real time metrics irrespective of virtualservice or SE group configuration.
   * @return seMetricsRtEnabled
  **/
  @Schema(description = "Internal use only. Enable or disable real time metrics irrespective of virtualservice or SE group configuration.")
  public Boolean isSeMetricsRtEnabled() {
    return seMetricsRtEnabled;
  }

  public void setSeMetricsRtEnabled(Boolean seMetricsRtEnabled) {
    this.seMetricsRtEnabled = seMetricsRtEnabled;
  }

  public SeRuntimeProperties seMetricsRtInterval(Integer seMetricsRtInterval) {
    this.seMetricsRtInterval = seMetricsRtInterval;
    return this;
  }

   /**
   * Internal use only. Frequency (ms) of realtime metrics updates from SE to controller.
   * @return seMetricsRtInterval
  **/
  @Schema(description = "Internal use only. Frequency (ms) of realtime metrics updates from SE to controller.")
  public Integer getSeMetricsRtInterval() {
    return seMetricsRtInterval;
  }

  public void setSeMetricsRtInterval(Integer seMetricsRtInterval) {
    this.seMetricsRtInterval = seMetricsRtInterval;
  }

  public SeRuntimeProperties sePacketBufferMax(Integer sePacketBufferMax) {
    this.sePacketBufferMax = sePacketBufferMax;
    return this;
  }

   /**
   * Internal use only. Used to artificially reduce the available number of packet buffers.
   * @return sePacketBufferMax
  **/
  @Schema(description = "Internal use only. Used to artificially reduce the available number of packet buffers.")
  public Integer getSePacketBufferMax() {
    return sePacketBufferMax;
  }

  public void setSePacketBufferMax(Integer sePacketBufferMax) {
    this.sePacketBufferMax = sePacketBufferMax;
  }

  public SeRuntimeProperties seRandomTcpDrops(Boolean seRandomTcpDrops) {
    this.seRandomTcpDrops = seRandomTcpDrops;
    return this;
  }

   /**
   * Internal use only. If enabled, randomly packets are dropped.
   * @return seRandomTcpDrops
  **/
  @Schema(description = "Internal use only. If enabled, randomly packets are dropped.")
  public Boolean isSeRandomTcpDrops() {
    return seRandomTcpDrops;
  }

  public void setSeRandomTcpDrops(Boolean seRandomTcpDrops) {
    this.seRandomTcpDrops = seRandomTcpDrops;
  }

  public SeRuntimeProperties seRateLimiters(SeRateLimiters seRateLimiters) {
    this.seRateLimiters = seRateLimiters;
    return this;
  }

   /**
   * Get seRateLimiters
   * @return seRateLimiters
  **/
  @Schema(description = "")
  public SeRateLimiters getSeRateLimiters() {
    return seRateLimiters;
  }

  public void setSeRateLimiters(SeRateLimiters seRateLimiters) {
    this.seRateLimiters = seRateLimiters;
  }

  public SeRuntimeProperties serviceIpSubnets(List<IpAddrPrefix> serviceIpSubnets) {
    this.serviceIpSubnets = serviceIpSubnets;
    return this;
  }

  public SeRuntimeProperties addServiceIpSubnetsItem(IpAddrPrefix serviceIpSubnetsItem) {
    if (this.serviceIpSubnets == null) {
      this.serviceIpSubnets = new ArrayList<IpAddrPrefix>();
    }
    this.serviceIpSubnets.add(serviceIpSubnetsItem);
    return this;
  }

   /**
   * IP ranges on which there may be virtual services (for configuring iptables/routes).
   * @return serviceIpSubnets
  **/
  @Schema(description = "IP ranges on which there may be virtual services (for configuring iptables/routes).")
  public List<IpAddrPrefix> getServiceIpSubnets() {
    return serviceIpSubnets;
  }

  public void setServiceIpSubnets(List<IpAddrPrefix> serviceIpSubnets) {
    this.serviceIpSubnets = serviceIpSubnets;
  }

  public SeRuntimeProperties servicePortRanges(List<PortRange> servicePortRanges) {
    this.servicePortRanges = servicePortRanges;
    return this;
  }

  public SeRuntimeProperties addServicePortRangesItem(PortRange servicePortRangesItem) {
    if (this.servicePortRanges == null) {
      this.servicePortRanges = new ArrayList<PortRange>();
    }
    this.servicePortRanges.add(servicePortRangesItem);
    return this;
  }

   /**
   * Port ranges on which there may be virtual services (for configuring iptables). Applicable in container ecosystems like Mesos.
   * @return servicePortRanges
  **/
  @Schema(description = "Port ranges on which there may be virtual services (for configuring iptables). Applicable in container ecosystems like Mesos.")
  public List<PortRange> getServicePortRanges() {
    return servicePortRanges;
  }

  public void setServicePortRanges(List<PortRange> servicePortRanges) {
    this.servicePortRanges = servicePortRanges;
  }

  public SeRuntimeProperties servicesAccessibleAllInterfaces(Boolean servicesAccessibleAllInterfaces) {
    this.servicesAccessibleAllInterfaces = servicesAccessibleAllInterfaces;
    return this;
  }

   /**
   * Make service ports accessible on all Host interfaces in addition to East-West VIP and/or bridge IP.
   * @return servicesAccessibleAllInterfaces
  **/
  @Schema(description = "Make service ports accessible on all Host interfaces in addition to East-West VIP and/or bridge IP.")
  public Boolean isServicesAccessibleAllInterfaces() {
    return servicesAccessibleAllInterfaces;
  }

  public void setServicesAccessibleAllInterfaces(Boolean servicesAccessibleAllInterfaces) {
    this.servicesAccessibleAllInterfaces = servicesAccessibleAllInterfaces;
  }

  public SeRuntimeProperties spdyFwdProxyParseEnable(Boolean spdyFwdProxyParseEnable) {
    this.spdyFwdProxyParseEnable = spdyFwdProxyParseEnable;
    return this;
  }

   /**
   * Placeholder for description of property spdy_fwd_proxy_parse_enable of obj type SeRuntimeProperties field type str  type boolean
   * @return spdyFwdProxyParseEnable
  **/
  @Schema(description = "Placeholder for description of property spdy_fwd_proxy_parse_enable of obj type SeRuntimeProperties field type str  type boolean")
  public Boolean isSpdyFwdProxyParseEnable() {
    return spdyFwdProxyParseEnable;
  }

  public void setSpdyFwdProxyParseEnable(Boolean spdyFwdProxyParseEnable) {
    this.spdyFwdProxyParseEnable = spdyFwdProxyParseEnable;
  }

  public SeRuntimeProperties tcpSynCacheMax(Integer tcpSynCacheMax) {
    this.tcpSynCacheMax = tcpSynCacheMax;
    return this;
  }

   /**
   * Maximum size of the SYN cache table. After this limit is reached, SYN cookies are used. This is per core of the serviceengine. Field deprecated in 17.2.5.
   * @return tcpSynCacheMax
  **/
  @Schema(description = "Maximum size of the SYN cache table. After this limit is reached, SYN cookies are used. This is per core of the serviceengine. Field deprecated in 17.2.5.")
  public Integer getTcpSynCacheMax() {
    return tcpSynCacheMax;
  }

  public void setTcpSynCacheMax(Integer tcpSynCacheMax) {
    this.tcpSynCacheMax = tcpSynCacheMax;
  }

  public SeRuntimeProperties tcpSyncacheMaxRetransmitDefault(Integer tcpSyncacheMaxRetransmitDefault) {
    this.tcpSyncacheMaxRetransmitDefault = tcpSyncacheMaxRetransmitDefault;
    return this;
  }

   /**
   * Default value for max number of retransmissions for a SYN packet.
   * @return tcpSyncacheMaxRetransmitDefault
  **/
  @Schema(description = "Default value for max number of retransmissions for a SYN packet.")
  public Integer getTcpSyncacheMaxRetransmitDefault() {
    return tcpSyncacheMaxRetransmitDefault;
  }

  public void setTcpSyncacheMaxRetransmitDefault(Integer tcpSyncacheMaxRetransmitDefault) {
    this.tcpSyncacheMaxRetransmitDefault = tcpSyncacheMaxRetransmitDefault;
  }

  public SeRuntimeProperties upstreamConnectTimeout(Integer upstreamConnectTimeout) {
    this.upstreamConnectTimeout = upstreamConnectTimeout;
    return this;
  }

   /**
   * Timeout for backend connection.
   * @return upstreamConnectTimeout
  **/
  @Schema(description = "Timeout for backend connection.")
  public Integer getUpstreamConnectTimeout() {
    return upstreamConnectTimeout;
  }

  public void setUpstreamConnectTimeout(Integer upstreamConnectTimeout) {
    this.upstreamConnectTimeout = upstreamConnectTimeout;
  }

  public SeRuntimeProperties upstreamConnpoolCacheThresh(Integer upstreamConnpoolCacheThresh) {
    this.upstreamConnpoolCacheThresh = upstreamConnpoolCacheThresh;
    return this;
  }

   /**
   * L7 Upstream Connection pool cache threshold in percentage.
   * @return upstreamConnpoolCacheThresh
  **/
  @Schema(description = "L7 Upstream Connection pool cache threshold in percentage.")
  public Integer getUpstreamConnpoolCacheThresh() {
    return upstreamConnpoolCacheThresh;
  }

  public void setUpstreamConnpoolCacheThresh(Integer upstreamConnpoolCacheThresh) {
    this.upstreamConnpoolCacheThresh = upstreamConnpoolCacheThresh;
  }

  public SeRuntimeProperties upstreamConnpoolConnIdleThreshTmo(Integer upstreamConnpoolConnIdleThreshTmo) {
    this.upstreamConnpoolConnIdleThreshTmo = upstreamConnpoolConnIdleThreshTmo;
    return this;
  }

   /**
   * Idle timeout value for a connection in the upstream connection pool, when the current cache size is above the threshold.
   * @return upstreamConnpoolConnIdleThreshTmo
  **/
  @Schema(description = "Idle timeout value for a connection in the upstream connection pool, when the current cache size is above the threshold.")
  public Integer getUpstreamConnpoolConnIdleThreshTmo() {
    return upstreamConnpoolConnIdleThreshTmo;
  }

  public void setUpstreamConnpoolConnIdleThreshTmo(Integer upstreamConnpoolConnIdleThreshTmo) {
    this.upstreamConnpoolConnIdleThreshTmo = upstreamConnpoolConnIdleThreshTmo;
  }

  public SeRuntimeProperties upstreamConnpoolConnIdleTmo(Integer upstreamConnpoolConnIdleTmo) {
    this.upstreamConnpoolConnIdleTmo = upstreamConnpoolConnIdleTmo;
    return this;
  }

   /**
   * Deprecated. Field deprecated in 18.2.1.
   * @return upstreamConnpoolConnIdleTmo
  **/
  @Schema(description = "Deprecated. Field deprecated in 18.2.1.")
  public Integer getUpstreamConnpoolConnIdleTmo() {
    return upstreamConnpoolConnIdleTmo;
  }

  public void setUpstreamConnpoolConnIdleTmo(Integer upstreamConnpoolConnIdleTmo) {
    this.upstreamConnpoolConnIdleTmo = upstreamConnpoolConnIdleTmo;
  }

  public SeRuntimeProperties upstreamConnpoolConnLifeTmo(Integer upstreamConnpoolConnLifeTmo) {
    this.upstreamConnpoolConnLifeTmo = upstreamConnpoolConnLifeTmo;
    return this;
  }

   /**
   * Deprecated. Field deprecated in 18.2.1.
   * @return upstreamConnpoolConnLifeTmo
  **/
  @Schema(description = "Deprecated. Field deprecated in 18.2.1.")
  public Integer getUpstreamConnpoolConnLifeTmo() {
    return upstreamConnpoolConnLifeTmo;
  }

  public void setUpstreamConnpoolConnLifeTmo(Integer upstreamConnpoolConnLifeTmo) {
    this.upstreamConnpoolConnLifeTmo = upstreamConnpoolConnLifeTmo;
  }

  public SeRuntimeProperties upstreamConnpoolConnMaxReuse(Integer upstreamConnpoolConnMaxReuse) {
    this.upstreamConnpoolConnMaxReuse = upstreamConnpoolConnMaxReuse;
    return this;
  }

   /**
   * Deprecated. Field deprecated in 18.2.1.
   * @return upstreamConnpoolConnMaxReuse
  **/
  @Schema(description = "Deprecated. Field deprecated in 18.2.1.")
  public Integer getUpstreamConnpoolConnMaxReuse() {
    return upstreamConnpoolConnMaxReuse;
  }

  public void setUpstreamConnpoolConnMaxReuse(Integer upstreamConnpoolConnMaxReuse) {
    this.upstreamConnpoolConnMaxReuse = upstreamConnpoolConnMaxReuse;
  }

  public SeRuntimeProperties upstreamConnpoolCoreMaxCache(Integer upstreamConnpoolCoreMaxCache) {
    this.upstreamConnpoolCoreMaxCache = upstreamConnpoolCoreMaxCache;
    return this;
  }

   /**
   * L7 Upstream Connection pool max cache size per core.
   * @return upstreamConnpoolCoreMaxCache
  **/
  @Schema(description = "L7 Upstream Connection pool max cache size per core.")
  public Integer getUpstreamConnpoolCoreMaxCache() {
    return upstreamConnpoolCoreMaxCache;
  }

  public void setUpstreamConnpoolCoreMaxCache(Integer upstreamConnpoolCoreMaxCache) {
    this.upstreamConnpoolCoreMaxCache = upstreamConnpoolCoreMaxCache;
  }

  public SeRuntimeProperties upstreamConnpoolEnable(Boolean upstreamConnpoolEnable) {
    this.upstreamConnpoolEnable = upstreamConnpoolEnable;
    return this;
  }

   /**
   * Enable upstream connection pool.
   * @return upstreamConnpoolEnable
  **/
  @Schema(description = "Enable upstream connection pool.")
  public Boolean isUpstreamConnpoolEnable() {
    return upstreamConnpoolEnable;
  }

  public void setUpstreamConnpoolEnable(Boolean upstreamConnpoolEnable) {
    this.upstreamConnpoolEnable = upstreamConnpoolEnable;
  }

  public SeRuntimeProperties upstreamConnpoolServerMaxCache(Integer upstreamConnpoolServerMaxCache) {
    this.upstreamConnpoolServerMaxCache = upstreamConnpoolServerMaxCache;
    return this;
  }

   /**
   * Deprecated. Field deprecated in 18.2.1.
   * @return upstreamConnpoolServerMaxCache
  **/
  @Schema(description = "Deprecated. Field deprecated in 18.2.1.")
  public Integer getUpstreamConnpoolServerMaxCache() {
    return upstreamConnpoolServerMaxCache;
  }

  public void setUpstreamConnpoolServerMaxCache(Integer upstreamConnpoolServerMaxCache) {
    this.upstreamConnpoolServerMaxCache = upstreamConnpoolServerMaxCache;
  }

  public SeRuntimeProperties upstreamConnpoolStrategy(Integer upstreamConnpoolStrategy) {
    this.upstreamConnpoolStrategy = upstreamConnpoolStrategy;
    return this;
  }

   /**
   * Number of upstream_connpool_strategy.
   * @return upstreamConnpoolStrategy
  **/
  @Schema(description = "Number of upstream_connpool_strategy.")
  public Integer getUpstreamConnpoolStrategy() {
    return upstreamConnpoolStrategy;
  }

  public void setUpstreamConnpoolStrategy(Integer upstreamConnpoolStrategy) {
    this.upstreamConnpoolStrategy = upstreamConnpoolStrategy;
  }

  public SeRuntimeProperties upstreamKeepalive(Boolean upstreamKeepalive) {
    this.upstreamKeepalive = upstreamKeepalive;
    return this;
  }

   /**
   * Placeholder for description of property upstream_keepalive of obj type SeRuntimeProperties field type str  type boolean
   * @return upstreamKeepalive
  **/
  @Schema(description = "Placeholder for description of property upstream_keepalive of obj type SeRuntimeProperties field type str  type boolean")
  public Boolean isUpstreamKeepalive() {
    return upstreamKeepalive;
  }

  public void setUpstreamKeepalive(Boolean upstreamKeepalive) {
    this.upstreamKeepalive = upstreamKeepalive;
  }

  public SeRuntimeProperties upstreamReadTimeout(Integer upstreamReadTimeout) {
    this.upstreamReadTimeout = upstreamReadTimeout;
    return this;
  }

   /**
   * Timeout for data to be received from backend.
   * @return upstreamReadTimeout
  **/
  @Schema(description = "Timeout for data to be received from backend.")
  public Integer getUpstreamReadTimeout() {
    return upstreamReadTimeout;
  }

  public void setUpstreamReadTimeout(Integer upstreamReadTimeout) {
    this.upstreamReadTimeout = upstreamReadTimeout;
  }

  public SeRuntimeProperties upstreamSendTimeout(Integer upstreamSendTimeout) {
    this.upstreamSendTimeout = upstreamSendTimeout;
    return this;
  }

   /**
   * Timeout for upstream to become writable.
   * @return upstreamSendTimeout
  **/
  @Schema(description = "Timeout for upstream to become writable.")
  public Integer getUpstreamSendTimeout() {
    return upstreamSendTimeout;
  }

  public void setUpstreamSendTimeout(Integer upstreamSendTimeout) {
    this.upstreamSendTimeout = upstreamSendTimeout;
  }

  public SeRuntimeProperties userDefinedMetricAge(Integer userDefinedMetricAge) {
    this.userDefinedMetricAge = userDefinedMetricAge;
    return this;
  }

   /**
   * Defines in seconds how long before an unused user-defined-metric is garbage collected. Field introduced in 17.1.5.
   * @return userDefinedMetricAge
  **/
  @Schema(description = "Defines in seconds how long before an unused user-defined-metric is garbage collected. Field introduced in 17.1.5.")
  public Integer getUserDefinedMetricAge() {
    return userDefinedMetricAge;
  }

  public void setUserDefinedMetricAge(Integer userDefinedMetricAge) {
    this.userDefinedMetricAge = userDefinedMetricAge;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SeRuntimeProperties seRuntimeProperties = (SeRuntimeProperties) o;
    return Objects.equals(this.adminSshEnabled, seRuntimeProperties.adminSshEnabled) &&
        Objects.equals(this.appHeaders, seRuntimeProperties.appHeaders) &&
        Objects.equals(this.baremetalDispatcherHandlesFlows, seRuntimeProperties.baremetalDispatcherHandlesFlows) &&
        Objects.equals(this.connectionsLossyLogRateLimiterThreshold, seRuntimeProperties.connectionsLossyLogRateLimiterThreshold) &&
        Objects.equals(this.connectionsUdfnfLogRateLimiterThreshold, seRuntimeProperties.connectionsUdfnfLogRateLimiterThreshold) &&
        Objects.equals(this.disableFlowProbes, seRuntimeProperties.disableFlowProbes) &&
        Objects.equals(this.disableGro, seRuntimeProperties.disableGro) &&
        Objects.equals(this.disableTso, seRuntimeProperties.disableTso) &&
        Objects.equals(this.dosProfile, seRuntimeProperties.dosProfile) &&
        Objects.equals(this.downstreamSendTimeout, seRuntimeProperties.downstreamSendTimeout) &&
        Objects.equals(this.dpAggressiveHbFrequency, seRuntimeProperties.dpAggressiveHbFrequency) &&
        Objects.equals(this.dpAggressiveHbTimeoutCount, seRuntimeProperties.dpAggressiveHbTimeoutCount) &&
        Objects.equals(this.dpHbFrequency, seRuntimeProperties.dpHbFrequency) &&
        Objects.equals(this.dpHbTimeoutCount, seRuntimeProperties.dpHbTimeoutCount) &&
        Objects.equals(this.dupipFrequency, seRuntimeProperties.dupipFrequency) &&
        Objects.equals(this.dupipTimeoutCount, seRuntimeProperties.dupipTimeoutCount) &&
        Objects.equals(this.enableHsmLog, seRuntimeProperties.enableHsmLog) &&
        Objects.equals(this.feproxyVipsEnableProxyArp, seRuntimeProperties.feproxyVipsEnableProxyArp) &&
        Objects.equals(this.flowTableBatchPushFrequency, seRuntimeProperties.flowTableBatchPushFrequency) &&
        Objects.equals(this.flowTableMaxEntriesDeprecated, seRuntimeProperties.flowTableMaxEntriesDeprecated) &&
        Objects.equals(this.flowTableNewSynMaxEntries, seRuntimeProperties.flowTableNewSynMaxEntries) &&
        Objects.equals(this.globalMtu, seRuntimeProperties.globalMtu) &&
        Objects.equals(this.httpRumConsoleLog, seRuntimeProperties.httpRumConsoleLog) &&
        Objects.equals(this.httpRumMinContentLength, seRuntimeProperties.httpRumMinContentLength) &&
        Objects.equals(this.lbBatchPushFrequency, seRuntimeProperties.lbBatchPushFrequency) &&
        Objects.equals(this.lbFailMaxTime, seRuntimeProperties.lbFailMaxTime) &&
        Objects.equals(this.lbactionNumRequestsToDispatch, seRuntimeProperties.lbactionNumRequestsToDispatch) &&
        Objects.equals(this.lbactionRqPerRequestMaxRetries, seRuntimeProperties.lbactionRqPerRequestMaxRetries) &&
        Objects.equals(this.logAgentCompressLogs, seRuntimeProperties.logAgentCompressLogs) &&
        Objects.equals(this.logAgentConnSendBufferSize, seRuntimeProperties.logAgentConnSendBufferSize) &&
        Objects.equals(this.logAgentExportMsgBufferSize, seRuntimeProperties.logAgentExportMsgBufferSize) &&
        Objects.equals(this.logAgentExportWaitTime, seRuntimeProperties.logAgentExportWaitTime) &&
        Objects.equals(this.logAgentFileSzAppl, seRuntimeProperties.logAgentFileSzAppl) &&
        Objects.equals(this.logAgentFileSzConn, seRuntimeProperties.logAgentFileSzConn) &&
        Objects.equals(this.logAgentFileSzDebug, seRuntimeProperties.logAgentFileSzDebug) &&
        Objects.equals(this.logAgentFileSzEvent, seRuntimeProperties.logAgentFileSzEvent) &&
        Objects.equals(this.logAgentLogStorageMinSz, seRuntimeProperties.logAgentLogStorageMinSz) &&
        Objects.equals(this.logAgentMaxActiveAdfFilesPerVs, seRuntimeProperties.logAgentMaxActiveAdfFilesPerVs) &&
        Objects.equals(this.logAgentMaxConcurrentRsync, seRuntimeProperties.logAgentMaxConcurrentRsync) &&
        Objects.equals(this.logAgentMaxLogmessageProtoSz, seRuntimeProperties.logAgentMaxLogmessageProtoSz) &&
        Objects.equals(this.logAgentMaxStorageExcessPercent, seRuntimeProperties.logAgentMaxStorageExcessPercent) &&
        Objects.equals(this.logAgentMaxStorageIgnorePercent, seRuntimeProperties.logAgentMaxStorageIgnorePercent) &&
        Objects.equals(this.logAgentMinStoragePerVs, seRuntimeProperties.logAgentMinStoragePerVs) &&
        Objects.equals(this.logAgentPauseInterval, seRuntimeProperties.logAgentPauseInterval) &&
        Objects.equals(this.logAgentSleepInterval, seRuntimeProperties.logAgentSleepInterval) &&
        Objects.equals(this.logAgentUnknownVsTimer, seRuntimeProperties.logAgentUnknownVsTimer) &&
        Objects.equals(this.logMessageMaxFileListSize, seRuntimeProperties.logMessageMaxFileListSize) &&
        Objects.equals(this.maxThroughput, seRuntimeProperties.maxThroughput) &&
        Objects.equals(this.mcacheEnabled, seRuntimeProperties.mcacheEnabled) &&
        Objects.equals(this.mcacheFetchEnabled, seRuntimeProperties.mcacheFetchEnabled) &&
        Objects.equals(this.mcacheMaxCacheSize, seRuntimeProperties.mcacheMaxCacheSize) &&
        Objects.equals(this.mcacheStoreInEnabled, seRuntimeProperties.mcacheStoreInEnabled) &&
        Objects.equals(this.mcacheStoreInMaxSize, seRuntimeProperties.mcacheStoreInMaxSize) &&
        Objects.equals(this.mcacheStoreInMinSize, seRuntimeProperties.mcacheStoreInMinSize) &&
        Objects.equals(this.mcacheStoreOutEnabled, seRuntimeProperties.mcacheStoreOutEnabled) &&
        Objects.equals(this.mcacheStoreSeMaxSize, seRuntimeProperties.mcacheStoreSeMaxSize) &&
        Objects.equals(this.ngxFreeConnectionStack, seRuntimeProperties.ngxFreeConnectionStack) &&
        Objects.equals(this.persistenceEntriesLowWatermark, seRuntimeProperties.persistenceEntriesLowWatermark) &&
        Objects.equals(this.persistenceMemMax, seRuntimeProperties.persistenceMemMax) &&
        Objects.equals(this.scaleoutUdpPerPkt, seRuntimeProperties.scaleoutUdpPerPkt) &&
        Objects.equals(this.seAuthLdapBindTimeout, seRuntimeProperties.seAuthLdapBindTimeout) &&
        Objects.equals(this.seAuthLdapCacheSize, seRuntimeProperties.seAuthLdapCacheSize) &&
        Objects.equals(this.seAuthLdapConnectTimeout, seRuntimeProperties.seAuthLdapConnectTimeout) &&
        Objects.equals(this.seAuthLdapConnsPerServer, seRuntimeProperties.seAuthLdapConnsPerServer) &&
        Objects.equals(this.seAuthLdapReconnectTimeout, seRuntimeProperties.seAuthLdapReconnectTimeout) &&
        Objects.equals(this.seAuthLdapRequestTimeout, seRuntimeProperties.seAuthLdapRequestTimeout) &&
        Objects.equals(this.seAuthLdapServersFailoverOnly, seRuntimeProperties.seAuthLdapServersFailoverOnly) &&
        Objects.equals(this.seDpCompression, seRuntimeProperties.seDpCompression) &&
        Objects.equals(this.seDpHmDrops, seRuntimeProperties.seDpHmDrops) &&
        Objects.equals(this.seDpIfStatePollInterval, seRuntimeProperties.seDpIfStatePollInterval) &&
        Objects.equals(this.seDpLogNfEnqueuePercent, seRuntimeProperties.seDpLogNfEnqueuePercent) &&
        Objects.equals(this.seDpLogUdfEnqueuePercent, seRuntimeProperties.seDpLogUdfEnqueuePercent) &&
        Objects.equals(this.seDpVnicQueueStallEventSleep, seRuntimeProperties.seDpVnicQueueStallEventSleep) &&
        Objects.equals(this.seDpVnicQueueStallThreshold, seRuntimeProperties.seDpVnicQueueStallThreshold) &&
        Objects.equals(this.seDpVnicQueueStallTimeout, seRuntimeProperties.seDpVnicQueueStallTimeout) &&
        Objects.equals(this.seDpVnicRestartOnQueueStallCount, seRuntimeProperties.seDpVnicRestartOnQueueStallCount) &&
        Objects.equals(this.seDpVnicStallSeRestartWindow, seRuntimeProperties.seDpVnicStallSeRestartWindow) &&
        Objects.equals(this.seDumpCoreOnAssert, seRuntimeProperties.seDumpCoreOnAssert) &&
        Objects.equals(this.seHandleInterfaceRoutes, seRuntimeProperties.seHandleInterfaceRoutes) &&
        Objects.equals(this.seHbPersistFudgeBits, seRuntimeProperties.seHbPersistFudgeBits) &&
        Objects.equals(this.seMacErrorThresholdToDisablePromiscious, seRuntimeProperties.seMacErrorThresholdToDisablePromiscious) &&
        Objects.equals(this.seMallocThresh, seRuntimeProperties.seMallocThresh) &&
        Objects.equals(this.seMemoryPoison, seRuntimeProperties.seMemoryPoison) &&
        Objects.equals(this.seMetricsInterval, seRuntimeProperties.seMetricsInterval) &&
        Objects.equals(this.seMetricsRtEnabled, seRuntimeProperties.seMetricsRtEnabled) &&
        Objects.equals(this.seMetricsRtInterval, seRuntimeProperties.seMetricsRtInterval) &&
        Objects.equals(this.sePacketBufferMax, seRuntimeProperties.sePacketBufferMax) &&
        Objects.equals(this.seRandomTcpDrops, seRuntimeProperties.seRandomTcpDrops) &&
        Objects.equals(this.seRateLimiters, seRuntimeProperties.seRateLimiters) &&
        Objects.equals(this.serviceIpSubnets, seRuntimeProperties.serviceIpSubnets) &&
        Objects.equals(this.servicePortRanges, seRuntimeProperties.servicePortRanges) &&
        Objects.equals(this.servicesAccessibleAllInterfaces, seRuntimeProperties.servicesAccessibleAllInterfaces) &&
        Objects.equals(this.spdyFwdProxyParseEnable, seRuntimeProperties.spdyFwdProxyParseEnable) &&
        Objects.equals(this.tcpSynCacheMax, seRuntimeProperties.tcpSynCacheMax) &&
        Objects.equals(this.tcpSyncacheMaxRetransmitDefault, seRuntimeProperties.tcpSyncacheMaxRetransmitDefault) &&
        Objects.equals(this.upstreamConnectTimeout, seRuntimeProperties.upstreamConnectTimeout) &&
        Objects.equals(this.upstreamConnpoolCacheThresh, seRuntimeProperties.upstreamConnpoolCacheThresh) &&
        Objects.equals(this.upstreamConnpoolConnIdleThreshTmo, seRuntimeProperties.upstreamConnpoolConnIdleThreshTmo) &&
        Objects.equals(this.upstreamConnpoolConnIdleTmo, seRuntimeProperties.upstreamConnpoolConnIdleTmo) &&
        Objects.equals(this.upstreamConnpoolConnLifeTmo, seRuntimeProperties.upstreamConnpoolConnLifeTmo) &&
        Objects.equals(this.upstreamConnpoolConnMaxReuse, seRuntimeProperties.upstreamConnpoolConnMaxReuse) &&
        Objects.equals(this.upstreamConnpoolCoreMaxCache, seRuntimeProperties.upstreamConnpoolCoreMaxCache) &&
        Objects.equals(this.upstreamConnpoolEnable, seRuntimeProperties.upstreamConnpoolEnable) &&
        Objects.equals(this.upstreamConnpoolServerMaxCache, seRuntimeProperties.upstreamConnpoolServerMaxCache) &&
        Objects.equals(this.upstreamConnpoolStrategy, seRuntimeProperties.upstreamConnpoolStrategy) &&
        Objects.equals(this.upstreamKeepalive, seRuntimeProperties.upstreamKeepalive) &&
        Objects.equals(this.upstreamReadTimeout, seRuntimeProperties.upstreamReadTimeout) &&
        Objects.equals(this.upstreamSendTimeout, seRuntimeProperties.upstreamSendTimeout) &&
        Objects.equals(this.userDefinedMetricAge, seRuntimeProperties.userDefinedMetricAge);
  }

  @Override
  public int hashCode() {
    return Objects.hash(adminSshEnabled, appHeaders, baremetalDispatcherHandlesFlows, connectionsLossyLogRateLimiterThreshold, connectionsUdfnfLogRateLimiterThreshold, disableFlowProbes, disableGro, disableTso, dosProfile, downstreamSendTimeout, dpAggressiveHbFrequency, dpAggressiveHbTimeoutCount, dpHbFrequency, dpHbTimeoutCount, dupipFrequency, dupipTimeoutCount, enableHsmLog, feproxyVipsEnableProxyArp, flowTableBatchPushFrequency, flowTableMaxEntriesDeprecated, flowTableNewSynMaxEntries, globalMtu, httpRumConsoleLog, httpRumMinContentLength, lbBatchPushFrequency, lbFailMaxTime, lbactionNumRequestsToDispatch, lbactionRqPerRequestMaxRetries, logAgentCompressLogs, logAgentConnSendBufferSize, logAgentExportMsgBufferSize, logAgentExportWaitTime, logAgentFileSzAppl, logAgentFileSzConn, logAgentFileSzDebug, logAgentFileSzEvent, logAgentLogStorageMinSz, logAgentMaxActiveAdfFilesPerVs, logAgentMaxConcurrentRsync, logAgentMaxLogmessageProtoSz, logAgentMaxStorageExcessPercent, logAgentMaxStorageIgnorePercent, logAgentMinStoragePerVs, logAgentPauseInterval, logAgentSleepInterval, logAgentUnknownVsTimer, logMessageMaxFileListSize, maxThroughput, mcacheEnabled, mcacheFetchEnabled, mcacheMaxCacheSize, mcacheStoreInEnabled, mcacheStoreInMaxSize, mcacheStoreInMinSize, mcacheStoreOutEnabled, mcacheStoreSeMaxSize, ngxFreeConnectionStack, persistenceEntriesLowWatermark, persistenceMemMax, scaleoutUdpPerPkt, seAuthLdapBindTimeout, seAuthLdapCacheSize, seAuthLdapConnectTimeout, seAuthLdapConnsPerServer, seAuthLdapReconnectTimeout, seAuthLdapRequestTimeout, seAuthLdapServersFailoverOnly, seDpCompression, seDpHmDrops, seDpIfStatePollInterval, seDpLogNfEnqueuePercent, seDpLogUdfEnqueuePercent, seDpVnicQueueStallEventSleep, seDpVnicQueueStallThreshold, seDpVnicQueueStallTimeout, seDpVnicRestartOnQueueStallCount, seDpVnicStallSeRestartWindow, seDumpCoreOnAssert, seHandleInterfaceRoutes, seHbPersistFudgeBits, seMacErrorThresholdToDisablePromiscious, seMallocThresh, seMemoryPoison, seMetricsInterval, seMetricsRtEnabled, seMetricsRtInterval, sePacketBufferMax, seRandomTcpDrops, seRateLimiters, serviceIpSubnets, servicePortRanges, servicesAccessibleAllInterfaces, spdyFwdProxyParseEnable, tcpSynCacheMax, tcpSyncacheMaxRetransmitDefault, upstreamConnectTimeout, upstreamConnpoolCacheThresh, upstreamConnpoolConnIdleThreshTmo, upstreamConnpoolConnIdleTmo, upstreamConnpoolConnLifeTmo, upstreamConnpoolConnMaxReuse, upstreamConnpoolCoreMaxCache, upstreamConnpoolEnable, upstreamConnpoolServerMaxCache, upstreamConnpoolStrategy, upstreamKeepalive, upstreamReadTimeout, upstreamSendTimeout, userDefinedMetricAge);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SeRuntimeProperties {\n");
    
    sb.append("    adminSshEnabled: ").append(toIndentedString(adminSshEnabled)).append("\n");
    sb.append("    appHeaders: ").append(toIndentedString(appHeaders)).append("\n");
    sb.append("    baremetalDispatcherHandlesFlows: ").append(toIndentedString(baremetalDispatcherHandlesFlows)).append("\n");
    sb.append("    connectionsLossyLogRateLimiterThreshold: ").append(toIndentedString(connectionsLossyLogRateLimiterThreshold)).append("\n");
    sb.append("    connectionsUdfnfLogRateLimiterThreshold: ").append(toIndentedString(connectionsUdfnfLogRateLimiterThreshold)).append("\n");
    sb.append("    disableFlowProbes: ").append(toIndentedString(disableFlowProbes)).append("\n");
    sb.append("    disableGro: ").append(toIndentedString(disableGro)).append("\n");
    sb.append("    disableTso: ").append(toIndentedString(disableTso)).append("\n");
    sb.append("    dosProfile: ").append(toIndentedString(dosProfile)).append("\n");
    sb.append("    downstreamSendTimeout: ").append(toIndentedString(downstreamSendTimeout)).append("\n");
    sb.append("    dpAggressiveHbFrequency: ").append(toIndentedString(dpAggressiveHbFrequency)).append("\n");
    sb.append("    dpAggressiveHbTimeoutCount: ").append(toIndentedString(dpAggressiveHbTimeoutCount)).append("\n");
    sb.append("    dpHbFrequency: ").append(toIndentedString(dpHbFrequency)).append("\n");
    sb.append("    dpHbTimeoutCount: ").append(toIndentedString(dpHbTimeoutCount)).append("\n");
    sb.append("    dupipFrequency: ").append(toIndentedString(dupipFrequency)).append("\n");
    sb.append("    dupipTimeoutCount: ").append(toIndentedString(dupipTimeoutCount)).append("\n");
    sb.append("    enableHsmLog: ").append(toIndentedString(enableHsmLog)).append("\n");
    sb.append("    feproxyVipsEnableProxyArp: ").append(toIndentedString(feproxyVipsEnableProxyArp)).append("\n");
    sb.append("    flowTableBatchPushFrequency: ").append(toIndentedString(flowTableBatchPushFrequency)).append("\n");
    sb.append("    flowTableMaxEntriesDeprecated: ").append(toIndentedString(flowTableMaxEntriesDeprecated)).append("\n");
    sb.append("    flowTableNewSynMaxEntries: ").append(toIndentedString(flowTableNewSynMaxEntries)).append("\n");
    sb.append("    globalMtu: ").append(toIndentedString(globalMtu)).append("\n");
    sb.append("    httpRumConsoleLog: ").append(toIndentedString(httpRumConsoleLog)).append("\n");
    sb.append("    httpRumMinContentLength: ").append(toIndentedString(httpRumMinContentLength)).append("\n");
    sb.append("    lbBatchPushFrequency: ").append(toIndentedString(lbBatchPushFrequency)).append("\n");
    sb.append("    lbFailMaxTime: ").append(toIndentedString(lbFailMaxTime)).append("\n");
    sb.append("    lbactionNumRequestsToDispatch: ").append(toIndentedString(lbactionNumRequestsToDispatch)).append("\n");
    sb.append("    lbactionRqPerRequestMaxRetries: ").append(toIndentedString(lbactionRqPerRequestMaxRetries)).append("\n");
    sb.append("    logAgentCompressLogs: ").append(toIndentedString(logAgentCompressLogs)).append("\n");
    sb.append("    logAgentConnSendBufferSize: ").append(toIndentedString(logAgentConnSendBufferSize)).append("\n");
    sb.append("    logAgentExportMsgBufferSize: ").append(toIndentedString(logAgentExportMsgBufferSize)).append("\n");
    sb.append("    logAgentExportWaitTime: ").append(toIndentedString(logAgentExportWaitTime)).append("\n");
    sb.append("    logAgentFileSzAppl: ").append(toIndentedString(logAgentFileSzAppl)).append("\n");
    sb.append("    logAgentFileSzConn: ").append(toIndentedString(logAgentFileSzConn)).append("\n");
    sb.append("    logAgentFileSzDebug: ").append(toIndentedString(logAgentFileSzDebug)).append("\n");
    sb.append("    logAgentFileSzEvent: ").append(toIndentedString(logAgentFileSzEvent)).append("\n");
    sb.append("    logAgentLogStorageMinSz: ").append(toIndentedString(logAgentLogStorageMinSz)).append("\n");
    sb.append("    logAgentMaxActiveAdfFilesPerVs: ").append(toIndentedString(logAgentMaxActiveAdfFilesPerVs)).append("\n");
    sb.append("    logAgentMaxConcurrentRsync: ").append(toIndentedString(logAgentMaxConcurrentRsync)).append("\n");
    sb.append("    logAgentMaxLogmessageProtoSz: ").append(toIndentedString(logAgentMaxLogmessageProtoSz)).append("\n");
    sb.append("    logAgentMaxStorageExcessPercent: ").append(toIndentedString(logAgentMaxStorageExcessPercent)).append("\n");
    sb.append("    logAgentMaxStorageIgnorePercent: ").append(toIndentedString(logAgentMaxStorageIgnorePercent)).append("\n");
    sb.append("    logAgentMinStoragePerVs: ").append(toIndentedString(logAgentMinStoragePerVs)).append("\n");
    sb.append("    logAgentPauseInterval: ").append(toIndentedString(logAgentPauseInterval)).append("\n");
    sb.append("    logAgentSleepInterval: ").append(toIndentedString(logAgentSleepInterval)).append("\n");
    sb.append("    logAgentUnknownVsTimer: ").append(toIndentedString(logAgentUnknownVsTimer)).append("\n");
    sb.append("    logMessageMaxFileListSize: ").append(toIndentedString(logMessageMaxFileListSize)).append("\n");
    sb.append("    maxThroughput: ").append(toIndentedString(maxThroughput)).append("\n");
    sb.append("    mcacheEnabled: ").append(toIndentedString(mcacheEnabled)).append("\n");
    sb.append("    mcacheFetchEnabled: ").append(toIndentedString(mcacheFetchEnabled)).append("\n");
    sb.append("    mcacheMaxCacheSize: ").append(toIndentedString(mcacheMaxCacheSize)).append("\n");
    sb.append("    mcacheStoreInEnabled: ").append(toIndentedString(mcacheStoreInEnabled)).append("\n");
    sb.append("    mcacheStoreInMaxSize: ").append(toIndentedString(mcacheStoreInMaxSize)).append("\n");
    sb.append("    mcacheStoreInMinSize: ").append(toIndentedString(mcacheStoreInMinSize)).append("\n");
    sb.append("    mcacheStoreOutEnabled: ").append(toIndentedString(mcacheStoreOutEnabled)).append("\n");
    sb.append("    mcacheStoreSeMaxSize: ").append(toIndentedString(mcacheStoreSeMaxSize)).append("\n");
    sb.append("    ngxFreeConnectionStack: ").append(toIndentedString(ngxFreeConnectionStack)).append("\n");
    sb.append("    persistenceEntriesLowWatermark: ").append(toIndentedString(persistenceEntriesLowWatermark)).append("\n");
    sb.append("    persistenceMemMax: ").append(toIndentedString(persistenceMemMax)).append("\n");
    sb.append("    scaleoutUdpPerPkt: ").append(toIndentedString(scaleoutUdpPerPkt)).append("\n");
    sb.append("    seAuthLdapBindTimeout: ").append(toIndentedString(seAuthLdapBindTimeout)).append("\n");
    sb.append("    seAuthLdapCacheSize: ").append(toIndentedString(seAuthLdapCacheSize)).append("\n");
    sb.append("    seAuthLdapConnectTimeout: ").append(toIndentedString(seAuthLdapConnectTimeout)).append("\n");
    sb.append("    seAuthLdapConnsPerServer: ").append(toIndentedString(seAuthLdapConnsPerServer)).append("\n");
    sb.append("    seAuthLdapReconnectTimeout: ").append(toIndentedString(seAuthLdapReconnectTimeout)).append("\n");
    sb.append("    seAuthLdapRequestTimeout: ").append(toIndentedString(seAuthLdapRequestTimeout)).append("\n");
    sb.append("    seAuthLdapServersFailoverOnly: ").append(toIndentedString(seAuthLdapServersFailoverOnly)).append("\n");
    sb.append("    seDpCompression: ").append(toIndentedString(seDpCompression)).append("\n");
    sb.append("    seDpHmDrops: ").append(toIndentedString(seDpHmDrops)).append("\n");
    sb.append("    seDpIfStatePollInterval: ").append(toIndentedString(seDpIfStatePollInterval)).append("\n");
    sb.append("    seDpLogNfEnqueuePercent: ").append(toIndentedString(seDpLogNfEnqueuePercent)).append("\n");
    sb.append("    seDpLogUdfEnqueuePercent: ").append(toIndentedString(seDpLogUdfEnqueuePercent)).append("\n");
    sb.append("    seDpVnicQueueStallEventSleep: ").append(toIndentedString(seDpVnicQueueStallEventSleep)).append("\n");
    sb.append("    seDpVnicQueueStallThreshold: ").append(toIndentedString(seDpVnicQueueStallThreshold)).append("\n");
    sb.append("    seDpVnicQueueStallTimeout: ").append(toIndentedString(seDpVnicQueueStallTimeout)).append("\n");
    sb.append("    seDpVnicRestartOnQueueStallCount: ").append(toIndentedString(seDpVnicRestartOnQueueStallCount)).append("\n");
    sb.append("    seDpVnicStallSeRestartWindow: ").append(toIndentedString(seDpVnicStallSeRestartWindow)).append("\n");
    sb.append("    seDumpCoreOnAssert: ").append(toIndentedString(seDumpCoreOnAssert)).append("\n");
    sb.append("    seHandleInterfaceRoutes: ").append(toIndentedString(seHandleInterfaceRoutes)).append("\n");
    sb.append("    seHbPersistFudgeBits: ").append(toIndentedString(seHbPersistFudgeBits)).append("\n");
    sb.append("    seMacErrorThresholdToDisablePromiscious: ").append(toIndentedString(seMacErrorThresholdToDisablePromiscious)).append("\n");
    sb.append("    seMallocThresh: ").append(toIndentedString(seMallocThresh)).append("\n");
    sb.append("    seMemoryPoison: ").append(toIndentedString(seMemoryPoison)).append("\n");
    sb.append("    seMetricsInterval: ").append(toIndentedString(seMetricsInterval)).append("\n");
    sb.append("    seMetricsRtEnabled: ").append(toIndentedString(seMetricsRtEnabled)).append("\n");
    sb.append("    seMetricsRtInterval: ").append(toIndentedString(seMetricsRtInterval)).append("\n");
    sb.append("    sePacketBufferMax: ").append(toIndentedString(sePacketBufferMax)).append("\n");
    sb.append("    seRandomTcpDrops: ").append(toIndentedString(seRandomTcpDrops)).append("\n");
    sb.append("    seRateLimiters: ").append(toIndentedString(seRateLimiters)).append("\n");
    sb.append("    serviceIpSubnets: ").append(toIndentedString(serviceIpSubnets)).append("\n");
    sb.append("    servicePortRanges: ").append(toIndentedString(servicePortRanges)).append("\n");
    sb.append("    servicesAccessibleAllInterfaces: ").append(toIndentedString(servicesAccessibleAllInterfaces)).append("\n");
    sb.append("    spdyFwdProxyParseEnable: ").append(toIndentedString(spdyFwdProxyParseEnable)).append("\n");
    sb.append("    tcpSynCacheMax: ").append(toIndentedString(tcpSynCacheMax)).append("\n");
    sb.append("    tcpSyncacheMaxRetransmitDefault: ").append(toIndentedString(tcpSyncacheMaxRetransmitDefault)).append("\n");
    sb.append("    upstreamConnectTimeout: ").append(toIndentedString(upstreamConnectTimeout)).append("\n");
    sb.append("    upstreamConnpoolCacheThresh: ").append(toIndentedString(upstreamConnpoolCacheThresh)).append("\n");
    sb.append("    upstreamConnpoolConnIdleThreshTmo: ").append(toIndentedString(upstreamConnpoolConnIdleThreshTmo)).append("\n");
    sb.append("    upstreamConnpoolConnIdleTmo: ").append(toIndentedString(upstreamConnpoolConnIdleTmo)).append("\n");
    sb.append("    upstreamConnpoolConnLifeTmo: ").append(toIndentedString(upstreamConnpoolConnLifeTmo)).append("\n");
    sb.append("    upstreamConnpoolConnMaxReuse: ").append(toIndentedString(upstreamConnpoolConnMaxReuse)).append("\n");
    sb.append("    upstreamConnpoolCoreMaxCache: ").append(toIndentedString(upstreamConnpoolCoreMaxCache)).append("\n");
    sb.append("    upstreamConnpoolEnable: ").append(toIndentedString(upstreamConnpoolEnable)).append("\n");
    sb.append("    upstreamConnpoolServerMaxCache: ").append(toIndentedString(upstreamConnpoolServerMaxCache)).append("\n");
    sb.append("    upstreamConnpoolStrategy: ").append(toIndentedString(upstreamConnpoolStrategy)).append("\n");
    sb.append("    upstreamKeepalive: ").append(toIndentedString(upstreamKeepalive)).append("\n");
    sb.append("    upstreamReadTimeout: ").append(toIndentedString(upstreamReadTimeout)).append("\n");
    sb.append("    upstreamSendTimeout: ").append(toIndentedString(upstreamSendTimeout)).append("\n");
    sb.append("    userDefinedMetricAge: ").append(toIndentedString(userDefinedMetricAge)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
