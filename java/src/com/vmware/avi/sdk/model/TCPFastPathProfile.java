/*
 * Avi avi_global_spec Object API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 20.1.1
 * Contact: support@avinetworks.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.vmware.avi.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.vmware.avi.sdk.model.DsrProfile;
import io.swagger.v3.oas.annotations.media.Schema;
/**
 * TCPFastPathProfile
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-03-12T12:27:26.755+05:30[Asia/Kolkata]")
public class TCPFastPathProfile {
  @JsonProperty("dsr_profile")
  private DsrProfile dsrProfile = null;

  @JsonProperty("enable_syn_protection")
  private Boolean enableSynProtection = null;

  @JsonProperty("session_idle_timeout")
  private Integer sessionIdleTimeout = 300;

  public TCPFastPathProfile dsrProfile(DsrProfile dsrProfile) {
    this.dsrProfile = dsrProfile;
    return this;
  }

   /**
   * Get dsrProfile
   * @return dsrProfile
  **/
  @Schema(description = "")
  public DsrProfile getDsrProfile() {
    return dsrProfile;
  }

  public void setDsrProfile(DsrProfile dsrProfile) {
    this.dsrProfile = dsrProfile;
  }

  public TCPFastPathProfile enableSynProtection(Boolean enableSynProtection) {
    this.enableSynProtection = enableSynProtection;
    return this;
  }

   /**
   * When enabled, Avi will complete the 3-way handshake with the client before forwarding any packets to the server.  This will protect the server from SYN flood and half open SYN connections.
   * @return enableSynProtection
  **/
  @Schema(description = "When enabled, Avi will complete the 3-way handshake with the client before forwarding any packets to the server.  This will protect the server from SYN flood and half open SYN connections.")
  public Boolean isEnableSynProtection() {
    return enableSynProtection;
  }

  public void setEnableSynProtection(Boolean enableSynProtection) {
    this.enableSynProtection = enableSynProtection;
  }

  public TCPFastPathProfile sessionIdleTimeout(Integer sessionIdleTimeout) {
    this.sessionIdleTimeout = sessionIdleTimeout;
    return this;
  }

   /**
   * The amount of time (in sec) for which a connection needs to be idle before it is eligible to be deleted. Allowed values are 5-14400. Special values are 0 - &#x27;infinite&#x27;.
   * @return sessionIdleTimeout
  **/
  @Schema(description = "The amount of time (in sec) for which a connection needs to be idle before it is eligible to be deleted. Allowed values are 5-14400. Special values are 0 - 'infinite'.")
  public Integer getSessionIdleTimeout() {
    return sessionIdleTimeout;
  }

  public void setSessionIdleTimeout(Integer sessionIdleTimeout) {
    this.sessionIdleTimeout = sessionIdleTimeout;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TCPFastPathProfile tcPFastPathProfile = (TCPFastPathProfile) o;
    return Objects.equals(this.dsrProfile, tcPFastPathProfile.dsrProfile) &&
        Objects.equals(this.enableSynProtection, tcPFastPathProfile.enableSynProtection) &&
        Objects.equals(this.sessionIdleTimeout, tcPFastPathProfile.sessionIdleTimeout);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dsrProfile, enableSynProtection, sessionIdleTimeout);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TCPFastPathProfile {\n");
    
    sb.append("    dsrProfile: ").append(toIndentedString(dsrProfile)).append("\n");
    sb.append("    enableSynProtection: ").append(toIndentedString(enableSynProtection)).append("\n");
    sb.append("    sessionIdleTimeout: ").append(toIndentedString(sessionIdleTimeout)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
