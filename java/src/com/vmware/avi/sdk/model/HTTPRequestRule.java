/*
 * Avi avi_global_spec Object API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 20.1.1
 * Contact: support@avinetworks.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.vmware.avi.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.vmware.avi.sdk.model.HTTPHdrAction;
import com.vmware.avi.sdk.model.HTTPRedirectAction;
import com.vmware.avi.sdk.model.HTTPRewriteURLAction;
import com.vmware.avi.sdk.model.HTTPSwitchingAction;
import com.vmware.avi.sdk.model.MatchTarget;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;
/**
 * HTTPRequestRule
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-03-12T12:27:26.755+05:30[Asia/Kolkata]")
public class HTTPRequestRule {
  @JsonProperty("all_headers")
  private Boolean allHeaders = null;

  @JsonProperty("enable")
  private Boolean enable = true;

  @JsonProperty("hdr_action")
  private List<HTTPHdrAction> hdrAction = null;

  @JsonProperty("index")
  private Integer index = null;

  @JsonProperty("log")
  private Boolean log = null;

  @JsonProperty("match")
  private MatchTarget match = null;

  @JsonProperty("name")
  private String name = null;

  @JsonProperty("redirect_action")
  private HTTPRedirectAction redirectAction = null;

  @JsonProperty("rewrite_url_action")
  private HTTPRewriteURLAction rewriteUrlAction = null;

  @JsonProperty("switching_action")
  private HTTPSwitchingAction switchingAction = null;

  public HTTPRequestRule allHeaders(Boolean allHeaders) {
    this.allHeaders = allHeaders;
    return this;
  }

   /**
   * Log all HTTP headers upon rule match.
   * @return allHeaders
  **/
  @Schema(description = "Log all HTTP headers upon rule match.")
  public Boolean isAllHeaders() {
    return allHeaders;
  }

  public void setAllHeaders(Boolean allHeaders) {
    this.allHeaders = allHeaders;
  }

  public HTTPRequestRule enable(Boolean enable) {
    this.enable = enable;
    return this;
  }

   /**
   * Enable or disable the rule.
   * @return enable
  **/
  @Schema(required = true, description = "Enable or disable the rule.")
  public Boolean isEnable() {
    return enable;
  }

  public void setEnable(Boolean enable) {
    this.enable = enable;
  }

  public HTTPRequestRule hdrAction(List<HTTPHdrAction> hdrAction) {
    this.hdrAction = hdrAction;
    return this;
  }

  public HTTPRequestRule addHdrActionItem(HTTPHdrAction hdrActionItem) {
    if (this.hdrAction == null) {
      this.hdrAction = new ArrayList<HTTPHdrAction>();
    }
    this.hdrAction.add(hdrActionItem);
    return this;
  }

   /**
   * HTTP header rewrite action.
   * @return hdrAction
  **/
  @Schema(description = "HTTP header rewrite action.")
  public List<HTTPHdrAction> getHdrAction() {
    return hdrAction;
  }

  public void setHdrAction(List<HTTPHdrAction> hdrAction) {
    this.hdrAction = hdrAction;
  }

  public HTTPRequestRule index(Integer index) {
    this.index = index;
    return this;
  }

   /**
   * Index of the rule.
   * @return index
  **/
  @Schema(required = true, description = "Index of the rule.")
  public Integer getIndex() {
    return index;
  }

  public void setIndex(Integer index) {
    this.index = index;
  }

  public HTTPRequestRule log(Boolean log) {
    this.log = log;
    return this;
  }

   /**
   * Log HTTP request upon rule match.
   * @return log
  **/
  @Schema(description = "Log HTTP request upon rule match.")
  public Boolean isLog() {
    return log;
  }

  public void setLog(Boolean log) {
    this.log = log;
  }

  public HTTPRequestRule match(MatchTarget match) {
    this.match = match;
    return this;
  }

   /**
   * Get match
   * @return match
  **/
  @Schema(description = "")
  public MatchTarget getMatch() {
    return match;
  }

  public void setMatch(MatchTarget match) {
    this.match = match;
  }

  public HTTPRequestRule name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Name of the rule.
   * @return name
  **/
  @Schema(required = true, description = "Name of the rule.")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public HTTPRequestRule redirectAction(HTTPRedirectAction redirectAction) {
    this.redirectAction = redirectAction;
    return this;
  }

   /**
   * Get redirectAction
   * @return redirectAction
  **/
  @Schema(description = "")
  public HTTPRedirectAction getRedirectAction() {
    return redirectAction;
  }

  public void setRedirectAction(HTTPRedirectAction redirectAction) {
    this.redirectAction = redirectAction;
  }

  public HTTPRequestRule rewriteUrlAction(HTTPRewriteURLAction rewriteUrlAction) {
    this.rewriteUrlAction = rewriteUrlAction;
    return this;
  }

   /**
   * Get rewriteUrlAction
   * @return rewriteUrlAction
  **/
  @Schema(description = "")
  public HTTPRewriteURLAction getRewriteUrlAction() {
    return rewriteUrlAction;
  }

  public void setRewriteUrlAction(HTTPRewriteURLAction rewriteUrlAction) {
    this.rewriteUrlAction = rewriteUrlAction;
  }

  public HTTPRequestRule switchingAction(HTTPSwitchingAction switchingAction) {
    this.switchingAction = switchingAction;
    return this;
  }

   /**
   * Get switchingAction
   * @return switchingAction
  **/
  @Schema(description = "")
  public HTTPSwitchingAction getSwitchingAction() {
    return switchingAction;
  }

  public void setSwitchingAction(HTTPSwitchingAction switchingAction) {
    this.switchingAction = switchingAction;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HTTPRequestRule htTPRequestRule = (HTTPRequestRule) o;
    return Objects.equals(this.allHeaders, htTPRequestRule.allHeaders) &&
        Objects.equals(this.enable, htTPRequestRule.enable) &&
        Objects.equals(this.hdrAction, htTPRequestRule.hdrAction) &&
        Objects.equals(this.index, htTPRequestRule.index) &&
        Objects.equals(this.log, htTPRequestRule.log) &&
        Objects.equals(this.match, htTPRequestRule.match) &&
        Objects.equals(this.name, htTPRequestRule.name) &&
        Objects.equals(this.redirectAction, htTPRequestRule.redirectAction) &&
        Objects.equals(this.rewriteUrlAction, htTPRequestRule.rewriteUrlAction) &&
        Objects.equals(this.switchingAction, htTPRequestRule.switchingAction);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allHeaders, enable, hdrAction, index, log, match, name, redirectAction, rewriteUrlAction, switchingAction);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HTTPRequestRule {\n");
    
    sb.append("    allHeaders: ").append(toIndentedString(allHeaders)).append("\n");
    sb.append("    enable: ").append(toIndentedString(enable)).append("\n");
    sb.append("    hdrAction: ").append(toIndentedString(hdrAction)).append("\n");
    sb.append("    index: ").append(toIndentedString(index)).append("\n");
    sb.append("    log: ").append(toIndentedString(log)).append("\n");
    sb.append("    match: ").append(toIndentedString(match)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    redirectAction: ").append(toIndentedString(redirectAction)).append("\n");
    sb.append("    rewriteUrlAction: ").append(toIndentedString(rewriteUrlAction)).append("\n");
    sb.append("    switchingAction: ").append(toIndentedString(switchingAction)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
