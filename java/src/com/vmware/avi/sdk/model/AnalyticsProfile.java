/*
 * Avi avi_global_spec Object API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 20.1.1
 * Contact: support@avinetworks.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.vmware.avi.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.vmware.avi.sdk.model.ClientLogConfiguration;
import com.vmware.avi.sdk.model.ClientLogStreamingConfig;
import com.vmware.avi.sdk.model.HTTPStatusRange;
import com.vmware.avi.sdk.model.SensitiveLogProfile;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;
/**
 * AnalyticsProfile
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-03-12T12:27:26.755+05:30[Asia/Kolkata]")
public class AnalyticsProfile {
  @JsonProperty("_last_modified")
  private String _lastModified = null;

  @JsonProperty("apdex_response_threshold")
  private Integer apdexResponseThreshold = 500;

  @JsonProperty("apdex_response_tolerated_factor")
  private Double apdexResponseToleratedFactor = 4.0d;

  @JsonProperty("apdex_rtt_threshold")
  private Integer apdexRttThreshold = 250;

  @JsonProperty("apdex_rtt_tolerated_factor")
  private Double apdexRttToleratedFactor = 4.0d;

  @JsonProperty("apdex_rum_threshold")
  private Integer apdexRumThreshold = 5000;

  @JsonProperty("apdex_rum_tolerated_factor")
  private Double apdexRumToleratedFactor = 4.0d;

  @JsonProperty("apdex_server_response_threshold")
  private Integer apdexServerResponseThreshold = 400;

  @JsonProperty("apdex_server_response_tolerated_factor")
  private Double apdexServerResponseToleratedFactor = 4.0d;

  @JsonProperty("apdex_server_rtt_threshold")
  private Integer apdexServerRttThreshold = 125;

  @JsonProperty("apdex_server_rtt_tolerated_factor")
  private Double apdexServerRttToleratedFactor = 4.0d;

  @JsonProperty("client_log_config")
  private ClientLogConfiguration clientLogConfig = null;

  @JsonProperty("client_log_streaming_config")
  private ClientLogStreamingConfig clientLogStreamingConfig = null;

  @JsonProperty("conn_lossy_ooo_threshold")
  private Integer connLossyOooThreshold = 50;

  @JsonProperty("conn_lossy_timeo_rexmt_threshold")
  private Integer connLossyTimeoRexmtThreshold = 20;

  @JsonProperty("conn_lossy_total_rexmt_threshold")
  private Integer connLossyTotalRexmtThreshold = 50;

  @JsonProperty("conn_lossy_zero_win_size_event_threshold")
  private Integer connLossyZeroWinSizeEventThreshold = 2;

  @JsonProperty("conn_server_lossy_ooo_threshold")
  private Integer connServerLossyOooThreshold = 50;

  @JsonProperty("conn_server_lossy_timeo_rexmt_threshold")
  private Integer connServerLossyTimeoRexmtThreshold = 20;

  @JsonProperty("conn_server_lossy_total_rexmt_threshold")
  private Integer connServerLossyTotalRexmtThreshold = 50;

  @JsonProperty("conn_server_lossy_zero_win_size_event_threshold")
  private Integer connServerLossyZeroWinSizeEventThreshold = 2;

  @JsonProperty("description")
  private String description = null;

  @JsonProperty("disable_ondemand_metrics")
  private Boolean disableOndemandMetrics = null;

  @JsonProperty("disable_se_analytics")
  private Boolean disableSeAnalytics = null;

  @JsonProperty("disable_server_analytics")
  private Boolean disableServerAnalytics = null;

  @JsonProperty("disable_vs_analytics")
  private Boolean disableVsAnalytics = null;

  @JsonProperty("enable_advanced_analytics")
  private Boolean enableAdvancedAnalytics = true;

  @JsonProperty("exclude_client_close_before_request_as_error")
  private Boolean excludeClientCloseBeforeRequestAsError = null;

  @JsonProperty("exclude_dns_policy_drop_as_significant")
  private Boolean excludeDnsPolicyDropAsSignificant = null;

  @JsonProperty("exclude_gs_down_as_error")
  private Boolean excludeGsDownAsError = null;

  @JsonProperty("exclude_http_error_codes")
  private List<Integer> excludeHttpErrorCodes = null;

  @JsonProperty("exclude_invalid_dns_domain_as_error")
  private Boolean excludeInvalidDnsDomainAsError = null;

  @JsonProperty("exclude_invalid_dns_query_as_error")
  private Boolean excludeInvalidDnsQueryAsError = null;

  @JsonProperty("exclude_no_dns_record_as_error")
  private Boolean excludeNoDnsRecordAsError = null;

  @JsonProperty("exclude_no_valid_gs_member_as_error")
  private Boolean excludeNoValidGsMemberAsError = null;

  @JsonProperty("exclude_persistence_change_as_error")
  private Boolean excludePersistenceChangeAsError = null;

  @JsonProperty("exclude_server_dns_error_as_error")
  private Boolean excludeServerDnsErrorAsError = null;

  @JsonProperty("exclude_server_tcp_reset_as_error")
  private Boolean excludeServerTcpResetAsError = null;

  @JsonProperty("exclude_sip_error_codes")
  private List<Integer> excludeSipErrorCodes = null;

  @JsonProperty("exclude_syn_retransmit_as_error")
  private Boolean excludeSynRetransmitAsError = null;

  @JsonProperty("exclude_tcp_reset_as_error")
  private Boolean excludeTcpResetAsError = null;

  @JsonProperty("exclude_unsupported_dns_query_as_error")
  private Boolean excludeUnsupportedDnsQueryAsError = null;

  @JsonProperty("healthscore_max_server_limit")
  private Integer healthscoreMaxServerLimit = 20;

  @JsonProperty("hs_event_throttle_window")
  private Integer hsEventThrottleWindow = 1209600;

  @JsonProperty("hs_max_anomaly_penalty")
  private Integer hsMaxAnomalyPenalty = 10;

  @JsonProperty("hs_max_resources_penalty")
  private Integer hsMaxResourcesPenalty = 25;

  @JsonProperty("hs_max_security_penalty")
  private Integer hsMaxSecurityPenalty = 100;

  @JsonProperty("hs_min_dos_rate")
  private Integer hsMinDosRate = 1000;

  @JsonProperty("hs_performance_boost")
  private Integer hsPerformanceBoost = null;

  @JsonProperty("hs_pscore_traffic_threshold_l4_client")
  private Double hsPscoreTrafficThresholdL4Client = 10.0d;

  @JsonProperty("hs_pscore_traffic_threshold_l4_server")
  private Double hsPscoreTrafficThresholdL4Server = 10.0d;

  @JsonProperty("hs_security_certscore_expired")
  private Double hsSecurityCertscoreExpired = null;

  @JsonProperty("hs_security_certscore_gt30d")
  private Double hsSecurityCertscoreGt30d = 5.0d;

  @JsonProperty("hs_security_certscore_le07d")
  private Double hsSecurityCertscoreLe07d = 2.0d;

  @JsonProperty("hs_security_certscore_le30d")
  private Double hsSecurityCertscoreLe30d = 4.0d;

  @JsonProperty("hs_security_chain_invalidity_penalty")
  private Double hsSecurityChainInvalidityPenalty = 1.0d;

  @JsonProperty("hs_security_cipherscore_eq000b")
  private Double hsSecurityCipherscoreEq000b = null;

  @JsonProperty("hs_security_cipherscore_ge128b")
  private Double hsSecurityCipherscoreGe128b = 5.0d;

  @JsonProperty("hs_security_cipherscore_lt128b")
  private Double hsSecurityCipherscoreLt128b = 3.5d;

  @JsonProperty("hs_security_encalgo_score_none")
  private Double hsSecurityEncalgoScoreNone = null;

  @JsonProperty("hs_security_encalgo_score_rc4")
  private Double hsSecurityEncalgoScoreRc4 = 2.5d;

  @JsonProperty("hs_security_hsts_penalty")
  private Double hsSecurityHstsPenalty = 1.0d;

  @JsonProperty("hs_security_nonpfs_penalty")
  private Double hsSecurityNonpfsPenalty = 1.0d;

  @JsonProperty("hs_security_selfsignedcert_penalty")
  private Double hsSecuritySelfsignedcertPenalty = 1.0d;

  @JsonProperty("hs_security_ssl30_score")
  private Double hsSecuritySsl30Score = 3.5d;

  @JsonProperty("hs_security_tls10_score")
  private Double hsSecurityTls10Score = 5.0d;

  @JsonProperty("hs_security_tls11_score")
  private Double hsSecurityTls11Score = 5.0d;

  @JsonProperty("hs_security_tls12_score")
  private Double hsSecurityTls12Score = 5.0d;

  @JsonProperty("hs_security_tls13_score")
  private Double hsSecurityTls13Score = 5.0d;

  @JsonProperty("hs_security_weak_signature_algo_penalty")
  private Double hsSecurityWeakSignatureAlgoPenalty = 1.0d;

  @JsonProperty("name")
  private String name = null;

  @JsonProperty("ondemand_metrics_idle_timeout")
  private Integer ondemandMetricsIdleTimeout = 1800;

  @JsonProperty("ranges")
  private List<HTTPStatusRange> ranges = null;

  @JsonProperty("resp_code_block")
  private List<String> respCodeBlock = null;

  @JsonProperty("sensitive_log_profile")
  private SensitiveLogProfile sensitiveLogProfile = null;

  @JsonProperty("sip_log_depth")
  private Integer sipLogDepth = 20;

  @JsonProperty("tenant_ref")
  private String tenantRef = null;

  @JsonProperty("url")
  private String url = null;

  @JsonProperty("uuid")
  private String uuid = null;

   /**
   * UNIX time since epoch in microseconds. Units(MICROSECONDS).
   * @return _lastModified
  **/
  @Schema(description = "UNIX time since epoch in microseconds. Units(MICROSECONDS).")
  public String getLastModified() {
    return _lastModified;
  }

  public AnalyticsProfile apdexResponseThreshold(Integer apdexResponseThreshold) {
    this.apdexResponseThreshold = apdexResponseThreshold;
    return this;
  }

   /**
   * If a client receives an HTTP response in less than the Satisfactory Latency Threshold, the request is considered Satisfied. It is considered Tolerated if it is not Satisfied and less than Tolerated Latency Factor multiplied by the Satisfactory Latency Threshold. Greater than this number and the client&#x27;s request is considered Frustrated. Allowed values are 1-30000.
   * @return apdexResponseThreshold
  **/
  @Schema(description = "If a client receives an HTTP response in less than the Satisfactory Latency Threshold, the request is considered Satisfied. It is considered Tolerated if it is not Satisfied and less than Tolerated Latency Factor multiplied by the Satisfactory Latency Threshold. Greater than this number and the client's request is considered Frustrated. Allowed values are 1-30000.")
  public Integer getApdexResponseThreshold() {
    return apdexResponseThreshold;
  }

  public void setApdexResponseThreshold(Integer apdexResponseThreshold) {
    this.apdexResponseThreshold = apdexResponseThreshold;
  }

  public AnalyticsProfile apdexResponseToleratedFactor(Double apdexResponseToleratedFactor) {
    this.apdexResponseToleratedFactor = apdexResponseToleratedFactor;
    return this;
  }

   /**
   * Client tolerated response latency factor. Client must receive a response within this factor times the satisfactory threshold (apdex_response_threshold) to be considered tolerated. Allowed values are 1-1000.
   * @return apdexResponseToleratedFactor
  **/
  @Schema(description = "Client tolerated response latency factor. Client must receive a response within this factor times the satisfactory threshold (apdex_response_threshold) to be considered tolerated. Allowed values are 1-1000.")
  public Double getApdexResponseToleratedFactor() {
    return apdexResponseToleratedFactor;
  }

  public void setApdexResponseToleratedFactor(Double apdexResponseToleratedFactor) {
    this.apdexResponseToleratedFactor = apdexResponseToleratedFactor;
  }

  public AnalyticsProfile apdexRttThreshold(Integer apdexRttThreshold) {
    this.apdexRttThreshold = apdexRttThreshold;
    return this;
  }

   /**
   * Satisfactory client to Avi Round Trip Time(RTT). Allowed values are 1-2000.
   * @return apdexRttThreshold
  **/
  @Schema(description = "Satisfactory client to Avi Round Trip Time(RTT). Allowed values are 1-2000.")
  public Integer getApdexRttThreshold() {
    return apdexRttThreshold;
  }

  public void setApdexRttThreshold(Integer apdexRttThreshold) {
    this.apdexRttThreshold = apdexRttThreshold;
  }

  public AnalyticsProfile apdexRttToleratedFactor(Double apdexRttToleratedFactor) {
    this.apdexRttToleratedFactor = apdexRttToleratedFactor;
    return this;
  }

   /**
   * Tolerated client to Avi Round Trip Time(RTT) factor.  It is a multiple of apdex_rtt_tolerated_factor. Allowed values are 1-1000.
   * @return apdexRttToleratedFactor
  **/
  @Schema(description = "Tolerated client to Avi Round Trip Time(RTT) factor.  It is a multiple of apdex_rtt_tolerated_factor. Allowed values are 1-1000.")
  public Double getApdexRttToleratedFactor() {
    return apdexRttToleratedFactor;
  }

  public void setApdexRttToleratedFactor(Double apdexRttToleratedFactor) {
    this.apdexRttToleratedFactor = apdexRttToleratedFactor;
  }

  public AnalyticsProfile apdexRumThreshold(Integer apdexRumThreshold) {
    this.apdexRumThreshold = apdexRumThreshold;
    return this;
  }

   /**
   * If a client is able to load a page in less than the Satisfactory Latency Threshold, the PageLoad is considered Satisfied.  It is considered tolerated if it is greater than Satisfied but less than the Tolerated Latency multiplied by Satisifed Latency. Greater than this number and the client&#x27;s request is considered Frustrated.  A PageLoad includes the time for DNS lookup, download of all HTTP objects, and page render time. Allowed values are 1-30000.
   * @return apdexRumThreshold
  **/
  @Schema(description = "If a client is able to load a page in less than the Satisfactory Latency Threshold, the PageLoad is considered Satisfied.  It is considered tolerated if it is greater than Satisfied but less than the Tolerated Latency multiplied by Satisifed Latency. Greater than this number and the client's request is considered Frustrated.  A PageLoad includes the time for DNS lookup, download of all HTTP objects, and page render time. Allowed values are 1-30000.")
  public Integer getApdexRumThreshold() {
    return apdexRumThreshold;
  }

  public void setApdexRumThreshold(Integer apdexRumThreshold) {
    this.apdexRumThreshold = apdexRumThreshold;
  }

  public AnalyticsProfile apdexRumToleratedFactor(Double apdexRumToleratedFactor) {
    this.apdexRumToleratedFactor = apdexRumToleratedFactor;
    return this;
  }

   /**
   * Virtual service threshold factor for tolerated Page Load Time (PLT) as multiple of apdex_rum_threshold. Allowed values are 1-1000.
   * @return apdexRumToleratedFactor
  **/
  @Schema(description = "Virtual service threshold factor for tolerated Page Load Time (PLT) as multiple of apdex_rum_threshold. Allowed values are 1-1000.")
  public Double getApdexRumToleratedFactor() {
    return apdexRumToleratedFactor;
  }

  public void setApdexRumToleratedFactor(Double apdexRumToleratedFactor) {
    this.apdexRumToleratedFactor = apdexRumToleratedFactor;
  }

  public AnalyticsProfile apdexServerResponseThreshold(Integer apdexServerResponseThreshold) {
    this.apdexServerResponseThreshold = apdexServerResponseThreshold;
    return this;
  }

   /**
   * A server HTTP response is considered Satisfied if latency is less than the Satisfactory Latency Threshold. The response is considered tolerated when it is greater than Satisfied but less than the Tolerated Latency Factor * S_Latency.  Greater than this number and the server response is considered Frustrated. Allowed values are 1-30000.
   * @return apdexServerResponseThreshold
  **/
  @Schema(description = "A server HTTP response is considered Satisfied if latency is less than the Satisfactory Latency Threshold. The response is considered tolerated when it is greater than Satisfied but less than the Tolerated Latency Factor * S_Latency.  Greater than this number and the server response is considered Frustrated. Allowed values are 1-30000.")
  public Integer getApdexServerResponseThreshold() {
    return apdexServerResponseThreshold;
  }

  public void setApdexServerResponseThreshold(Integer apdexServerResponseThreshold) {
    this.apdexServerResponseThreshold = apdexServerResponseThreshold;
  }

  public AnalyticsProfile apdexServerResponseToleratedFactor(Double apdexServerResponseToleratedFactor) {
    this.apdexServerResponseToleratedFactor = apdexServerResponseToleratedFactor;
    return this;
  }

   /**
   * Server tolerated response latency factor. Servermust response within this factor times the satisfactory threshold (apdex_server_response_threshold) to be considered tolerated. Allowed values are 1-1000.
   * @return apdexServerResponseToleratedFactor
  **/
  @Schema(description = "Server tolerated response latency factor. Servermust response within this factor times the satisfactory threshold (apdex_server_response_threshold) to be considered tolerated. Allowed values are 1-1000.")
  public Double getApdexServerResponseToleratedFactor() {
    return apdexServerResponseToleratedFactor;
  }

  public void setApdexServerResponseToleratedFactor(Double apdexServerResponseToleratedFactor) {
    this.apdexServerResponseToleratedFactor = apdexServerResponseToleratedFactor;
  }

  public AnalyticsProfile apdexServerRttThreshold(Integer apdexServerRttThreshold) {
    this.apdexServerRttThreshold = apdexServerRttThreshold;
    return this;
  }

   /**
   * Satisfactory client to Avi Round Trip Time(RTT). Allowed values are 1-2000.
   * @return apdexServerRttThreshold
  **/
  @Schema(description = "Satisfactory client to Avi Round Trip Time(RTT). Allowed values are 1-2000.")
  public Integer getApdexServerRttThreshold() {
    return apdexServerRttThreshold;
  }

  public void setApdexServerRttThreshold(Integer apdexServerRttThreshold) {
    this.apdexServerRttThreshold = apdexServerRttThreshold;
  }

  public AnalyticsProfile apdexServerRttToleratedFactor(Double apdexServerRttToleratedFactor) {
    this.apdexServerRttToleratedFactor = apdexServerRttToleratedFactor;
    return this;
  }

   /**
   * Tolerated client to Avi Round Trip Time(RTT) factor.  It is a multiple of apdex_rtt_tolerated_factor. Allowed values are 1-1000.
   * @return apdexServerRttToleratedFactor
  **/
  @Schema(description = "Tolerated client to Avi Round Trip Time(RTT) factor.  It is a multiple of apdex_rtt_tolerated_factor. Allowed values are 1-1000.")
  public Double getApdexServerRttToleratedFactor() {
    return apdexServerRttToleratedFactor;
  }

  public void setApdexServerRttToleratedFactor(Double apdexServerRttToleratedFactor) {
    this.apdexServerRttToleratedFactor = apdexServerRttToleratedFactor;
  }

  public AnalyticsProfile clientLogConfig(ClientLogConfiguration clientLogConfig) {
    this.clientLogConfig = clientLogConfig;
    return this;
  }

   /**
   * Get clientLogConfig
   * @return clientLogConfig
  **/
  @Schema(description = "")
  public ClientLogConfiguration getClientLogConfig() {
    return clientLogConfig;
  }

  public void setClientLogConfig(ClientLogConfiguration clientLogConfig) {
    this.clientLogConfig = clientLogConfig;
  }

  public AnalyticsProfile clientLogStreamingConfig(ClientLogStreamingConfig clientLogStreamingConfig) {
    this.clientLogStreamingConfig = clientLogStreamingConfig;
    return this;
  }

   /**
   * Get clientLogStreamingConfig
   * @return clientLogStreamingConfig
  **/
  @Schema(description = "")
  public ClientLogStreamingConfig getClientLogStreamingConfig() {
    return clientLogStreamingConfig;
  }

  public void setClientLogStreamingConfig(ClientLogStreamingConfig clientLogStreamingConfig) {
    this.clientLogStreamingConfig = clientLogStreamingConfig;
  }

  public AnalyticsProfile connLossyOooThreshold(Integer connLossyOooThreshold) {
    this.connLossyOooThreshold = connLossyOooThreshold;
    return this;
  }

   /**
   * A connection between client and Avi is considered lossy when more than this percentage of out of order packets are received. Allowed values are 1-100.
   * @return connLossyOooThreshold
  **/
  @Schema(description = "A connection between client and Avi is considered lossy when more than this percentage of out of order packets are received. Allowed values are 1-100.")
  public Integer getConnLossyOooThreshold() {
    return connLossyOooThreshold;
  }

  public void setConnLossyOooThreshold(Integer connLossyOooThreshold) {
    this.connLossyOooThreshold = connLossyOooThreshold;
  }

  public AnalyticsProfile connLossyTimeoRexmtThreshold(Integer connLossyTimeoRexmtThreshold) {
    this.connLossyTimeoRexmtThreshold = connLossyTimeoRexmtThreshold;
    return this;
  }

   /**
   * A connection between client and Avi is considered lossy when more than this percentage of packets are retransmitted due to timeout. Allowed values are 1-100.
   * @return connLossyTimeoRexmtThreshold
  **/
  @Schema(description = "A connection between client and Avi is considered lossy when more than this percentage of packets are retransmitted due to timeout. Allowed values are 1-100.")
  public Integer getConnLossyTimeoRexmtThreshold() {
    return connLossyTimeoRexmtThreshold;
  }

  public void setConnLossyTimeoRexmtThreshold(Integer connLossyTimeoRexmtThreshold) {
    this.connLossyTimeoRexmtThreshold = connLossyTimeoRexmtThreshold;
  }

  public AnalyticsProfile connLossyTotalRexmtThreshold(Integer connLossyTotalRexmtThreshold) {
    this.connLossyTotalRexmtThreshold = connLossyTotalRexmtThreshold;
    return this;
  }

   /**
   * A connection between client and Avi is considered lossy when more than this percentage of packets are retransmitted. Allowed values are 1-100.
   * @return connLossyTotalRexmtThreshold
  **/
  @Schema(description = "A connection between client and Avi is considered lossy when more than this percentage of packets are retransmitted. Allowed values are 1-100.")
  public Integer getConnLossyTotalRexmtThreshold() {
    return connLossyTotalRexmtThreshold;
  }

  public void setConnLossyTotalRexmtThreshold(Integer connLossyTotalRexmtThreshold) {
    this.connLossyTotalRexmtThreshold = connLossyTotalRexmtThreshold;
  }

  public AnalyticsProfile connLossyZeroWinSizeEventThreshold(Integer connLossyZeroWinSizeEventThreshold) {
    this.connLossyZeroWinSizeEventThreshold = connLossyZeroWinSizeEventThreshold;
    return this;
  }

   /**
   * A client connection is considered lossy when percentage of times a packet could not be trasmitted due to TCP zero window is above this threshold. Allowed values are 0-100.
   * @return connLossyZeroWinSizeEventThreshold
  **/
  @Schema(description = "A client connection is considered lossy when percentage of times a packet could not be trasmitted due to TCP zero window is above this threshold. Allowed values are 0-100.")
  public Integer getConnLossyZeroWinSizeEventThreshold() {
    return connLossyZeroWinSizeEventThreshold;
  }

  public void setConnLossyZeroWinSizeEventThreshold(Integer connLossyZeroWinSizeEventThreshold) {
    this.connLossyZeroWinSizeEventThreshold = connLossyZeroWinSizeEventThreshold;
  }

  public AnalyticsProfile connServerLossyOooThreshold(Integer connServerLossyOooThreshold) {
    this.connServerLossyOooThreshold = connServerLossyOooThreshold;
    return this;
  }

   /**
   * A connection between Avi and server is considered lossy when more than this percentage of out of order packets are received. Allowed values are 1-100.
   * @return connServerLossyOooThreshold
  **/
  @Schema(description = "A connection between Avi and server is considered lossy when more than this percentage of out of order packets are received. Allowed values are 1-100.")
  public Integer getConnServerLossyOooThreshold() {
    return connServerLossyOooThreshold;
  }

  public void setConnServerLossyOooThreshold(Integer connServerLossyOooThreshold) {
    this.connServerLossyOooThreshold = connServerLossyOooThreshold;
  }

  public AnalyticsProfile connServerLossyTimeoRexmtThreshold(Integer connServerLossyTimeoRexmtThreshold) {
    this.connServerLossyTimeoRexmtThreshold = connServerLossyTimeoRexmtThreshold;
    return this;
  }

   /**
   * A connection between Avi and server is considered lossy when more than this percentage of packets are retransmitted due to timeout. Allowed values are 1-100.
   * @return connServerLossyTimeoRexmtThreshold
  **/
  @Schema(description = "A connection between Avi and server is considered lossy when more than this percentage of packets are retransmitted due to timeout. Allowed values are 1-100.")
  public Integer getConnServerLossyTimeoRexmtThreshold() {
    return connServerLossyTimeoRexmtThreshold;
  }

  public void setConnServerLossyTimeoRexmtThreshold(Integer connServerLossyTimeoRexmtThreshold) {
    this.connServerLossyTimeoRexmtThreshold = connServerLossyTimeoRexmtThreshold;
  }

  public AnalyticsProfile connServerLossyTotalRexmtThreshold(Integer connServerLossyTotalRexmtThreshold) {
    this.connServerLossyTotalRexmtThreshold = connServerLossyTotalRexmtThreshold;
    return this;
  }

   /**
   * A connection between Avi and server is considered lossy when more than this percentage of packets are retransmitted. Allowed values are 1-100.
   * @return connServerLossyTotalRexmtThreshold
  **/
  @Schema(description = "A connection between Avi and server is considered lossy when more than this percentage of packets are retransmitted. Allowed values are 1-100.")
  public Integer getConnServerLossyTotalRexmtThreshold() {
    return connServerLossyTotalRexmtThreshold;
  }

  public void setConnServerLossyTotalRexmtThreshold(Integer connServerLossyTotalRexmtThreshold) {
    this.connServerLossyTotalRexmtThreshold = connServerLossyTotalRexmtThreshold;
  }

  public AnalyticsProfile connServerLossyZeroWinSizeEventThreshold(Integer connServerLossyZeroWinSizeEventThreshold) {
    this.connServerLossyZeroWinSizeEventThreshold = connServerLossyZeroWinSizeEventThreshold;
    return this;
  }

   /**
   * A server connection is considered lossy when percentage of times a packet could not be trasmitted due to TCP zero window is above this threshold. Allowed values are 0-100.
   * @return connServerLossyZeroWinSizeEventThreshold
  **/
  @Schema(description = "A server connection is considered lossy when percentage of times a packet could not be trasmitted due to TCP zero window is above this threshold. Allowed values are 0-100.")
  public Integer getConnServerLossyZeroWinSizeEventThreshold() {
    return connServerLossyZeroWinSizeEventThreshold;
  }

  public void setConnServerLossyZeroWinSizeEventThreshold(Integer connServerLossyZeroWinSizeEventThreshold) {
    this.connServerLossyZeroWinSizeEventThreshold = connServerLossyZeroWinSizeEventThreshold;
  }

  public AnalyticsProfile description(String description) {
    this.description = description;
    return this;
  }

   /**
   * User defined description for the object.
   * @return description
  **/
  @Schema(description = "User defined description for the object.")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public AnalyticsProfile disableOndemandMetrics(Boolean disableOndemandMetrics) {
    this.disableOndemandMetrics = disableOndemandMetrics;
    return this;
  }

   /**
   * Virtual Service (VS) metrics are processed only when there is live data traffic on the VS. In case, VS is idle for a period of time as specified by ondemand_metrics_idle_timeout then metrics processing is suspended for that VS. Field introduced in 18.1.1.
   * @return disableOndemandMetrics
  **/
  @Schema(description = "Virtual Service (VS) metrics are processed only when there is live data traffic on the VS. In case, VS is idle for a period of time as specified by ondemand_metrics_idle_timeout then metrics processing is suspended for that VS. Field introduced in 18.1.1.")
  public Boolean isDisableOndemandMetrics() {
    return disableOndemandMetrics;
  }

  public void setDisableOndemandMetrics(Boolean disableOndemandMetrics) {
    this.disableOndemandMetrics = disableOndemandMetrics;
  }

  public AnalyticsProfile disableSeAnalytics(Boolean disableSeAnalytics) {
    this.disableSeAnalytics = disableSeAnalytics;
    return this;
  }

   /**
   * Disable node (service engine) level analytics forvs metrics.
   * @return disableSeAnalytics
  **/
  @Schema(description = "Disable node (service engine) level analytics forvs metrics.")
  public Boolean isDisableSeAnalytics() {
    return disableSeAnalytics;
  }

  public void setDisableSeAnalytics(Boolean disableSeAnalytics) {
    this.disableSeAnalytics = disableSeAnalytics;
  }

  public AnalyticsProfile disableServerAnalytics(Boolean disableServerAnalytics) {
    this.disableServerAnalytics = disableServerAnalytics;
    return this;
  }

   /**
   * Disable analytics on backend servers. This may be desired in container environment when there are large number of ephemeral servers. Additionally, no healthscore of servers is computed when server analytics is disabled.
   * @return disableServerAnalytics
  **/
  @Schema(description = "Disable analytics on backend servers. This may be desired in container environment when there are large number of ephemeral servers. Additionally, no healthscore of servers is computed when server analytics is disabled.")
  public Boolean isDisableServerAnalytics() {
    return disableServerAnalytics;
  }

  public void setDisableServerAnalytics(Boolean disableServerAnalytics) {
    this.disableServerAnalytics = disableServerAnalytics;
  }

  public AnalyticsProfile disableVsAnalytics(Boolean disableVsAnalytics) {
    this.disableVsAnalytics = disableVsAnalytics;
    return this;
  }

   /**
   * Disable VirtualService (frontend) Analytics. This flag disables metrics and healthscore for Virtualservice. Field introduced in 18.2.1.
   * @return disableVsAnalytics
  **/
  @Schema(description = "Disable VirtualService (frontend) Analytics. This flag disables metrics and healthscore for Virtualservice. Field introduced in 18.2.1.")
  public Boolean isDisableVsAnalytics() {
    return disableVsAnalytics;
  }

  public void setDisableVsAnalytics(Boolean disableVsAnalytics) {
    this.disableVsAnalytics = disableVsAnalytics;
  }

  public AnalyticsProfile enableAdvancedAnalytics(Boolean enableAdvancedAnalytics) {
    this.enableAdvancedAnalytics = enableAdvancedAnalytics;
    return this;
  }

   /**
   * Enables Advanced Analytics features like Anomaly detection. If set to false, anomaly computation (and associated rules/events) for VS, Pool and Server metrics will be disabled. However, setting it to false reduces cpu and memory requirements for Analytics subsystem. Field introduced in 17.2.13, 18.1.5, 18.2.1.
   * @return enableAdvancedAnalytics
  **/
  @Schema(description = "Enables Advanced Analytics features like Anomaly detection. If set to false, anomaly computation (and associated rules/events) for VS, Pool and Server metrics will be disabled. However, setting it to false reduces cpu and memory requirements for Analytics subsystem. Field introduced in 17.2.13, 18.1.5, 18.2.1.")
  public Boolean isEnableAdvancedAnalytics() {
    return enableAdvancedAnalytics;
  }

  public void setEnableAdvancedAnalytics(Boolean enableAdvancedAnalytics) {
    this.enableAdvancedAnalytics = enableAdvancedAnalytics;
  }

  public AnalyticsProfile excludeClientCloseBeforeRequestAsError(Boolean excludeClientCloseBeforeRequestAsError) {
    this.excludeClientCloseBeforeRequestAsError = excludeClientCloseBeforeRequestAsError;
    return this;
  }

   /**
   * Exclude client closed connection before an HTTP request could be completed from being classified as an error.
   * @return excludeClientCloseBeforeRequestAsError
  **/
  @Schema(description = "Exclude client closed connection before an HTTP request could be completed from being classified as an error.")
  public Boolean isExcludeClientCloseBeforeRequestAsError() {
    return excludeClientCloseBeforeRequestAsError;
  }

  public void setExcludeClientCloseBeforeRequestAsError(Boolean excludeClientCloseBeforeRequestAsError) {
    this.excludeClientCloseBeforeRequestAsError = excludeClientCloseBeforeRequestAsError;
  }

  public AnalyticsProfile excludeDnsPolicyDropAsSignificant(Boolean excludeDnsPolicyDropAsSignificant) {
    this.excludeDnsPolicyDropAsSignificant = excludeDnsPolicyDropAsSignificant;
    return this;
  }

   /**
   * Exclude dns policy drops from the list of errors. Field introduced in 17.2.2.
   * @return excludeDnsPolicyDropAsSignificant
  **/
  @Schema(description = "Exclude dns policy drops from the list of errors. Field introduced in 17.2.2.")
  public Boolean isExcludeDnsPolicyDropAsSignificant() {
    return excludeDnsPolicyDropAsSignificant;
  }

  public void setExcludeDnsPolicyDropAsSignificant(Boolean excludeDnsPolicyDropAsSignificant) {
    this.excludeDnsPolicyDropAsSignificant = excludeDnsPolicyDropAsSignificant;
  }

  public AnalyticsProfile excludeGsDownAsError(Boolean excludeGsDownAsError) {
    this.excludeGsDownAsError = excludeGsDownAsError;
    return this;
  }

   /**
   * Exclude queries to GSLB services that are operationally down from the list of errors.
   * @return excludeGsDownAsError
  **/
  @Schema(description = "Exclude queries to GSLB services that are operationally down from the list of errors.")
  public Boolean isExcludeGsDownAsError() {
    return excludeGsDownAsError;
  }

  public void setExcludeGsDownAsError(Boolean excludeGsDownAsError) {
    this.excludeGsDownAsError = excludeGsDownAsError;
  }

  public AnalyticsProfile excludeHttpErrorCodes(List<Integer> excludeHttpErrorCodes) {
    this.excludeHttpErrorCodes = excludeHttpErrorCodes;
    return this;
  }

  public AnalyticsProfile addExcludeHttpErrorCodesItem(Integer excludeHttpErrorCodesItem) {
    if (this.excludeHttpErrorCodes == null) {
      this.excludeHttpErrorCodes = new ArrayList<Integer>();
    }
    this.excludeHttpErrorCodes.add(excludeHttpErrorCodesItem);
    return this;
  }

   /**
   * List of HTTP status codes to be excluded from being classified as an error.  Error connections or responses impacts health score, are included as significant logs, and may be classified as part of a DoS attack.
   * @return excludeHttpErrorCodes
  **/
  @Schema(description = "List of HTTP status codes to be excluded from being classified as an error.  Error connections or responses impacts health score, are included as significant logs, and may be classified as part of a DoS attack.")
  public List<Integer> getExcludeHttpErrorCodes() {
    return excludeHttpErrorCodes;
  }

  public void setExcludeHttpErrorCodes(List<Integer> excludeHttpErrorCodes) {
    this.excludeHttpErrorCodes = excludeHttpErrorCodes;
  }

  public AnalyticsProfile excludeInvalidDnsDomainAsError(Boolean excludeInvalidDnsDomainAsError) {
    this.excludeInvalidDnsDomainAsError = excludeInvalidDnsDomainAsError;
    return this;
  }

   /**
   * Exclude dns queries to domains outside the domains configured in the DNS application profile from the list of errors.
   * @return excludeInvalidDnsDomainAsError
  **/
  @Schema(description = "Exclude dns queries to domains outside the domains configured in the DNS application profile from the list of errors.")
  public Boolean isExcludeInvalidDnsDomainAsError() {
    return excludeInvalidDnsDomainAsError;
  }

  public void setExcludeInvalidDnsDomainAsError(Boolean excludeInvalidDnsDomainAsError) {
    this.excludeInvalidDnsDomainAsError = excludeInvalidDnsDomainAsError;
  }

  public AnalyticsProfile excludeInvalidDnsQueryAsError(Boolean excludeInvalidDnsQueryAsError) {
    this.excludeInvalidDnsQueryAsError = excludeInvalidDnsQueryAsError;
    return this;
  }

   /**
   * Exclude invalid dns queries from the list of errors.
   * @return excludeInvalidDnsQueryAsError
  **/
  @Schema(description = "Exclude invalid dns queries from the list of errors.")
  public Boolean isExcludeInvalidDnsQueryAsError() {
    return excludeInvalidDnsQueryAsError;
  }

  public void setExcludeInvalidDnsQueryAsError(Boolean excludeInvalidDnsQueryAsError) {
    this.excludeInvalidDnsQueryAsError = excludeInvalidDnsQueryAsError;
  }

  public AnalyticsProfile excludeNoDnsRecordAsError(Boolean excludeNoDnsRecordAsError) {
    this.excludeNoDnsRecordAsError = excludeNoDnsRecordAsError;
    return this;
  }

   /**
   * Exclude queries to domains that did not have configured services/records from the list of errors.
   * @return excludeNoDnsRecordAsError
  **/
  @Schema(description = "Exclude queries to domains that did not have configured services/records from the list of errors.")
  public Boolean isExcludeNoDnsRecordAsError() {
    return excludeNoDnsRecordAsError;
  }

  public void setExcludeNoDnsRecordAsError(Boolean excludeNoDnsRecordAsError) {
    this.excludeNoDnsRecordAsError = excludeNoDnsRecordAsError;
  }

  public AnalyticsProfile excludeNoValidGsMemberAsError(Boolean excludeNoValidGsMemberAsError) {
    this.excludeNoValidGsMemberAsError = excludeNoValidGsMemberAsError;
    return this;
  }

   /**
   * Exclude queries to GSLB services that have no available members from the list of errors.
   * @return excludeNoValidGsMemberAsError
  **/
  @Schema(description = "Exclude queries to GSLB services that have no available members from the list of errors.")
  public Boolean isExcludeNoValidGsMemberAsError() {
    return excludeNoValidGsMemberAsError;
  }

  public void setExcludeNoValidGsMemberAsError(Boolean excludeNoValidGsMemberAsError) {
    this.excludeNoValidGsMemberAsError = excludeNoValidGsMemberAsError;
  }

  public AnalyticsProfile excludePersistenceChangeAsError(Boolean excludePersistenceChangeAsError) {
    this.excludePersistenceChangeAsError = excludePersistenceChangeAsError;
    return this;
  }

   /**
   * Exclude persistence server changed while load balancing&#x27; from the list of errors.
   * @return excludePersistenceChangeAsError
  **/
  @Schema(description = "Exclude persistence server changed while load balancing' from the list of errors.")
  public Boolean isExcludePersistenceChangeAsError() {
    return excludePersistenceChangeAsError;
  }

  public void setExcludePersistenceChangeAsError(Boolean excludePersistenceChangeAsError) {
    this.excludePersistenceChangeAsError = excludePersistenceChangeAsError;
  }

  public AnalyticsProfile excludeServerDnsErrorAsError(Boolean excludeServerDnsErrorAsError) {
    this.excludeServerDnsErrorAsError = excludeServerDnsErrorAsError;
    return this;
  }

   /**
   * Exclude server dns error response from the list of errors.
   * @return excludeServerDnsErrorAsError
  **/
  @Schema(description = "Exclude server dns error response from the list of errors.")
  public Boolean isExcludeServerDnsErrorAsError() {
    return excludeServerDnsErrorAsError;
  }

  public void setExcludeServerDnsErrorAsError(Boolean excludeServerDnsErrorAsError) {
    this.excludeServerDnsErrorAsError = excludeServerDnsErrorAsError;
  }

  public AnalyticsProfile excludeServerTcpResetAsError(Boolean excludeServerTcpResetAsError) {
    this.excludeServerTcpResetAsError = excludeServerTcpResetAsError;
    return this;
  }

   /**
   * Exclude server TCP reset from errors.  It is common for applications like MS Exchange.
   * @return excludeServerTcpResetAsError
  **/
  @Schema(description = "Exclude server TCP reset from errors.  It is common for applications like MS Exchange.")
  public Boolean isExcludeServerTcpResetAsError() {
    return excludeServerTcpResetAsError;
  }

  public void setExcludeServerTcpResetAsError(Boolean excludeServerTcpResetAsError) {
    this.excludeServerTcpResetAsError = excludeServerTcpResetAsError;
  }

  public AnalyticsProfile excludeSipErrorCodes(List<Integer> excludeSipErrorCodes) {
    this.excludeSipErrorCodes = excludeSipErrorCodes;
    return this;
  }

  public AnalyticsProfile addExcludeSipErrorCodesItem(Integer excludeSipErrorCodesItem) {
    if (this.excludeSipErrorCodes == null) {
      this.excludeSipErrorCodes = new ArrayList<Integer>();
    }
    this.excludeSipErrorCodes.add(excludeSipErrorCodesItem);
    return this;
  }

   /**
   * List of SIP status codes to be excluded from being classified as an error. Field introduced in 17.2.13, 18.1.5, 18.2.1.
   * @return excludeSipErrorCodes
  **/
  @Schema(description = "List of SIP status codes to be excluded from being classified as an error. Field introduced in 17.2.13, 18.1.5, 18.2.1.")
  public List<Integer> getExcludeSipErrorCodes() {
    return excludeSipErrorCodes;
  }

  public void setExcludeSipErrorCodes(List<Integer> excludeSipErrorCodes) {
    this.excludeSipErrorCodes = excludeSipErrorCodes;
  }

  public AnalyticsProfile excludeSynRetransmitAsError(Boolean excludeSynRetransmitAsError) {
    this.excludeSynRetransmitAsError = excludeSynRetransmitAsError;
    return this;
  }

   /**
   * Exclude &#x27;server unanswered syns&#x27; from the list of errors.
   * @return excludeSynRetransmitAsError
  **/
  @Schema(description = "Exclude 'server unanswered syns' from the list of errors.")
  public Boolean isExcludeSynRetransmitAsError() {
    return excludeSynRetransmitAsError;
  }

  public void setExcludeSynRetransmitAsError(Boolean excludeSynRetransmitAsError) {
    this.excludeSynRetransmitAsError = excludeSynRetransmitAsError;
  }

  public AnalyticsProfile excludeTcpResetAsError(Boolean excludeTcpResetAsError) {
    this.excludeTcpResetAsError = excludeTcpResetAsError;
    return this;
  }

   /**
   * Exclude TCP resets by client from the list of potential errors.
   * @return excludeTcpResetAsError
  **/
  @Schema(description = "Exclude TCP resets by client from the list of potential errors.")
  public Boolean isExcludeTcpResetAsError() {
    return excludeTcpResetAsError;
  }

  public void setExcludeTcpResetAsError(Boolean excludeTcpResetAsError) {
    this.excludeTcpResetAsError = excludeTcpResetAsError;
  }

  public AnalyticsProfile excludeUnsupportedDnsQueryAsError(Boolean excludeUnsupportedDnsQueryAsError) {
    this.excludeUnsupportedDnsQueryAsError = excludeUnsupportedDnsQueryAsError;
    return this;
  }

   /**
   * Exclude unsupported dns queries from the list of errors.
   * @return excludeUnsupportedDnsQueryAsError
  **/
  @Schema(description = "Exclude unsupported dns queries from the list of errors.")
  public Boolean isExcludeUnsupportedDnsQueryAsError() {
    return excludeUnsupportedDnsQueryAsError;
  }

  public void setExcludeUnsupportedDnsQueryAsError(Boolean excludeUnsupportedDnsQueryAsError) {
    this.excludeUnsupportedDnsQueryAsError = excludeUnsupportedDnsQueryAsError;
  }

  public AnalyticsProfile healthscoreMaxServerLimit(Integer healthscoreMaxServerLimit) {
    this.healthscoreMaxServerLimit = healthscoreMaxServerLimit;
    return this;
  }

   /**
   * Skips health score computation of pool servers when number of servers in a pool is more than this setting. Allowed values are 0-5000. Special values are 0- &#x27;server health score is disabled&#x27;. Field introduced in 17.2.13, 18.1.4.
   * @return healthscoreMaxServerLimit
  **/
  @Schema(description = "Skips health score computation of pool servers when number of servers in a pool is more than this setting. Allowed values are 0-5000. Special values are 0- 'server health score is disabled'. Field introduced in 17.2.13, 18.1.4.")
  public Integer getHealthscoreMaxServerLimit() {
    return healthscoreMaxServerLimit;
  }

  public void setHealthscoreMaxServerLimit(Integer healthscoreMaxServerLimit) {
    this.healthscoreMaxServerLimit = healthscoreMaxServerLimit;
  }

  public AnalyticsProfile hsEventThrottleWindow(Integer hsEventThrottleWindow) {
    this.hsEventThrottleWindow = hsEventThrottleWindow;
    return this;
  }

   /**
   * Time window (in secs) within which only unique health change events should occur.
   * @return hsEventThrottleWindow
  **/
  @Schema(description = "Time window (in secs) within which only unique health change events should occur.")
  public Integer getHsEventThrottleWindow() {
    return hsEventThrottleWindow;
  }

  public void setHsEventThrottleWindow(Integer hsEventThrottleWindow) {
    this.hsEventThrottleWindow = hsEventThrottleWindow;
  }

  public AnalyticsProfile hsMaxAnomalyPenalty(Integer hsMaxAnomalyPenalty) {
    this.hsMaxAnomalyPenalty = hsMaxAnomalyPenalty;
    return this;
  }

   /**
   * Maximum penalty that may be deducted from health score for anomalies. Allowed values are 0-100.
   * @return hsMaxAnomalyPenalty
  **/
  @Schema(description = "Maximum penalty that may be deducted from health score for anomalies. Allowed values are 0-100.")
  public Integer getHsMaxAnomalyPenalty() {
    return hsMaxAnomalyPenalty;
  }

  public void setHsMaxAnomalyPenalty(Integer hsMaxAnomalyPenalty) {
    this.hsMaxAnomalyPenalty = hsMaxAnomalyPenalty;
  }

  public AnalyticsProfile hsMaxResourcesPenalty(Integer hsMaxResourcesPenalty) {
    this.hsMaxResourcesPenalty = hsMaxResourcesPenalty;
    return this;
  }

   /**
   * Maximum penalty that may be deducted from health score for high resource utilization. Allowed values are 0-100.
   * @return hsMaxResourcesPenalty
  **/
  @Schema(description = "Maximum penalty that may be deducted from health score for high resource utilization. Allowed values are 0-100.")
  public Integer getHsMaxResourcesPenalty() {
    return hsMaxResourcesPenalty;
  }

  public void setHsMaxResourcesPenalty(Integer hsMaxResourcesPenalty) {
    this.hsMaxResourcesPenalty = hsMaxResourcesPenalty;
  }

  public AnalyticsProfile hsMaxSecurityPenalty(Integer hsMaxSecurityPenalty) {
    this.hsMaxSecurityPenalty = hsMaxSecurityPenalty;
    return this;
  }

   /**
   * Maximum penalty that may be deducted from health score based on security assessment. Allowed values are 0-100.
   * @return hsMaxSecurityPenalty
  **/
  @Schema(description = "Maximum penalty that may be deducted from health score based on security assessment. Allowed values are 0-100.")
  public Integer getHsMaxSecurityPenalty() {
    return hsMaxSecurityPenalty;
  }

  public void setHsMaxSecurityPenalty(Integer hsMaxSecurityPenalty) {
    this.hsMaxSecurityPenalty = hsMaxSecurityPenalty;
  }

  public AnalyticsProfile hsMinDosRate(Integer hsMinDosRate) {
    this.hsMinDosRate = hsMinDosRate;
    return this;
  }

   /**
   * DoS connection rate below which the DoS security assessment will not kick in.
   * @return hsMinDosRate
  **/
  @Schema(description = "DoS connection rate below which the DoS security assessment will not kick in.")
  public Integer getHsMinDosRate() {
    return hsMinDosRate;
  }

  public void setHsMinDosRate(Integer hsMinDosRate) {
    this.hsMinDosRate = hsMinDosRate;
  }

  public AnalyticsProfile hsPerformanceBoost(Integer hsPerformanceBoost) {
    this.hsPerformanceBoost = hsPerformanceBoost;
    return this;
  }

   /**
   * Adds free performance score credits to health score. It can be used for compensating health score for known slow applications. Allowed values are 0-100.
   * @return hsPerformanceBoost
  **/
  @Schema(description = "Adds free performance score credits to health score. It can be used for compensating health score for known slow applications. Allowed values are 0-100.")
  public Integer getHsPerformanceBoost() {
    return hsPerformanceBoost;
  }

  public void setHsPerformanceBoost(Integer hsPerformanceBoost) {
    this.hsPerformanceBoost = hsPerformanceBoost;
  }

  public AnalyticsProfile hsPscoreTrafficThresholdL4Client(Double hsPscoreTrafficThresholdL4Client) {
    this.hsPscoreTrafficThresholdL4Client = hsPscoreTrafficThresholdL4Client;
    return this;
  }

   /**
   * Threshold number of connections in 5min, below which apdexr, apdexc, rum_apdex, and other network quality metrics are not computed.
   * @return hsPscoreTrafficThresholdL4Client
  **/
  @Schema(description = "Threshold number of connections in 5min, below which apdexr, apdexc, rum_apdex, and other network quality metrics are not computed.")
  public Double getHsPscoreTrafficThresholdL4Client() {
    return hsPscoreTrafficThresholdL4Client;
  }

  public void setHsPscoreTrafficThresholdL4Client(Double hsPscoreTrafficThresholdL4Client) {
    this.hsPscoreTrafficThresholdL4Client = hsPscoreTrafficThresholdL4Client;
  }

  public AnalyticsProfile hsPscoreTrafficThresholdL4Server(Double hsPscoreTrafficThresholdL4Server) {
    this.hsPscoreTrafficThresholdL4Server = hsPscoreTrafficThresholdL4Server;
    return this;
  }

   /**
   * Threshold number of connections in 5min, below which apdexr, apdexc, rum_apdex, and other network quality metrics are not computed.
   * @return hsPscoreTrafficThresholdL4Server
  **/
  @Schema(description = "Threshold number of connections in 5min, below which apdexr, apdexc, rum_apdex, and other network quality metrics are not computed.")
  public Double getHsPscoreTrafficThresholdL4Server() {
    return hsPscoreTrafficThresholdL4Server;
  }

  public void setHsPscoreTrafficThresholdL4Server(Double hsPscoreTrafficThresholdL4Server) {
    this.hsPscoreTrafficThresholdL4Server = hsPscoreTrafficThresholdL4Server;
  }

  public AnalyticsProfile hsSecurityCertscoreExpired(Double hsSecurityCertscoreExpired) {
    this.hsSecurityCertscoreExpired = hsSecurityCertscoreExpired;
    return this;
  }

   /**
   * Score assigned when the certificate has expired. Allowed values are 0-5.
   * @return hsSecurityCertscoreExpired
  **/
  @Schema(description = "Score assigned when the certificate has expired. Allowed values are 0-5.")
  public Double getHsSecurityCertscoreExpired() {
    return hsSecurityCertscoreExpired;
  }

  public void setHsSecurityCertscoreExpired(Double hsSecurityCertscoreExpired) {
    this.hsSecurityCertscoreExpired = hsSecurityCertscoreExpired;
  }

  public AnalyticsProfile hsSecurityCertscoreGt30d(Double hsSecurityCertscoreGt30d) {
    this.hsSecurityCertscoreGt30d = hsSecurityCertscoreGt30d;
    return this;
  }

   /**
   * Score assigned when the certificate expires in more than 30 days. Allowed values are 0-5.
   * @return hsSecurityCertscoreGt30d
  **/
  @Schema(description = "Score assigned when the certificate expires in more than 30 days. Allowed values are 0-5.")
  public Double getHsSecurityCertscoreGt30d() {
    return hsSecurityCertscoreGt30d;
  }

  public void setHsSecurityCertscoreGt30d(Double hsSecurityCertscoreGt30d) {
    this.hsSecurityCertscoreGt30d = hsSecurityCertscoreGt30d;
  }

  public AnalyticsProfile hsSecurityCertscoreLe07d(Double hsSecurityCertscoreLe07d) {
    this.hsSecurityCertscoreLe07d = hsSecurityCertscoreLe07d;
    return this;
  }

   /**
   * Score assigned when the certificate expires in less than or equal to 7 days. Allowed values are 0-5.
   * @return hsSecurityCertscoreLe07d
  **/
  @Schema(description = "Score assigned when the certificate expires in less than or equal to 7 days. Allowed values are 0-5.")
  public Double getHsSecurityCertscoreLe07d() {
    return hsSecurityCertscoreLe07d;
  }

  public void setHsSecurityCertscoreLe07d(Double hsSecurityCertscoreLe07d) {
    this.hsSecurityCertscoreLe07d = hsSecurityCertscoreLe07d;
  }

  public AnalyticsProfile hsSecurityCertscoreLe30d(Double hsSecurityCertscoreLe30d) {
    this.hsSecurityCertscoreLe30d = hsSecurityCertscoreLe30d;
    return this;
  }

   /**
   * Score assigned when the certificate expires in less than or equal to 30 days. Allowed values are 0-5.
   * @return hsSecurityCertscoreLe30d
  **/
  @Schema(description = "Score assigned when the certificate expires in less than or equal to 30 days. Allowed values are 0-5.")
  public Double getHsSecurityCertscoreLe30d() {
    return hsSecurityCertscoreLe30d;
  }

  public void setHsSecurityCertscoreLe30d(Double hsSecurityCertscoreLe30d) {
    this.hsSecurityCertscoreLe30d = hsSecurityCertscoreLe30d;
  }

  public AnalyticsProfile hsSecurityChainInvalidityPenalty(Double hsSecurityChainInvalidityPenalty) {
    this.hsSecurityChainInvalidityPenalty = hsSecurityChainInvalidityPenalty;
    return this;
  }

   /**
   * Penalty for allowing certificates with invalid chain. Allowed values are 0-5.
   * @return hsSecurityChainInvalidityPenalty
  **/
  @Schema(description = "Penalty for allowing certificates with invalid chain. Allowed values are 0-5.")
  public Double getHsSecurityChainInvalidityPenalty() {
    return hsSecurityChainInvalidityPenalty;
  }

  public void setHsSecurityChainInvalidityPenalty(Double hsSecurityChainInvalidityPenalty) {
    this.hsSecurityChainInvalidityPenalty = hsSecurityChainInvalidityPenalty;
  }

  public AnalyticsProfile hsSecurityCipherscoreEq000b(Double hsSecurityCipherscoreEq000b) {
    this.hsSecurityCipherscoreEq000b = hsSecurityCipherscoreEq000b;
    return this;
  }

   /**
   * Score assigned when the minimum cipher strength is 0 bits. Allowed values are 0-5.
   * @return hsSecurityCipherscoreEq000b
  **/
  @Schema(description = "Score assigned when the minimum cipher strength is 0 bits. Allowed values are 0-5.")
  public Double getHsSecurityCipherscoreEq000b() {
    return hsSecurityCipherscoreEq000b;
  }

  public void setHsSecurityCipherscoreEq000b(Double hsSecurityCipherscoreEq000b) {
    this.hsSecurityCipherscoreEq000b = hsSecurityCipherscoreEq000b;
  }

  public AnalyticsProfile hsSecurityCipherscoreGe128b(Double hsSecurityCipherscoreGe128b) {
    this.hsSecurityCipherscoreGe128b = hsSecurityCipherscoreGe128b;
    return this;
  }

   /**
   * Score assigned when the minimum cipher strength is greater than equal to 128 bits. Allowed values are 0-5.
   * @return hsSecurityCipherscoreGe128b
  **/
  @Schema(description = "Score assigned when the minimum cipher strength is greater than equal to 128 bits. Allowed values are 0-5.")
  public Double getHsSecurityCipherscoreGe128b() {
    return hsSecurityCipherscoreGe128b;
  }

  public void setHsSecurityCipherscoreGe128b(Double hsSecurityCipherscoreGe128b) {
    this.hsSecurityCipherscoreGe128b = hsSecurityCipherscoreGe128b;
  }

  public AnalyticsProfile hsSecurityCipherscoreLt128b(Double hsSecurityCipherscoreLt128b) {
    this.hsSecurityCipherscoreLt128b = hsSecurityCipherscoreLt128b;
    return this;
  }

   /**
   * Score assigned when the minimum cipher strength is less than 128 bits. Allowed values are 0-5.
   * @return hsSecurityCipherscoreLt128b
  **/
  @Schema(description = "Score assigned when the minimum cipher strength is less than 128 bits. Allowed values are 0-5.")
  public Double getHsSecurityCipherscoreLt128b() {
    return hsSecurityCipherscoreLt128b;
  }

  public void setHsSecurityCipherscoreLt128b(Double hsSecurityCipherscoreLt128b) {
    this.hsSecurityCipherscoreLt128b = hsSecurityCipherscoreLt128b;
  }

  public AnalyticsProfile hsSecurityEncalgoScoreNone(Double hsSecurityEncalgoScoreNone) {
    this.hsSecurityEncalgoScoreNone = hsSecurityEncalgoScoreNone;
    return this;
  }

   /**
   * Score assigned when no algorithm is used for encryption. Allowed values are 0-5.
   * @return hsSecurityEncalgoScoreNone
  **/
  @Schema(description = "Score assigned when no algorithm is used for encryption. Allowed values are 0-5.")
  public Double getHsSecurityEncalgoScoreNone() {
    return hsSecurityEncalgoScoreNone;
  }

  public void setHsSecurityEncalgoScoreNone(Double hsSecurityEncalgoScoreNone) {
    this.hsSecurityEncalgoScoreNone = hsSecurityEncalgoScoreNone;
  }

  public AnalyticsProfile hsSecurityEncalgoScoreRc4(Double hsSecurityEncalgoScoreRc4) {
    this.hsSecurityEncalgoScoreRc4 = hsSecurityEncalgoScoreRc4;
    return this;
  }

   /**
   * Score assigned when RC4 algorithm is used for encryption. Allowed values are 0-5.
   * @return hsSecurityEncalgoScoreRc4
  **/
  @Schema(description = "Score assigned when RC4 algorithm is used for encryption. Allowed values are 0-5.")
  public Double getHsSecurityEncalgoScoreRc4() {
    return hsSecurityEncalgoScoreRc4;
  }

  public void setHsSecurityEncalgoScoreRc4(Double hsSecurityEncalgoScoreRc4) {
    this.hsSecurityEncalgoScoreRc4 = hsSecurityEncalgoScoreRc4;
  }

  public AnalyticsProfile hsSecurityHstsPenalty(Double hsSecurityHstsPenalty) {
    this.hsSecurityHstsPenalty = hsSecurityHstsPenalty;
    return this;
  }

   /**
   * Penalty for not enabling HSTS. Allowed values are 0-5.
   * @return hsSecurityHstsPenalty
  **/
  @Schema(description = "Penalty for not enabling HSTS. Allowed values are 0-5.")
  public Double getHsSecurityHstsPenalty() {
    return hsSecurityHstsPenalty;
  }

  public void setHsSecurityHstsPenalty(Double hsSecurityHstsPenalty) {
    this.hsSecurityHstsPenalty = hsSecurityHstsPenalty;
  }

  public AnalyticsProfile hsSecurityNonpfsPenalty(Double hsSecurityNonpfsPenalty) {
    this.hsSecurityNonpfsPenalty = hsSecurityNonpfsPenalty;
    return this;
  }

   /**
   * Penalty for allowing non-PFS handshakes. Allowed values are 0-5.
   * @return hsSecurityNonpfsPenalty
  **/
  @Schema(description = "Penalty for allowing non-PFS handshakes. Allowed values are 0-5.")
  public Double getHsSecurityNonpfsPenalty() {
    return hsSecurityNonpfsPenalty;
  }

  public void setHsSecurityNonpfsPenalty(Double hsSecurityNonpfsPenalty) {
    this.hsSecurityNonpfsPenalty = hsSecurityNonpfsPenalty;
  }

  public AnalyticsProfile hsSecuritySelfsignedcertPenalty(Double hsSecuritySelfsignedcertPenalty) {
    this.hsSecuritySelfsignedcertPenalty = hsSecuritySelfsignedcertPenalty;
    return this;
  }

   /**
   * Deprecated. Allowed values are 0-5.
   * @return hsSecuritySelfsignedcertPenalty
  **/
  @Schema(description = "Deprecated. Allowed values are 0-5.")
  public Double getHsSecuritySelfsignedcertPenalty() {
    return hsSecuritySelfsignedcertPenalty;
  }

  public void setHsSecuritySelfsignedcertPenalty(Double hsSecuritySelfsignedcertPenalty) {
    this.hsSecuritySelfsignedcertPenalty = hsSecuritySelfsignedcertPenalty;
  }

  public AnalyticsProfile hsSecuritySsl30Score(Double hsSecuritySsl30Score) {
    this.hsSecuritySsl30Score = hsSecuritySsl30Score;
    return this;
  }

   /**
   * Score assigned when supporting SSL3.0 encryption protocol. Allowed values are 0-5.
   * @return hsSecuritySsl30Score
  **/
  @Schema(description = "Score assigned when supporting SSL3.0 encryption protocol. Allowed values are 0-5.")
  public Double getHsSecuritySsl30Score() {
    return hsSecuritySsl30Score;
  }

  public void setHsSecuritySsl30Score(Double hsSecuritySsl30Score) {
    this.hsSecuritySsl30Score = hsSecuritySsl30Score;
  }

  public AnalyticsProfile hsSecurityTls10Score(Double hsSecurityTls10Score) {
    this.hsSecurityTls10Score = hsSecurityTls10Score;
    return this;
  }

   /**
   * Score assigned when supporting TLS1.0 encryption protocol. Allowed values are 0-5.
   * @return hsSecurityTls10Score
  **/
  @Schema(description = "Score assigned when supporting TLS1.0 encryption protocol. Allowed values are 0-5.")
  public Double getHsSecurityTls10Score() {
    return hsSecurityTls10Score;
  }

  public void setHsSecurityTls10Score(Double hsSecurityTls10Score) {
    this.hsSecurityTls10Score = hsSecurityTls10Score;
  }

  public AnalyticsProfile hsSecurityTls11Score(Double hsSecurityTls11Score) {
    this.hsSecurityTls11Score = hsSecurityTls11Score;
    return this;
  }

   /**
   * Score assigned when supporting TLS1.1 encryption protocol. Allowed values are 0-5.
   * @return hsSecurityTls11Score
  **/
  @Schema(description = "Score assigned when supporting TLS1.1 encryption protocol. Allowed values are 0-5.")
  public Double getHsSecurityTls11Score() {
    return hsSecurityTls11Score;
  }

  public void setHsSecurityTls11Score(Double hsSecurityTls11Score) {
    this.hsSecurityTls11Score = hsSecurityTls11Score;
  }

  public AnalyticsProfile hsSecurityTls12Score(Double hsSecurityTls12Score) {
    this.hsSecurityTls12Score = hsSecurityTls12Score;
    return this;
  }

   /**
   * Score assigned when supporting TLS1.2 encryption protocol. Allowed values are 0-5.
   * @return hsSecurityTls12Score
  **/
  @Schema(description = "Score assigned when supporting TLS1.2 encryption protocol. Allowed values are 0-5.")
  public Double getHsSecurityTls12Score() {
    return hsSecurityTls12Score;
  }

  public void setHsSecurityTls12Score(Double hsSecurityTls12Score) {
    this.hsSecurityTls12Score = hsSecurityTls12Score;
  }

   /**
   * Score assigned when supporting TLS1.3 encryption protocol. Allowed values are 0-5. Field introduced in 18.2.6.
   * @return hsSecurityTls13Score
  **/
  @Schema(description = "Score assigned when supporting TLS1.3 encryption protocol. Allowed values are 0-5. Field introduced in 18.2.6.")
  public Double getHsSecurityTls13Score() {
    return hsSecurityTls13Score;
  }

  public AnalyticsProfile hsSecurityWeakSignatureAlgoPenalty(Double hsSecurityWeakSignatureAlgoPenalty) {
    this.hsSecurityWeakSignatureAlgoPenalty = hsSecurityWeakSignatureAlgoPenalty;
    return this;
  }

   /**
   * Penalty for allowing weak signature algorithm(s). Allowed values are 0-5.
   * @return hsSecurityWeakSignatureAlgoPenalty
  **/
  @Schema(description = "Penalty for allowing weak signature algorithm(s). Allowed values are 0-5.")
  public Double getHsSecurityWeakSignatureAlgoPenalty() {
    return hsSecurityWeakSignatureAlgoPenalty;
  }

  public void setHsSecurityWeakSignatureAlgoPenalty(Double hsSecurityWeakSignatureAlgoPenalty) {
    this.hsSecurityWeakSignatureAlgoPenalty = hsSecurityWeakSignatureAlgoPenalty;
  }

  public AnalyticsProfile name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The name of the analytics profile.
   * @return name
  **/
  @Schema(required = true, description = "The name of the analytics profile.")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public AnalyticsProfile ondemandMetricsIdleTimeout(Integer ondemandMetricsIdleTimeout) {
    this.ondemandMetricsIdleTimeout = ondemandMetricsIdleTimeout;
    return this;
  }

   /**
   * This flag sets the time duration of no live data traffic after which Virtual Service metrics processing is suspended. It is applicable only when disable_ondemand_metrics is set to false. Field introduced in 18.1.1.
   * @return ondemandMetricsIdleTimeout
  **/
  @Schema(description = "This flag sets the time duration of no live data traffic after which Virtual Service metrics processing is suspended. It is applicable only when disable_ondemand_metrics is set to false. Field introduced in 18.1.1.")
  public Integer getOndemandMetricsIdleTimeout() {
    return ondemandMetricsIdleTimeout;
  }

  public void setOndemandMetricsIdleTimeout(Integer ondemandMetricsIdleTimeout) {
    this.ondemandMetricsIdleTimeout = ondemandMetricsIdleTimeout;
  }

  public AnalyticsProfile ranges(List<HTTPStatusRange> ranges) {
    this.ranges = ranges;
    return this;
  }

  public AnalyticsProfile addRangesItem(HTTPStatusRange rangesItem) {
    if (this.ranges == null) {
      this.ranges = new ArrayList<HTTPStatusRange>();
    }
    this.ranges.add(rangesItem);
    return this;
  }

   /**
   * List of HTTP status code ranges to be excluded from being classified as an error.
   * @return ranges
  **/
  @Schema(description = "List of HTTP status code ranges to be excluded from being classified as an error.")
  public List<HTTPStatusRange> getRanges() {
    return ranges;
  }

  public void setRanges(List<HTTPStatusRange> ranges) {
    this.ranges = ranges;
  }

  public AnalyticsProfile respCodeBlock(List<String> respCodeBlock) {
    this.respCodeBlock = respCodeBlock;
    return this;
  }

  public AnalyticsProfile addRespCodeBlockItem(String respCodeBlockItem) {
    if (this.respCodeBlock == null) {
      this.respCodeBlock = new ArrayList<String>();
    }
    this.respCodeBlock.add(respCodeBlockItem);
    return this;
  }

   /**
   * Block of HTTP response codes to be excluded from being classified as an error. Enum options - AP_HTTP_RSP_4XX, AP_HTTP_RSP_5XX.
   * @return respCodeBlock
  **/
  @Schema(description = "Block of HTTP response codes to be excluded from being classified as an error. Enum options - AP_HTTP_RSP_4XX, AP_HTTP_RSP_5XX.")
  public List<String> getRespCodeBlock() {
    return respCodeBlock;
  }

  public void setRespCodeBlock(List<String> respCodeBlock) {
    this.respCodeBlock = respCodeBlock;
  }

  public AnalyticsProfile sensitiveLogProfile(SensitiveLogProfile sensitiveLogProfile) {
    this.sensitiveLogProfile = sensitiveLogProfile;
    return this;
  }

   /**
   * Get sensitiveLogProfile
   * @return sensitiveLogProfile
  **/
  @Schema(description = "")
  public SensitiveLogProfile getSensitiveLogProfile() {
    return sensitiveLogProfile;
  }

  public void setSensitiveLogProfile(SensitiveLogProfile sensitiveLogProfile) {
    this.sensitiveLogProfile = sensitiveLogProfile;
  }

  public AnalyticsProfile sipLogDepth(Integer sipLogDepth) {
    this.sipLogDepth = sipLogDepth;
    return this;
  }

   /**
   * Maximum number of SIP messages added in logs for a SIP transaction. By default, this value is 20. Allowed values are 1-1000. Field introduced in 17.2.13, 18.1.5, 18.2.1.
   * @return sipLogDepth
  **/
  @Schema(description = "Maximum number of SIP messages added in logs for a SIP transaction. By default, this value is 20. Allowed values are 1-1000. Field introduced in 17.2.13, 18.1.5, 18.2.1.")
  public Integer getSipLogDepth() {
    return sipLogDepth;
  }

  public void setSipLogDepth(Integer sipLogDepth) {
    this.sipLogDepth = sipLogDepth;
  }

  public AnalyticsProfile tenantRef(String tenantRef) {
    this.tenantRef = tenantRef;
    return this;
  }

   /**
   *  It is a reference to an object of type Tenant.
   * @return tenantRef
  **/
  @Schema(description = " It is a reference to an object of type Tenant.")
  public String getTenantRef() {
    return tenantRef;
  }

  public void setTenantRef(String tenantRef) {
    this.tenantRef = tenantRef;
  }

   /**
   * url
   * @return url
  **/
  @Schema(description = "url")
  public String getUrl() {
    return url;
  }

  public AnalyticsProfile uuid(String uuid) {
    this.uuid = uuid;
    return this;
  }

   /**
   * UUID of the analytics profile.
   * @return uuid
  **/
  @Schema(description = "UUID of the analytics profile.")
  public String getUuid() {
    return uuid;
  }

  public void setUuid(String uuid) {
    this.uuid = uuid;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AnalyticsProfile analyticsProfile = (AnalyticsProfile) o;
    return Objects.equals(this._lastModified, analyticsProfile._lastModified) &&
        Objects.equals(this.apdexResponseThreshold, analyticsProfile.apdexResponseThreshold) &&
        Objects.equals(this.apdexResponseToleratedFactor, analyticsProfile.apdexResponseToleratedFactor) &&
        Objects.equals(this.apdexRttThreshold, analyticsProfile.apdexRttThreshold) &&
        Objects.equals(this.apdexRttToleratedFactor, analyticsProfile.apdexRttToleratedFactor) &&
        Objects.equals(this.apdexRumThreshold, analyticsProfile.apdexRumThreshold) &&
        Objects.equals(this.apdexRumToleratedFactor, analyticsProfile.apdexRumToleratedFactor) &&
        Objects.equals(this.apdexServerResponseThreshold, analyticsProfile.apdexServerResponseThreshold) &&
        Objects.equals(this.apdexServerResponseToleratedFactor, analyticsProfile.apdexServerResponseToleratedFactor) &&
        Objects.equals(this.apdexServerRttThreshold, analyticsProfile.apdexServerRttThreshold) &&
        Objects.equals(this.apdexServerRttToleratedFactor, analyticsProfile.apdexServerRttToleratedFactor) &&
        Objects.equals(this.clientLogConfig, analyticsProfile.clientLogConfig) &&
        Objects.equals(this.clientLogStreamingConfig, analyticsProfile.clientLogStreamingConfig) &&
        Objects.equals(this.connLossyOooThreshold, analyticsProfile.connLossyOooThreshold) &&
        Objects.equals(this.connLossyTimeoRexmtThreshold, analyticsProfile.connLossyTimeoRexmtThreshold) &&
        Objects.equals(this.connLossyTotalRexmtThreshold, analyticsProfile.connLossyTotalRexmtThreshold) &&
        Objects.equals(this.connLossyZeroWinSizeEventThreshold, analyticsProfile.connLossyZeroWinSizeEventThreshold) &&
        Objects.equals(this.connServerLossyOooThreshold, analyticsProfile.connServerLossyOooThreshold) &&
        Objects.equals(this.connServerLossyTimeoRexmtThreshold, analyticsProfile.connServerLossyTimeoRexmtThreshold) &&
        Objects.equals(this.connServerLossyTotalRexmtThreshold, analyticsProfile.connServerLossyTotalRexmtThreshold) &&
        Objects.equals(this.connServerLossyZeroWinSizeEventThreshold, analyticsProfile.connServerLossyZeroWinSizeEventThreshold) &&
        Objects.equals(this.description, analyticsProfile.description) &&
        Objects.equals(this.disableOndemandMetrics, analyticsProfile.disableOndemandMetrics) &&
        Objects.equals(this.disableSeAnalytics, analyticsProfile.disableSeAnalytics) &&
        Objects.equals(this.disableServerAnalytics, analyticsProfile.disableServerAnalytics) &&
        Objects.equals(this.disableVsAnalytics, analyticsProfile.disableVsAnalytics) &&
        Objects.equals(this.enableAdvancedAnalytics, analyticsProfile.enableAdvancedAnalytics) &&
        Objects.equals(this.excludeClientCloseBeforeRequestAsError, analyticsProfile.excludeClientCloseBeforeRequestAsError) &&
        Objects.equals(this.excludeDnsPolicyDropAsSignificant, analyticsProfile.excludeDnsPolicyDropAsSignificant) &&
        Objects.equals(this.excludeGsDownAsError, analyticsProfile.excludeGsDownAsError) &&
        Objects.equals(this.excludeHttpErrorCodes, analyticsProfile.excludeHttpErrorCodes) &&
        Objects.equals(this.excludeInvalidDnsDomainAsError, analyticsProfile.excludeInvalidDnsDomainAsError) &&
        Objects.equals(this.excludeInvalidDnsQueryAsError, analyticsProfile.excludeInvalidDnsQueryAsError) &&
        Objects.equals(this.excludeNoDnsRecordAsError, analyticsProfile.excludeNoDnsRecordAsError) &&
        Objects.equals(this.excludeNoValidGsMemberAsError, analyticsProfile.excludeNoValidGsMemberAsError) &&
        Objects.equals(this.excludePersistenceChangeAsError, analyticsProfile.excludePersistenceChangeAsError) &&
        Objects.equals(this.excludeServerDnsErrorAsError, analyticsProfile.excludeServerDnsErrorAsError) &&
        Objects.equals(this.excludeServerTcpResetAsError, analyticsProfile.excludeServerTcpResetAsError) &&
        Objects.equals(this.excludeSipErrorCodes, analyticsProfile.excludeSipErrorCodes) &&
        Objects.equals(this.excludeSynRetransmitAsError, analyticsProfile.excludeSynRetransmitAsError) &&
        Objects.equals(this.excludeTcpResetAsError, analyticsProfile.excludeTcpResetAsError) &&
        Objects.equals(this.excludeUnsupportedDnsQueryAsError, analyticsProfile.excludeUnsupportedDnsQueryAsError) &&
        Objects.equals(this.healthscoreMaxServerLimit, analyticsProfile.healthscoreMaxServerLimit) &&
        Objects.equals(this.hsEventThrottleWindow, analyticsProfile.hsEventThrottleWindow) &&
        Objects.equals(this.hsMaxAnomalyPenalty, analyticsProfile.hsMaxAnomalyPenalty) &&
        Objects.equals(this.hsMaxResourcesPenalty, analyticsProfile.hsMaxResourcesPenalty) &&
        Objects.equals(this.hsMaxSecurityPenalty, analyticsProfile.hsMaxSecurityPenalty) &&
        Objects.equals(this.hsMinDosRate, analyticsProfile.hsMinDosRate) &&
        Objects.equals(this.hsPerformanceBoost, analyticsProfile.hsPerformanceBoost) &&
        Objects.equals(this.hsPscoreTrafficThresholdL4Client, analyticsProfile.hsPscoreTrafficThresholdL4Client) &&
        Objects.equals(this.hsPscoreTrafficThresholdL4Server, analyticsProfile.hsPscoreTrafficThresholdL4Server) &&
        Objects.equals(this.hsSecurityCertscoreExpired, analyticsProfile.hsSecurityCertscoreExpired) &&
        Objects.equals(this.hsSecurityCertscoreGt30d, analyticsProfile.hsSecurityCertscoreGt30d) &&
        Objects.equals(this.hsSecurityCertscoreLe07d, analyticsProfile.hsSecurityCertscoreLe07d) &&
        Objects.equals(this.hsSecurityCertscoreLe30d, analyticsProfile.hsSecurityCertscoreLe30d) &&
        Objects.equals(this.hsSecurityChainInvalidityPenalty, analyticsProfile.hsSecurityChainInvalidityPenalty) &&
        Objects.equals(this.hsSecurityCipherscoreEq000b, analyticsProfile.hsSecurityCipherscoreEq000b) &&
        Objects.equals(this.hsSecurityCipherscoreGe128b, analyticsProfile.hsSecurityCipherscoreGe128b) &&
        Objects.equals(this.hsSecurityCipherscoreLt128b, analyticsProfile.hsSecurityCipherscoreLt128b) &&
        Objects.equals(this.hsSecurityEncalgoScoreNone, analyticsProfile.hsSecurityEncalgoScoreNone) &&
        Objects.equals(this.hsSecurityEncalgoScoreRc4, analyticsProfile.hsSecurityEncalgoScoreRc4) &&
        Objects.equals(this.hsSecurityHstsPenalty, analyticsProfile.hsSecurityHstsPenalty) &&
        Objects.equals(this.hsSecurityNonpfsPenalty, analyticsProfile.hsSecurityNonpfsPenalty) &&
        Objects.equals(this.hsSecuritySelfsignedcertPenalty, analyticsProfile.hsSecuritySelfsignedcertPenalty) &&
        Objects.equals(this.hsSecuritySsl30Score, analyticsProfile.hsSecuritySsl30Score) &&
        Objects.equals(this.hsSecurityTls10Score, analyticsProfile.hsSecurityTls10Score) &&
        Objects.equals(this.hsSecurityTls11Score, analyticsProfile.hsSecurityTls11Score) &&
        Objects.equals(this.hsSecurityTls12Score, analyticsProfile.hsSecurityTls12Score) &&
        Objects.equals(this.hsSecurityTls13Score, analyticsProfile.hsSecurityTls13Score) &&
        Objects.equals(this.hsSecurityWeakSignatureAlgoPenalty, analyticsProfile.hsSecurityWeakSignatureAlgoPenalty) &&
        Objects.equals(this.name, analyticsProfile.name) &&
        Objects.equals(this.ondemandMetricsIdleTimeout, analyticsProfile.ondemandMetricsIdleTimeout) &&
        Objects.equals(this.ranges, analyticsProfile.ranges) &&
        Objects.equals(this.respCodeBlock, analyticsProfile.respCodeBlock) &&
        Objects.equals(this.sensitiveLogProfile, analyticsProfile.sensitiveLogProfile) &&
        Objects.equals(this.sipLogDepth, analyticsProfile.sipLogDepth) &&
        Objects.equals(this.tenantRef, analyticsProfile.tenantRef) &&
        Objects.equals(this.url, analyticsProfile.url) &&
        Objects.equals(this.uuid, analyticsProfile.uuid);
  }

  @Override
  public int hashCode() {
    return Objects.hash(_lastModified, apdexResponseThreshold, apdexResponseToleratedFactor, apdexRttThreshold, apdexRttToleratedFactor, apdexRumThreshold, apdexRumToleratedFactor, apdexServerResponseThreshold, apdexServerResponseToleratedFactor, apdexServerRttThreshold, apdexServerRttToleratedFactor, clientLogConfig, clientLogStreamingConfig, connLossyOooThreshold, connLossyTimeoRexmtThreshold, connLossyTotalRexmtThreshold, connLossyZeroWinSizeEventThreshold, connServerLossyOooThreshold, connServerLossyTimeoRexmtThreshold, connServerLossyTotalRexmtThreshold, connServerLossyZeroWinSizeEventThreshold, description, disableOndemandMetrics, disableSeAnalytics, disableServerAnalytics, disableVsAnalytics, enableAdvancedAnalytics, excludeClientCloseBeforeRequestAsError, excludeDnsPolicyDropAsSignificant, excludeGsDownAsError, excludeHttpErrorCodes, excludeInvalidDnsDomainAsError, excludeInvalidDnsQueryAsError, excludeNoDnsRecordAsError, excludeNoValidGsMemberAsError, excludePersistenceChangeAsError, excludeServerDnsErrorAsError, excludeServerTcpResetAsError, excludeSipErrorCodes, excludeSynRetransmitAsError, excludeTcpResetAsError, excludeUnsupportedDnsQueryAsError, healthscoreMaxServerLimit, hsEventThrottleWindow, hsMaxAnomalyPenalty, hsMaxResourcesPenalty, hsMaxSecurityPenalty, hsMinDosRate, hsPerformanceBoost, hsPscoreTrafficThresholdL4Client, hsPscoreTrafficThresholdL4Server, hsSecurityCertscoreExpired, hsSecurityCertscoreGt30d, hsSecurityCertscoreLe07d, hsSecurityCertscoreLe30d, hsSecurityChainInvalidityPenalty, hsSecurityCipherscoreEq000b, hsSecurityCipherscoreGe128b, hsSecurityCipherscoreLt128b, hsSecurityEncalgoScoreNone, hsSecurityEncalgoScoreRc4, hsSecurityHstsPenalty, hsSecurityNonpfsPenalty, hsSecuritySelfsignedcertPenalty, hsSecuritySsl30Score, hsSecurityTls10Score, hsSecurityTls11Score, hsSecurityTls12Score, hsSecurityTls13Score, hsSecurityWeakSignatureAlgoPenalty, name, ondemandMetricsIdleTimeout, ranges, respCodeBlock, sensitiveLogProfile, sipLogDepth, tenantRef, url, uuid);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AnalyticsProfile {\n");
    
    sb.append("    _lastModified: ").append(toIndentedString(_lastModified)).append("\n");
    sb.append("    apdexResponseThreshold: ").append(toIndentedString(apdexResponseThreshold)).append("\n");
    sb.append("    apdexResponseToleratedFactor: ").append(toIndentedString(apdexResponseToleratedFactor)).append("\n");
    sb.append("    apdexRttThreshold: ").append(toIndentedString(apdexRttThreshold)).append("\n");
    sb.append("    apdexRttToleratedFactor: ").append(toIndentedString(apdexRttToleratedFactor)).append("\n");
    sb.append("    apdexRumThreshold: ").append(toIndentedString(apdexRumThreshold)).append("\n");
    sb.append("    apdexRumToleratedFactor: ").append(toIndentedString(apdexRumToleratedFactor)).append("\n");
    sb.append("    apdexServerResponseThreshold: ").append(toIndentedString(apdexServerResponseThreshold)).append("\n");
    sb.append("    apdexServerResponseToleratedFactor: ").append(toIndentedString(apdexServerResponseToleratedFactor)).append("\n");
    sb.append("    apdexServerRttThreshold: ").append(toIndentedString(apdexServerRttThreshold)).append("\n");
    sb.append("    apdexServerRttToleratedFactor: ").append(toIndentedString(apdexServerRttToleratedFactor)).append("\n");
    sb.append("    clientLogConfig: ").append(toIndentedString(clientLogConfig)).append("\n");
    sb.append("    clientLogStreamingConfig: ").append(toIndentedString(clientLogStreamingConfig)).append("\n");
    sb.append("    connLossyOooThreshold: ").append(toIndentedString(connLossyOooThreshold)).append("\n");
    sb.append("    connLossyTimeoRexmtThreshold: ").append(toIndentedString(connLossyTimeoRexmtThreshold)).append("\n");
    sb.append("    connLossyTotalRexmtThreshold: ").append(toIndentedString(connLossyTotalRexmtThreshold)).append("\n");
    sb.append("    connLossyZeroWinSizeEventThreshold: ").append(toIndentedString(connLossyZeroWinSizeEventThreshold)).append("\n");
    sb.append("    connServerLossyOooThreshold: ").append(toIndentedString(connServerLossyOooThreshold)).append("\n");
    sb.append("    connServerLossyTimeoRexmtThreshold: ").append(toIndentedString(connServerLossyTimeoRexmtThreshold)).append("\n");
    sb.append("    connServerLossyTotalRexmtThreshold: ").append(toIndentedString(connServerLossyTotalRexmtThreshold)).append("\n");
    sb.append("    connServerLossyZeroWinSizeEventThreshold: ").append(toIndentedString(connServerLossyZeroWinSizeEventThreshold)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    disableOndemandMetrics: ").append(toIndentedString(disableOndemandMetrics)).append("\n");
    sb.append("    disableSeAnalytics: ").append(toIndentedString(disableSeAnalytics)).append("\n");
    sb.append("    disableServerAnalytics: ").append(toIndentedString(disableServerAnalytics)).append("\n");
    sb.append("    disableVsAnalytics: ").append(toIndentedString(disableVsAnalytics)).append("\n");
    sb.append("    enableAdvancedAnalytics: ").append(toIndentedString(enableAdvancedAnalytics)).append("\n");
    sb.append("    excludeClientCloseBeforeRequestAsError: ").append(toIndentedString(excludeClientCloseBeforeRequestAsError)).append("\n");
    sb.append("    excludeDnsPolicyDropAsSignificant: ").append(toIndentedString(excludeDnsPolicyDropAsSignificant)).append("\n");
    sb.append("    excludeGsDownAsError: ").append(toIndentedString(excludeGsDownAsError)).append("\n");
    sb.append("    excludeHttpErrorCodes: ").append(toIndentedString(excludeHttpErrorCodes)).append("\n");
    sb.append("    excludeInvalidDnsDomainAsError: ").append(toIndentedString(excludeInvalidDnsDomainAsError)).append("\n");
    sb.append("    excludeInvalidDnsQueryAsError: ").append(toIndentedString(excludeInvalidDnsQueryAsError)).append("\n");
    sb.append("    excludeNoDnsRecordAsError: ").append(toIndentedString(excludeNoDnsRecordAsError)).append("\n");
    sb.append("    excludeNoValidGsMemberAsError: ").append(toIndentedString(excludeNoValidGsMemberAsError)).append("\n");
    sb.append("    excludePersistenceChangeAsError: ").append(toIndentedString(excludePersistenceChangeAsError)).append("\n");
    sb.append("    excludeServerDnsErrorAsError: ").append(toIndentedString(excludeServerDnsErrorAsError)).append("\n");
    sb.append("    excludeServerTcpResetAsError: ").append(toIndentedString(excludeServerTcpResetAsError)).append("\n");
    sb.append("    excludeSipErrorCodes: ").append(toIndentedString(excludeSipErrorCodes)).append("\n");
    sb.append("    excludeSynRetransmitAsError: ").append(toIndentedString(excludeSynRetransmitAsError)).append("\n");
    sb.append("    excludeTcpResetAsError: ").append(toIndentedString(excludeTcpResetAsError)).append("\n");
    sb.append("    excludeUnsupportedDnsQueryAsError: ").append(toIndentedString(excludeUnsupportedDnsQueryAsError)).append("\n");
    sb.append("    healthscoreMaxServerLimit: ").append(toIndentedString(healthscoreMaxServerLimit)).append("\n");
    sb.append("    hsEventThrottleWindow: ").append(toIndentedString(hsEventThrottleWindow)).append("\n");
    sb.append("    hsMaxAnomalyPenalty: ").append(toIndentedString(hsMaxAnomalyPenalty)).append("\n");
    sb.append("    hsMaxResourcesPenalty: ").append(toIndentedString(hsMaxResourcesPenalty)).append("\n");
    sb.append("    hsMaxSecurityPenalty: ").append(toIndentedString(hsMaxSecurityPenalty)).append("\n");
    sb.append("    hsMinDosRate: ").append(toIndentedString(hsMinDosRate)).append("\n");
    sb.append("    hsPerformanceBoost: ").append(toIndentedString(hsPerformanceBoost)).append("\n");
    sb.append("    hsPscoreTrafficThresholdL4Client: ").append(toIndentedString(hsPscoreTrafficThresholdL4Client)).append("\n");
    sb.append("    hsPscoreTrafficThresholdL4Server: ").append(toIndentedString(hsPscoreTrafficThresholdL4Server)).append("\n");
    sb.append("    hsSecurityCertscoreExpired: ").append(toIndentedString(hsSecurityCertscoreExpired)).append("\n");
    sb.append("    hsSecurityCertscoreGt30d: ").append(toIndentedString(hsSecurityCertscoreGt30d)).append("\n");
    sb.append("    hsSecurityCertscoreLe07d: ").append(toIndentedString(hsSecurityCertscoreLe07d)).append("\n");
    sb.append("    hsSecurityCertscoreLe30d: ").append(toIndentedString(hsSecurityCertscoreLe30d)).append("\n");
    sb.append("    hsSecurityChainInvalidityPenalty: ").append(toIndentedString(hsSecurityChainInvalidityPenalty)).append("\n");
    sb.append("    hsSecurityCipherscoreEq000b: ").append(toIndentedString(hsSecurityCipherscoreEq000b)).append("\n");
    sb.append("    hsSecurityCipherscoreGe128b: ").append(toIndentedString(hsSecurityCipherscoreGe128b)).append("\n");
    sb.append("    hsSecurityCipherscoreLt128b: ").append(toIndentedString(hsSecurityCipherscoreLt128b)).append("\n");
    sb.append("    hsSecurityEncalgoScoreNone: ").append(toIndentedString(hsSecurityEncalgoScoreNone)).append("\n");
    sb.append("    hsSecurityEncalgoScoreRc4: ").append(toIndentedString(hsSecurityEncalgoScoreRc4)).append("\n");
    sb.append("    hsSecurityHstsPenalty: ").append(toIndentedString(hsSecurityHstsPenalty)).append("\n");
    sb.append("    hsSecurityNonpfsPenalty: ").append(toIndentedString(hsSecurityNonpfsPenalty)).append("\n");
    sb.append("    hsSecuritySelfsignedcertPenalty: ").append(toIndentedString(hsSecuritySelfsignedcertPenalty)).append("\n");
    sb.append("    hsSecuritySsl30Score: ").append(toIndentedString(hsSecuritySsl30Score)).append("\n");
    sb.append("    hsSecurityTls10Score: ").append(toIndentedString(hsSecurityTls10Score)).append("\n");
    sb.append("    hsSecurityTls11Score: ").append(toIndentedString(hsSecurityTls11Score)).append("\n");
    sb.append("    hsSecurityTls12Score: ").append(toIndentedString(hsSecurityTls12Score)).append("\n");
    sb.append("    hsSecurityTls13Score: ").append(toIndentedString(hsSecurityTls13Score)).append("\n");
    sb.append("    hsSecurityWeakSignatureAlgoPenalty: ").append(toIndentedString(hsSecurityWeakSignatureAlgoPenalty)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    ondemandMetricsIdleTimeout: ").append(toIndentedString(ondemandMetricsIdleTimeout)).append("\n");
    sb.append("    ranges: ").append(toIndentedString(ranges)).append("\n");
    sb.append("    respCodeBlock: ").append(toIndentedString(respCodeBlock)).append("\n");
    sb.append("    sensitiveLogProfile: ").append(toIndentedString(sensitiveLogProfile)).append("\n");
    sb.append("    sipLogDepth: ").append(toIndentedString(sipLogDepth)).append("\n");
    sb.append("    tenantRef: ").append(toIndentedString(tenantRef)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
