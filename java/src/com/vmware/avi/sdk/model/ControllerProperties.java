/*
 * Avi avi_global_spec Object API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 20.1.1
 * Contact: support@avinetworks.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.vmware.avi.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;
/**
 * ControllerProperties
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-03-12T12:27:26.755+05:30[Asia/Kolkata]")
public class ControllerProperties {
  @JsonProperty("_last_modified")
  private String _lastModified = null;

  @JsonProperty("allow_admin_network_updates")
  private Boolean allowAdminNetworkUpdates = null;

  @JsonProperty("allow_ip_forwarding")
  private Boolean allowIpForwarding = null;

  @JsonProperty("allow_unauthenticated_apis")
  private Boolean allowUnauthenticatedApis = null;

  @JsonProperty("allow_unauthenticated_nodes")
  private Boolean allowUnauthenticatedNodes = null;

  @JsonProperty("api_idle_timeout")
  private Integer apiIdleTimeout = 15;

  @JsonProperty("api_perf_logging_threshold")
  private Integer apiPerfLoggingThreshold = 10000;

  @JsonProperty("appviewx_compat_mode")
  private Boolean appviewxCompatMode = null;

  @JsonProperty("attach_ip_retry_interval")
  private Integer attachIpRetryInterval = 360;

  @JsonProperty("attach_ip_retry_limit")
  private Integer attachIpRetryLimit = 4;

  @JsonProperty("bm_use_ansible")
  private Boolean bmUseAnsible = true;

  @JsonProperty("cleanup_expired_authtoken_timeout_period")
  private Integer cleanupExpiredAuthtokenTimeoutPeriod = 60;

  @JsonProperty("cleanup_sessions_timeout_period")
  private Integer cleanupSessionsTimeoutPeriod = 60;

  @JsonProperty("cloud_reconcile")
  private Boolean cloudReconcile = true;

  @JsonProperty("cluster_ip_gratuitous_arp_period")
  private Integer clusterIpGratuitousArpPeriod = 60;

  @JsonProperty("consistency_check_timeout_period")
  private Integer consistencyCheckTimeoutPeriod = 60;

  @JsonProperty("crashed_se_reboot")
  private Integer crashedSeReboot = 900;

  @JsonProperty("dead_se_detection_timer")
  private Integer deadSeDetectionTimer = 360;

  @JsonProperty("default_minimum_api_timeout")
  private Integer defaultMinimumApiTimeout = 60;

  @JsonProperty("dns_refresh_period")
  private Integer dnsRefreshPeriod = 60;

  @JsonProperty("dummy")
  private Integer dummy = null;

  @JsonProperty("enable_api_sharding")
  private Boolean enableApiSharding = true;

  @JsonProperty("enable_memory_balancer")
  private Boolean enableMemoryBalancer = true;

  @JsonProperty("fatal_error_lease_time")
  private Integer fatalErrorLeaseTime = 120;

  @JsonProperty("max_dead_se_in_grp")
  private Integer maxDeadSeInGrp = 1;

  @JsonProperty("max_pcap_per_tenant")
  private Integer maxPcapPerTenant = 4;

  @JsonProperty("max_se_spawn_interval_delay")
  private Integer maxSeSpawnIntervalDelay = 1800;

  @JsonProperty("max_seq_attach_ip_failures")
  private Integer maxSeqAttachIpFailures = 3;

  @JsonProperty("max_seq_vnic_failures")
  private Integer maxSeqVnicFailures = 3;

  @JsonProperty("permission_scoped_shared_admin_networks")
  private Boolean permissionScopedSharedAdminNetworks = null;

  @JsonProperty("persistence_key_rotate_period")
  private Integer persistenceKeyRotatePeriod = null;

  @JsonProperty("portal_request_burst_limit")
  private Integer portalRequestBurstLimit = null;

  @JsonProperty("portal_request_rate_limit")
  private Integer portalRequestRateLimit = null;

  @JsonProperty("portal_token")
  private String portalToken = null;

  @JsonProperty("process_locked_useraccounts_timeout_period")
  private Integer processLockedUseraccountsTimeoutPeriod = 1;

  @JsonProperty("process_pki_profile_timeout_period")
  private Integer processPkiProfileTimeoutPeriod = 1440;

  @JsonProperty("query_host_fail")
  private Integer queryHostFail = 180;

  @JsonProperty("safenet_hsm_version")
  private String safenetHsmVersion = null;

  @JsonProperty("se_create_timeout")
  private Integer seCreateTimeout = 900;

  @JsonProperty("se_failover_attempt_interval")
  private Integer seFailoverAttemptInterval = 300;

  @JsonProperty("se_from_marketplace")
  private String seFromMarketplace = "IMAGE";

  @JsonProperty("se_offline_del")
  private Integer seOfflineDel = 172000;

  @JsonProperty("se_spawn_retry_interval")
  private Integer seSpawnRetryInterval = 300;

  @JsonProperty("se_vnic_cooldown")
  private Integer seVnicCooldown = 120;

  @JsonProperty("secure_channel_cleanup_timeout")
  private Integer secureChannelCleanupTimeout = 60;

  @JsonProperty("secure_channel_controller_token_timeout")
  private Integer secureChannelControllerTokenTimeout = 60;

  @JsonProperty("secure_channel_se_token_timeout")
  private Integer secureChannelSeTokenTimeout = 60;

  @JsonProperty("seupgrade_copy_pool_size")
  private Integer seupgradeCopyPoolSize = 5;

  @JsonProperty("seupgrade_fabric_pool_size")
  private Integer seupgradeFabricPoolSize = 20;

  @JsonProperty("seupgrade_segroup_min_dead_timeout")
  private Integer seupgradeSegroupMinDeadTimeout = 360;

  @JsonProperty("shared_ssl_certificates")
  private Boolean sharedSslCertificates = null;

  @JsonProperty("ssl_certificate_expiry_warning_days")
  private List<Integer> sslCertificateExpiryWarningDays = null;

  @JsonProperty("unresponsive_se_reboot")
  private Integer unresponsiveSeReboot = 300;

  @JsonProperty("upgrade_dns_ttl")
  private Integer upgradeDnsTtl = 5;

  @JsonProperty("upgrade_lease_time")
  private Integer upgradeLeaseTime = 360;

  @JsonProperty("url")
  private String url = null;

  @JsonProperty("uuid")
  private String uuid = null;

  @JsonProperty("vnic_op_fail_time")
  private Integer vnicOpFailTime = 180;

  @JsonProperty("vs_apic_scaleout_timeout")
  private Integer vsApicScaleoutTimeout = 360;

  @JsonProperty("vs_awaiting_se_timeout")
  private Integer vsAwaitingSeTimeout = 60;

  @JsonProperty("vs_key_rotate_period")
  private Integer vsKeyRotatePeriod = 360;

  @JsonProperty("vs_scaleout_ready_check_interval")
  private Integer vsScaleoutReadyCheckInterval = 60;

  @JsonProperty("vs_se_attach_ip_fail")
  private Integer vsSeAttachIpFail = 600;

  @JsonProperty("vs_se_bootup_fail")
  private Integer vsSeBootupFail = 480;

  @JsonProperty("vs_se_create_fail")
  private Integer vsSeCreateFail = 1500;

  @JsonProperty("vs_se_ping_fail")
  private Integer vsSePingFail = 60;

  @JsonProperty("vs_se_vnic_fail")
  private Integer vsSeVnicFail = 300;

  @JsonProperty("vs_se_vnic_ip_fail")
  private Integer vsSeVnicIpFail = 120;

  @JsonProperty("warmstart_se_reconnect_wait_time")
  private Integer warmstartSeReconnectWaitTime = 480;

  @JsonProperty("warmstart_vs_resync_wait_time")
  private Integer warmstartVsResyncWaitTime = 300;

   /**
   * UNIX time since epoch in microseconds. Units(MICROSECONDS).
   * @return _lastModified
  **/
  @Schema(description = "UNIX time since epoch in microseconds. Units(MICROSECONDS).")
  public String getLastModified() {
    return _lastModified;
  }

  public ControllerProperties allowAdminNetworkUpdates(Boolean allowAdminNetworkUpdates) {
    this.allowAdminNetworkUpdates = allowAdminNetworkUpdates;
    return this;
  }

   /**
   * Allow non-admin tenants to update admin VrfContext and Network objects. Field introduced in 18.2.7, 20.1.1.
   * @return allowAdminNetworkUpdates
  **/
  @Schema(description = "Allow non-admin tenants to update admin VrfContext and Network objects. Field introduced in 18.2.7, 20.1.1.")
  public Boolean isAllowAdminNetworkUpdates() {
    return allowAdminNetworkUpdates;
  }

  public void setAllowAdminNetworkUpdates(Boolean allowAdminNetworkUpdates) {
    this.allowAdminNetworkUpdates = allowAdminNetworkUpdates;
  }

  public ControllerProperties allowIpForwarding(Boolean allowIpForwarding) {
    this.allowIpForwarding = allowIpForwarding;
    return this;
  }

   /**
   *  Field introduced in 17.1.1.
   * @return allowIpForwarding
  **/
  @Schema(description = " Field introduced in 17.1.1.")
  public Boolean isAllowIpForwarding() {
    return allowIpForwarding;
  }

  public void setAllowIpForwarding(Boolean allowIpForwarding) {
    this.allowIpForwarding = allowIpForwarding;
  }

  public ControllerProperties allowUnauthenticatedApis(Boolean allowUnauthenticatedApis) {
    this.allowUnauthenticatedApis = allowUnauthenticatedApis;
    return this;
  }

   /**
   * Allow unauthenticated access for special APIs.
   * @return allowUnauthenticatedApis
  **/
  @Schema(description = "Allow unauthenticated access for special APIs.")
  public Boolean isAllowUnauthenticatedApis() {
    return allowUnauthenticatedApis;
  }

  public void setAllowUnauthenticatedApis(Boolean allowUnauthenticatedApis) {
    this.allowUnauthenticatedApis = allowUnauthenticatedApis;
  }

  public ControllerProperties allowUnauthenticatedNodes(Boolean allowUnauthenticatedNodes) {
    this.allowUnauthenticatedNodes = allowUnauthenticatedNodes;
    return this;
  }

   /**
   * Placeholder for description of property allow_unauthenticated_nodes of obj type ControllerProperties field type str  type boolean
   * @return allowUnauthenticatedNodes
  **/
  @Schema(description = "Placeholder for description of property allow_unauthenticated_nodes of obj type ControllerProperties field type str  type boolean")
  public Boolean isAllowUnauthenticatedNodes() {
    return allowUnauthenticatedNodes;
  }

  public void setAllowUnauthenticatedNodes(Boolean allowUnauthenticatedNodes) {
    this.allowUnauthenticatedNodes = allowUnauthenticatedNodes;
  }

  public ControllerProperties apiIdleTimeout(Integer apiIdleTimeout) {
    this.apiIdleTimeout = apiIdleTimeout;
    return this;
  }

   /**
   *  Allowed values are 0-1440.
   * @return apiIdleTimeout
  **/
  @Schema(description = " Allowed values are 0-1440.")
  public Integer getApiIdleTimeout() {
    return apiIdleTimeout;
  }

  public void setApiIdleTimeout(Integer apiIdleTimeout) {
    this.apiIdleTimeout = apiIdleTimeout;
  }

  public ControllerProperties apiPerfLoggingThreshold(Integer apiPerfLoggingThreshold) {
    this.apiPerfLoggingThreshold = apiPerfLoggingThreshold;
    return this;
  }

   /**
   * Threshold to log request timing in portal_performance.log and Server-Timing response header. Any stage taking longer than 1% of the threshold will be included in the Server-Timing header. Field introduced in 18.1.4, 18.2.1.
   * @return apiPerfLoggingThreshold
  **/
  @Schema(description = "Threshold to log request timing in portal_performance.log and Server-Timing response header. Any stage taking longer than 1% of the threshold will be included in the Server-Timing header. Field introduced in 18.1.4, 18.2.1.")
  public Integer getApiPerfLoggingThreshold() {
    return apiPerfLoggingThreshold;
  }

  public void setApiPerfLoggingThreshold(Integer apiPerfLoggingThreshold) {
    this.apiPerfLoggingThreshold = apiPerfLoggingThreshold;
  }

  public ControllerProperties appviewxCompatMode(Boolean appviewxCompatMode) {
    this.appviewxCompatMode = appviewxCompatMode;
    return this;
  }

   /**
   * Export configuration in appviewx compatibility mode. Field introduced in 17.1.1.
   * @return appviewxCompatMode
  **/
  @Schema(description = "Export configuration in appviewx compatibility mode. Field introduced in 17.1.1.")
  public Boolean isAppviewxCompatMode() {
    return appviewxCompatMode;
  }

  public void setAppviewxCompatMode(Boolean appviewxCompatMode) {
    this.appviewxCompatMode = appviewxCompatMode;
  }

  public ControllerProperties attachIpRetryInterval(Integer attachIpRetryInterval) {
    this.attachIpRetryInterval = attachIpRetryInterval;
    return this;
  }

   /**
   * Number of attach_ip_retry_interval.
   * @return attachIpRetryInterval
  **/
  @Schema(description = "Number of attach_ip_retry_interval.")
  public Integer getAttachIpRetryInterval() {
    return attachIpRetryInterval;
  }

  public void setAttachIpRetryInterval(Integer attachIpRetryInterval) {
    this.attachIpRetryInterval = attachIpRetryInterval;
  }

  public ControllerProperties attachIpRetryLimit(Integer attachIpRetryLimit) {
    this.attachIpRetryLimit = attachIpRetryLimit;
    return this;
  }

   /**
   * Number of attach_ip_retry_limit.
   * @return attachIpRetryLimit
  **/
  @Schema(description = "Number of attach_ip_retry_limit.")
  public Integer getAttachIpRetryLimit() {
    return attachIpRetryLimit;
  }

  public void setAttachIpRetryLimit(Integer attachIpRetryLimit) {
    this.attachIpRetryLimit = attachIpRetryLimit;
  }

  public ControllerProperties bmUseAnsible(Boolean bmUseAnsible) {
    this.bmUseAnsible = bmUseAnsible;
    return this;
  }

   /**
   * Use Ansible for SE creation in baremetal. Field introduced in 17.2.2.
   * @return bmUseAnsible
  **/
  @Schema(description = "Use Ansible for SE creation in baremetal. Field introduced in 17.2.2.")
  public Boolean isBmUseAnsible() {
    return bmUseAnsible;
  }

  public void setBmUseAnsible(Boolean bmUseAnsible) {
    this.bmUseAnsible = bmUseAnsible;
  }

  public ControllerProperties cleanupExpiredAuthtokenTimeoutPeriod(Integer cleanupExpiredAuthtokenTimeoutPeriod) {
    this.cleanupExpiredAuthtokenTimeoutPeriod = cleanupExpiredAuthtokenTimeoutPeriod;
    return this;
  }

   /**
   * Period for auth token cleanup job. Field introduced in 18.1.1.
   * @return cleanupExpiredAuthtokenTimeoutPeriod
  **/
  @Schema(description = "Period for auth token cleanup job. Field introduced in 18.1.1.")
  public Integer getCleanupExpiredAuthtokenTimeoutPeriod() {
    return cleanupExpiredAuthtokenTimeoutPeriod;
  }

  public void setCleanupExpiredAuthtokenTimeoutPeriod(Integer cleanupExpiredAuthtokenTimeoutPeriod) {
    this.cleanupExpiredAuthtokenTimeoutPeriod = cleanupExpiredAuthtokenTimeoutPeriod;
  }

  public ControllerProperties cleanupSessionsTimeoutPeriod(Integer cleanupSessionsTimeoutPeriod) {
    this.cleanupSessionsTimeoutPeriod = cleanupSessionsTimeoutPeriod;
    return this;
  }

   /**
   * Period for sessions cleanup job. Field introduced in 18.1.1.
   * @return cleanupSessionsTimeoutPeriod
  **/
  @Schema(description = "Period for sessions cleanup job. Field introduced in 18.1.1.")
  public Integer getCleanupSessionsTimeoutPeriod() {
    return cleanupSessionsTimeoutPeriod;
  }

  public void setCleanupSessionsTimeoutPeriod(Integer cleanupSessionsTimeoutPeriod) {
    this.cleanupSessionsTimeoutPeriod = cleanupSessionsTimeoutPeriod;
  }

  public ControllerProperties cloudReconcile(Boolean cloudReconcile) {
    this.cloudReconcile = cloudReconcile;
    return this;
  }

   /**
   * Enable/Disable periodic reconcile for all the clouds. Field introduced in 17.2.14,18.1.5,18.2.1.
   * @return cloudReconcile
  **/
  @Schema(description = "Enable/Disable periodic reconcile for all the clouds. Field introduced in 17.2.14,18.1.5,18.2.1.")
  public Boolean isCloudReconcile() {
    return cloudReconcile;
  }

  public void setCloudReconcile(Boolean cloudReconcile) {
    this.cloudReconcile = cloudReconcile;
  }

  public ControllerProperties clusterIpGratuitousArpPeriod(Integer clusterIpGratuitousArpPeriod) {
    this.clusterIpGratuitousArpPeriod = clusterIpGratuitousArpPeriod;
    return this;
  }

   /**
   * Period for cluster ip gratuitous arp job.
   * @return clusterIpGratuitousArpPeriod
  **/
  @Schema(description = "Period for cluster ip gratuitous arp job.")
  public Integer getClusterIpGratuitousArpPeriod() {
    return clusterIpGratuitousArpPeriod;
  }

  public void setClusterIpGratuitousArpPeriod(Integer clusterIpGratuitousArpPeriod) {
    this.clusterIpGratuitousArpPeriod = clusterIpGratuitousArpPeriod;
  }

  public ControllerProperties consistencyCheckTimeoutPeriod(Integer consistencyCheckTimeoutPeriod) {
    this.consistencyCheckTimeoutPeriod = consistencyCheckTimeoutPeriod;
    return this;
  }

   /**
   * Period for consistency check job. Field introduced in 18.1.1.
   * @return consistencyCheckTimeoutPeriod
  **/
  @Schema(description = "Period for consistency check job. Field introduced in 18.1.1.")
  public Integer getConsistencyCheckTimeoutPeriod() {
    return consistencyCheckTimeoutPeriod;
  }

  public void setConsistencyCheckTimeoutPeriod(Integer consistencyCheckTimeoutPeriod) {
    this.consistencyCheckTimeoutPeriod = consistencyCheckTimeoutPeriod;
  }

  public ControllerProperties crashedSeReboot(Integer crashedSeReboot) {
    this.crashedSeReboot = crashedSeReboot;
    return this;
  }

   /**
   * Number of crashed_se_reboot.
   * @return crashedSeReboot
  **/
  @Schema(description = "Number of crashed_se_reboot.")
  public Integer getCrashedSeReboot() {
    return crashedSeReboot;
  }

  public void setCrashedSeReboot(Integer crashedSeReboot) {
    this.crashedSeReboot = crashedSeReboot;
  }

  public ControllerProperties deadSeDetectionTimer(Integer deadSeDetectionTimer) {
    this.deadSeDetectionTimer = deadSeDetectionTimer;
    return this;
  }

   /**
   * Number of dead_se_detection_timer.
   * @return deadSeDetectionTimer
  **/
  @Schema(description = "Number of dead_se_detection_timer.")
  public Integer getDeadSeDetectionTimer() {
    return deadSeDetectionTimer;
  }

  public void setDeadSeDetectionTimer(Integer deadSeDetectionTimer) {
    this.deadSeDetectionTimer = deadSeDetectionTimer;
  }

  public ControllerProperties defaultMinimumApiTimeout(Integer defaultMinimumApiTimeout) {
    this.defaultMinimumApiTimeout = defaultMinimumApiTimeout;
    return this;
  }

   /**
   * Minimum api timeout value.If this value is not 60, it will be the default timeout for all APIs that do not have a specific timeout.If an API has a specific timeout but is less than this value, this value will become the new timeout. Allowed values are 60-3600. Field introduced in 18.2.6.
   * @return defaultMinimumApiTimeout
  **/
  @Schema(description = "Minimum api timeout value.If this value is not 60, it will be the default timeout for all APIs that do not have a specific timeout.If an API has a specific timeout but is less than this value, this value will become the new timeout. Allowed values are 60-3600. Field introduced in 18.2.6.")
  public Integer getDefaultMinimumApiTimeout() {
    return defaultMinimumApiTimeout;
  }

  public void setDefaultMinimumApiTimeout(Integer defaultMinimumApiTimeout) {
    this.defaultMinimumApiTimeout = defaultMinimumApiTimeout;
  }

  public ControllerProperties dnsRefreshPeriod(Integer dnsRefreshPeriod) {
    this.dnsRefreshPeriod = dnsRefreshPeriod;
    return this;
  }

   /**
   * Period for refresh pool and gslb DNS job.
   * @return dnsRefreshPeriod
  **/
  @Schema(description = "Period for refresh pool and gslb DNS job.")
  public Integer getDnsRefreshPeriod() {
    return dnsRefreshPeriod;
  }

  public void setDnsRefreshPeriod(Integer dnsRefreshPeriod) {
    this.dnsRefreshPeriod = dnsRefreshPeriod;
  }

  public ControllerProperties dummy(Integer dummy) {
    this.dummy = dummy;
    return this;
  }

   /**
   * Number of dummy.
   * @return dummy
  **/
  @Schema(description = "Number of dummy.")
  public Integer getDummy() {
    return dummy;
  }

  public void setDummy(Integer dummy) {
    this.dummy = dummy;
  }

  public ControllerProperties enableApiSharding(Boolean enableApiSharding) {
    this.enableApiSharding = enableApiSharding;
    return this;
  }

   /**
   * This setting enables the controller leader to shard API requests to the followers (if any). Field introduced in 18.1.5, 18.2.1.
   * @return enableApiSharding
  **/
  @Schema(description = "This setting enables the controller leader to shard API requests to the followers (if any). Field introduced in 18.1.5, 18.2.1.")
  public Boolean isEnableApiSharding() {
    return enableApiSharding;
  }

  public void setEnableApiSharding(Boolean enableApiSharding) {
    this.enableApiSharding = enableApiSharding;
  }

  public ControllerProperties enableMemoryBalancer(Boolean enableMemoryBalancer) {
    this.enableMemoryBalancer = enableMemoryBalancer;
    return this;
  }

   /**
   * Enable/Disable Memory Balancer. Field introduced in 17.2.8.
   * @return enableMemoryBalancer
  **/
  @Schema(description = "Enable/Disable Memory Balancer. Field introduced in 17.2.8.")
  public Boolean isEnableMemoryBalancer() {
    return enableMemoryBalancer;
  }

  public void setEnableMemoryBalancer(Boolean enableMemoryBalancer) {
    this.enableMemoryBalancer = enableMemoryBalancer;
  }

  public ControllerProperties fatalErrorLeaseTime(Integer fatalErrorLeaseTime) {
    this.fatalErrorLeaseTime = fatalErrorLeaseTime;
    return this;
  }

   /**
   * Number of fatal_error_lease_time.
   * @return fatalErrorLeaseTime
  **/
  @Schema(description = "Number of fatal_error_lease_time.")
  public Integer getFatalErrorLeaseTime() {
    return fatalErrorLeaseTime;
  }

  public void setFatalErrorLeaseTime(Integer fatalErrorLeaseTime) {
    this.fatalErrorLeaseTime = fatalErrorLeaseTime;
  }

  public ControllerProperties maxDeadSeInGrp(Integer maxDeadSeInGrp) {
    this.maxDeadSeInGrp = maxDeadSeInGrp;
    return this;
  }

   /**
   * Number of max_dead_se_in_grp.
   * @return maxDeadSeInGrp
  **/
  @Schema(description = "Number of max_dead_se_in_grp.")
  public Integer getMaxDeadSeInGrp() {
    return maxDeadSeInGrp;
  }

  public void setMaxDeadSeInGrp(Integer maxDeadSeInGrp) {
    this.maxDeadSeInGrp = maxDeadSeInGrp;
  }

  public ControllerProperties maxPcapPerTenant(Integer maxPcapPerTenant) {
    this.maxPcapPerTenant = maxPcapPerTenant;
    return this;
  }

   /**
   * Maximum number of pcap files stored per tenant.
   * @return maxPcapPerTenant
  **/
  @Schema(description = "Maximum number of pcap files stored per tenant.")
  public Integer getMaxPcapPerTenant() {
    return maxPcapPerTenant;
  }

  public void setMaxPcapPerTenant(Integer maxPcapPerTenant) {
    this.maxPcapPerTenant = maxPcapPerTenant;
  }

  public ControllerProperties maxSeSpawnIntervalDelay(Integer maxSeSpawnIntervalDelay) {
    this.maxSeSpawnIntervalDelay = maxSeSpawnIntervalDelay;
    return this;
  }

   /**
   * Maximum delay possible to add to se_spawn_retry_interval after successive SE spawn failure. Field introduced in 20.1.1.
   * @return maxSeSpawnIntervalDelay
  **/
  @Schema(description = "Maximum delay possible to add to se_spawn_retry_interval after successive SE spawn failure. Field introduced in 20.1.1.")
  public Integer getMaxSeSpawnIntervalDelay() {
    return maxSeSpawnIntervalDelay;
  }

  public void setMaxSeSpawnIntervalDelay(Integer maxSeSpawnIntervalDelay) {
    this.maxSeSpawnIntervalDelay = maxSeSpawnIntervalDelay;
  }

  public ControllerProperties maxSeqAttachIpFailures(Integer maxSeqAttachIpFailures) {
    this.maxSeqAttachIpFailures = maxSeqAttachIpFailures;
    return this;
  }

   /**
   * Maximum number of consecutive attach IP failures that halts VS placement. Field introduced in 17.2.2.
   * @return maxSeqAttachIpFailures
  **/
  @Schema(description = "Maximum number of consecutive attach IP failures that halts VS placement. Field introduced in 17.2.2.")
  public Integer getMaxSeqAttachIpFailures() {
    return maxSeqAttachIpFailures;
  }

  public void setMaxSeqAttachIpFailures(Integer maxSeqAttachIpFailures) {
    this.maxSeqAttachIpFailures = maxSeqAttachIpFailures;
  }

  public ControllerProperties maxSeqVnicFailures(Integer maxSeqVnicFailures) {
    this.maxSeqVnicFailures = maxSeqVnicFailures;
    return this;
  }

   /**
   * Number of max_seq_vnic_failures.
   * @return maxSeqVnicFailures
  **/
  @Schema(description = "Number of max_seq_vnic_failures.")
  public Integer getMaxSeqVnicFailures() {
    return maxSeqVnicFailures;
  }

  public void setMaxSeqVnicFailures(Integer maxSeqVnicFailures) {
    this.maxSeqVnicFailures = maxSeqVnicFailures;
  }

  public ControllerProperties permissionScopedSharedAdminNetworks(Boolean permissionScopedSharedAdminNetworks) {
    this.permissionScopedSharedAdminNetworks = permissionScopedSharedAdminNetworks;
    return this;
  }

   /**
   * Network and VrfContext objects from the admin tenant will not be shared to non-admin tenants unless admin permissions are granted. Field introduced in 18.2.7, 20.1.1.
   * @return permissionScopedSharedAdminNetworks
  **/
  @Schema(description = "Network and VrfContext objects from the admin tenant will not be shared to non-admin tenants unless admin permissions are granted. Field introduced in 18.2.7, 20.1.1.")
  public Boolean isPermissionScopedSharedAdminNetworks() {
    return permissionScopedSharedAdminNetworks;
  }

  public void setPermissionScopedSharedAdminNetworks(Boolean permissionScopedSharedAdminNetworks) {
    this.permissionScopedSharedAdminNetworks = permissionScopedSharedAdminNetworks;
  }

  public ControllerProperties persistenceKeyRotatePeriod(Integer persistenceKeyRotatePeriod) {
    this.persistenceKeyRotatePeriod = persistenceKeyRotatePeriod;
    return this;
  }

   /**
   * Period for rotate app persistence keys job. Allowed values are 1-1051200. Special values are 0 - &#x27;Disabled&#x27;.
   * @return persistenceKeyRotatePeriod
  **/
  @Schema(description = "Period for rotate app persistence keys job. Allowed values are 1-1051200. Special values are 0 - 'Disabled'.")
  public Integer getPersistenceKeyRotatePeriod() {
    return persistenceKeyRotatePeriod;
  }

  public void setPersistenceKeyRotatePeriod(Integer persistenceKeyRotatePeriod) {
    this.persistenceKeyRotatePeriod = persistenceKeyRotatePeriod;
  }

  public ControllerProperties portalRequestBurstLimit(Integer portalRequestBurstLimit) {
    this.portalRequestBurstLimit = portalRequestBurstLimit;
    return this;
  }

   /**
   * Burst limit on number of incoming requests0 to disable. Field introduced in 20.1.1.
   * @return portalRequestBurstLimit
  **/
  @Schema(description = "Burst limit on number of incoming requests0 to disable. Field introduced in 20.1.1.")
  public Integer getPortalRequestBurstLimit() {
    return portalRequestBurstLimit;
  }

  public void setPortalRequestBurstLimit(Integer portalRequestBurstLimit) {
    this.portalRequestBurstLimit = portalRequestBurstLimit;
  }

  public ControllerProperties portalRequestRateLimit(Integer portalRequestRateLimit) {
    this.portalRequestRateLimit = portalRequestRateLimit;
    return this;
  }

   /**
   * Maximum average number of requests allowed per second0 to disable. Field introduced in 20.1.1.
   * @return portalRequestRateLimit
  **/
  @Schema(description = "Maximum average number of requests allowed per second0 to disable. Field introduced in 20.1.1.")
  public Integer getPortalRequestRateLimit() {
    return portalRequestRateLimit;
  }

  public void setPortalRequestRateLimit(Integer portalRequestRateLimit) {
    this.portalRequestRateLimit = portalRequestRateLimit;
  }

  public ControllerProperties portalToken(String portalToken) {
    this.portalToken = portalToken;
    return this;
  }

   /**
   * Token used for uploading tech-support to portal. Field introduced in 16.4.6,17.1.2.
   * @return portalToken
  **/
  @Schema(description = "Token used for uploading tech-support to portal. Field introduced in 16.4.6,17.1.2.")
  public String getPortalToken() {
    return portalToken;
  }

  public void setPortalToken(String portalToken) {
    this.portalToken = portalToken;
  }

  public ControllerProperties processLockedUseraccountsTimeoutPeriod(Integer processLockedUseraccountsTimeoutPeriod) {
    this.processLockedUseraccountsTimeoutPeriod = processLockedUseraccountsTimeoutPeriod;
    return this;
  }

   /**
   * Period for process locked user accounts job. Field introduced in 18.1.1.
   * @return processLockedUseraccountsTimeoutPeriod
  **/
  @Schema(description = "Period for process locked user accounts job. Field introduced in 18.1.1.")
  public Integer getProcessLockedUseraccountsTimeoutPeriod() {
    return processLockedUseraccountsTimeoutPeriod;
  }

  public void setProcessLockedUseraccountsTimeoutPeriod(Integer processLockedUseraccountsTimeoutPeriod) {
    this.processLockedUseraccountsTimeoutPeriod = processLockedUseraccountsTimeoutPeriod;
  }

  public ControllerProperties processPkiProfileTimeoutPeriod(Integer processPkiProfileTimeoutPeriod) {
    this.processPkiProfileTimeoutPeriod = processPkiProfileTimeoutPeriod;
    return this;
  }

   /**
   * Period for process PKI profile job. Field introduced in 18.1.1.
   * @return processPkiProfileTimeoutPeriod
  **/
  @Schema(description = "Period for process PKI profile job. Field introduced in 18.1.1.")
  public Integer getProcessPkiProfileTimeoutPeriod() {
    return processPkiProfileTimeoutPeriod;
  }

  public void setProcessPkiProfileTimeoutPeriod(Integer processPkiProfileTimeoutPeriod) {
    this.processPkiProfileTimeoutPeriod = processPkiProfileTimeoutPeriod;
  }

  public ControllerProperties queryHostFail(Integer queryHostFail) {
    this.queryHostFail = queryHostFail;
    return this;
  }

   /**
   * Number of query_host_fail.
   * @return queryHostFail
  **/
  @Schema(description = "Number of query_host_fail.")
  public Integer getQueryHostFail() {
    return queryHostFail;
  }

  public void setQueryHostFail(Integer queryHostFail) {
    this.queryHostFail = queryHostFail;
  }

  public ControllerProperties safenetHsmVersion(String safenetHsmVersion) {
    this.safenetHsmVersion = safenetHsmVersion;
    return this;
  }

   /**
   * Version of the safenet package installed on the controller. Field introduced in 16.5.2,17.2.3.
   * @return safenetHsmVersion
  **/
  @Schema(description = "Version of the safenet package installed on the controller. Field introduced in 16.5.2,17.2.3.")
  public String getSafenetHsmVersion() {
    return safenetHsmVersion;
  }

  public void setSafenetHsmVersion(String safenetHsmVersion) {
    this.safenetHsmVersion = safenetHsmVersion;
  }

  public ControllerProperties seCreateTimeout(Integer seCreateTimeout) {
    this.seCreateTimeout = seCreateTimeout;
    return this;
  }

   /**
   * Number of se_create_timeout.
   * @return seCreateTimeout
  **/
  @Schema(description = "Number of se_create_timeout.")
  public Integer getSeCreateTimeout() {
    return seCreateTimeout;
  }

  public void setSeCreateTimeout(Integer seCreateTimeout) {
    this.seCreateTimeout = seCreateTimeout;
  }

  public ControllerProperties seFailoverAttemptInterval(Integer seFailoverAttemptInterval) {
    this.seFailoverAttemptInterval = seFailoverAttemptInterval;
    return this;
  }

   /**
   * Interval between attempting failovers to an SE.
   * @return seFailoverAttemptInterval
  **/
  @Schema(description = "Interval between attempting failovers to an SE.")
  public Integer getSeFailoverAttemptInterval() {
    return seFailoverAttemptInterval;
  }

  public void setSeFailoverAttemptInterval(Integer seFailoverAttemptInterval) {
    this.seFailoverAttemptInterval = seFailoverAttemptInterval;
  }

  public ControllerProperties seFromMarketplace(String seFromMarketplace) {
    this.seFromMarketplace = seFromMarketplace;
    return this;
  }

   /**
   * This setting decides whether SE is to be deployed from the cloud marketplace or to be created by the controller. The setting is applicable only when BYOL license is selected. Enum options - MARKETPLACE, IMAGE. Field introduced in 18.1.4, 18.2.1.
   * @return seFromMarketplace
  **/
  @Schema(description = "This setting decides whether SE is to be deployed from the cloud marketplace or to be created by the controller. The setting is applicable only when BYOL license is selected. Enum options - MARKETPLACE, IMAGE. Field introduced in 18.1.4, 18.2.1.")
  public String getSeFromMarketplace() {
    return seFromMarketplace;
  }

  public void setSeFromMarketplace(String seFromMarketplace) {
    this.seFromMarketplace = seFromMarketplace;
  }

  public ControllerProperties seOfflineDel(Integer seOfflineDel) {
    this.seOfflineDel = seOfflineDel;
    return this;
  }

   /**
   * Number of se_offline_del.
   * @return seOfflineDel
  **/
  @Schema(description = "Number of se_offline_del.")
  public Integer getSeOfflineDel() {
    return seOfflineDel;
  }

  public void setSeOfflineDel(Integer seOfflineDel) {
    this.seOfflineDel = seOfflineDel;
  }

  public ControllerProperties seSpawnRetryInterval(Integer seSpawnRetryInterval) {
    this.seSpawnRetryInterval = seSpawnRetryInterval;
    return this;
  }

   /**
   * Default retry period before attempting another Service Engine spawn in SE Group. Field introduced in 20.1.1.
   * @return seSpawnRetryInterval
  **/
  @Schema(description = "Default retry period before attempting another Service Engine spawn in SE Group. Field introduced in 20.1.1.")
  public Integer getSeSpawnRetryInterval() {
    return seSpawnRetryInterval;
  }

  public void setSeSpawnRetryInterval(Integer seSpawnRetryInterval) {
    this.seSpawnRetryInterval = seSpawnRetryInterval;
  }

  public ControllerProperties seVnicCooldown(Integer seVnicCooldown) {
    this.seVnicCooldown = seVnicCooldown;
    return this;
  }

   /**
   * Number of se_vnic_cooldown.
   * @return seVnicCooldown
  **/
  @Schema(description = "Number of se_vnic_cooldown.")
  public Integer getSeVnicCooldown() {
    return seVnicCooldown;
  }

  public void setSeVnicCooldown(Integer seVnicCooldown) {
    this.seVnicCooldown = seVnicCooldown;
  }

  public ControllerProperties secureChannelCleanupTimeout(Integer secureChannelCleanupTimeout) {
    this.secureChannelCleanupTimeout = secureChannelCleanupTimeout;
    return this;
  }

   /**
   * Period for secure channel cleanup job.
   * @return secureChannelCleanupTimeout
  **/
  @Schema(description = "Period for secure channel cleanup job.")
  public Integer getSecureChannelCleanupTimeout() {
    return secureChannelCleanupTimeout;
  }

  public void setSecureChannelCleanupTimeout(Integer secureChannelCleanupTimeout) {
    this.secureChannelCleanupTimeout = secureChannelCleanupTimeout;
  }

  public ControllerProperties secureChannelControllerTokenTimeout(Integer secureChannelControllerTokenTimeout) {
    this.secureChannelControllerTokenTimeout = secureChannelControllerTokenTimeout;
    return this;
  }

   /**
   * Number of secure_channel_controller_token_timeout.
   * @return secureChannelControllerTokenTimeout
  **/
  @Schema(description = "Number of secure_channel_controller_token_timeout.")
  public Integer getSecureChannelControllerTokenTimeout() {
    return secureChannelControllerTokenTimeout;
  }

  public void setSecureChannelControllerTokenTimeout(Integer secureChannelControllerTokenTimeout) {
    this.secureChannelControllerTokenTimeout = secureChannelControllerTokenTimeout;
  }

  public ControllerProperties secureChannelSeTokenTimeout(Integer secureChannelSeTokenTimeout) {
    this.secureChannelSeTokenTimeout = secureChannelSeTokenTimeout;
    return this;
  }

   /**
   * Number of secure_channel_se_token_timeout.
   * @return secureChannelSeTokenTimeout
  **/
  @Schema(description = "Number of secure_channel_se_token_timeout.")
  public Integer getSecureChannelSeTokenTimeout() {
    return secureChannelSeTokenTimeout;
  }

  public void setSecureChannelSeTokenTimeout(Integer secureChannelSeTokenTimeout) {
    this.secureChannelSeTokenTimeout = secureChannelSeTokenTimeout;
  }

  public ControllerProperties seupgradeCopyPoolSize(Integer seupgradeCopyPoolSize) {
    this.seupgradeCopyPoolSize = seupgradeCopyPoolSize;
    return this;
  }

   /**
   * This parameter defines the number of simultaneous SE image downloads in a SeGroup. It is used to pace the SE downloads so that controller network/CPU bandwidth is a bounded operation. A value of 0 will disable the pacing scheme and all the SE(s) in the SeGroup will attempt to download the image. . Field introduced in 18.2.6.
   * @return seupgradeCopyPoolSize
  **/
  @Schema(description = "This parameter defines the number of simultaneous SE image downloads in a SeGroup. It is used to pace the SE downloads so that controller network/CPU bandwidth is a bounded operation. A value of 0 will disable the pacing scheme and all the SE(s) in the SeGroup will attempt to download the image. . Field introduced in 18.2.6.")
  public Integer getSeupgradeCopyPoolSize() {
    return seupgradeCopyPoolSize;
  }

  public void setSeupgradeCopyPoolSize(Integer seupgradeCopyPoolSize) {
    this.seupgradeCopyPoolSize = seupgradeCopyPoolSize;
  }

  public ControllerProperties seupgradeFabricPoolSize(Integer seupgradeFabricPoolSize) {
    this.seupgradeFabricPoolSize = seupgradeFabricPoolSize;
    return this;
  }

   /**
   * Pool size used for all fabric commands during se upgrade.
   * @return seupgradeFabricPoolSize
  **/
  @Schema(description = "Pool size used for all fabric commands during se upgrade.")
  public Integer getSeupgradeFabricPoolSize() {
    return seupgradeFabricPoolSize;
  }

  public void setSeupgradeFabricPoolSize(Integer seupgradeFabricPoolSize) {
    this.seupgradeFabricPoolSize = seupgradeFabricPoolSize;
  }

  public ControllerProperties seupgradeSegroupMinDeadTimeout(Integer seupgradeSegroupMinDeadTimeout) {
    this.seupgradeSegroupMinDeadTimeout = seupgradeSegroupMinDeadTimeout;
    return this;
  }

   /**
   * Time to wait before marking segroup upgrade as stuck.
   * @return seupgradeSegroupMinDeadTimeout
  **/
  @Schema(description = "Time to wait before marking segroup upgrade as stuck.")
  public Integer getSeupgradeSegroupMinDeadTimeout() {
    return seupgradeSegroupMinDeadTimeout;
  }

  public void setSeupgradeSegroupMinDeadTimeout(Integer seupgradeSegroupMinDeadTimeout) {
    this.seupgradeSegroupMinDeadTimeout = seupgradeSegroupMinDeadTimeout;
  }

  public ControllerProperties sharedSslCertificates(Boolean sharedSslCertificates) {
    this.sharedSslCertificates = sharedSslCertificates;
    return this;
  }

   /**
   * SSL Certificates in the admin tenant can be used in non-admin tenants. Field introduced in 18.2.5.
   * @return sharedSslCertificates
  **/
  @Schema(description = "SSL Certificates in the admin tenant can be used in non-admin tenants. Field introduced in 18.2.5.")
  public Boolean isSharedSslCertificates() {
    return sharedSslCertificates;
  }

  public void setSharedSslCertificates(Boolean sharedSslCertificates) {
    this.sharedSslCertificates = sharedSslCertificates;
  }

  public ControllerProperties sslCertificateExpiryWarningDays(List<Integer> sslCertificateExpiryWarningDays) {
    this.sslCertificateExpiryWarningDays = sslCertificateExpiryWarningDays;
    return this;
  }

  public ControllerProperties addSslCertificateExpiryWarningDaysItem(Integer sslCertificateExpiryWarningDaysItem) {
    if (this.sslCertificateExpiryWarningDays == null) {
      this.sslCertificateExpiryWarningDays = new ArrayList<Integer>();
    }
    this.sslCertificateExpiryWarningDays.add(sslCertificateExpiryWarningDaysItem);
    return this;
  }

   /**
   * Number of days for SSL Certificate expiry warning.
   * @return sslCertificateExpiryWarningDays
  **/
  @Schema(description = "Number of days for SSL Certificate expiry warning.")
  public List<Integer> getSslCertificateExpiryWarningDays() {
    return sslCertificateExpiryWarningDays;
  }

  public void setSslCertificateExpiryWarningDays(List<Integer> sslCertificateExpiryWarningDays) {
    this.sslCertificateExpiryWarningDays = sslCertificateExpiryWarningDays;
  }

  public ControllerProperties unresponsiveSeReboot(Integer unresponsiveSeReboot) {
    this.unresponsiveSeReboot = unresponsiveSeReboot;
    return this;
  }

   /**
   * Number of unresponsive_se_reboot.
   * @return unresponsiveSeReboot
  **/
  @Schema(description = "Number of unresponsive_se_reboot.")
  public Integer getUnresponsiveSeReboot() {
    return unresponsiveSeReboot;
  }

  public void setUnresponsiveSeReboot(Integer unresponsiveSeReboot) {
    this.unresponsiveSeReboot = unresponsiveSeReboot;
  }

  public ControllerProperties upgradeDnsTtl(Integer upgradeDnsTtl) {
    this.upgradeDnsTtl = upgradeDnsTtl;
    return this;
  }

   /**
   * Time to account for DNS TTL during upgrade. This is in addition to vs_scalein_timeout_for_upgrade in se_group. Field introduced in 17.1.1.
   * @return upgradeDnsTtl
  **/
  @Schema(description = "Time to account for DNS TTL during upgrade. This is in addition to vs_scalein_timeout_for_upgrade in se_group. Field introduced in 17.1.1.")
  public Integer getUpgradeDnsTtl() {
    return upgradeDnsTtl;
  }

  public void setUpgradeDnsTtl(Integer upgradeDnsTtl) {
    this.upgradeDnsTtl = upgradeDnsTtl;
  }

  public ControllerProperties upgradeLeaseTime(Integer upgradeLeaseTime) {
    this.upgradeLeaseTime = upgradeLeaseTime;
    return this;
  }

   /**
   * Number of upgrade_lease_time.
   * @return upgradeLeaseTime
  **/
  @Schema(description = "Number of upgrade_lease_time.")
  public Integer getUpgradeLeaseTime() {
    return upgradeLeaseTime;
  }

  public void setUpgradeLeaseTime(Integer upgradeLeaseTime) {
    this.upgradeLeaseTime = upgradeLeaseTime;
  }

   /**
   * url
   * @return url
  **/
  @Schema(description = "url")
  public String getUrl() {
    return url;
  }

  public ControllerProperties uuid(String uuid) {
    this.uuid = uuid;
    return this;
  }

   /**
   * Unique object identifier of the object.
   * @return uuid
  **/
  @Schema(description = "Unique object identifier of the object.")
  public String getUuid() {
    return uuid;
  }

  public void setUuid(String uuid) {
    this.uuid = uuid;
  }

  public ControllerProperties vnicOpFailTime(Integer vnicOpFailTime) {
    this.vnicOpFailTime = vnicOpFailTime;
    return this;
  }

   /**
   * Number of vnic_op_fail_time.
   * @return vnicOpFailTime
  **/
  @Schema(description = "Number of vnic_op_fail_time.")
  public Integer getVnicOpFailTime() {
    return vnicOpFailTime;
  }

  public void setVnicOpFailTime(Integer vnicOpFailTime) {
    this.vnicOpFailTime = vnicOpFailTime;
  }

  public ControllerProperties vsApicScaleoutTimeout(Integer vsApicScaleoutTimeout) {
    this.vsApicScaleoutTimeout = vsApicScaleoutTimeout;
    return this;
  }

   /**
   * Time to wait for the scaled out SE to become ready before marking the scaleout done, applies to APIC configuration only.
   * @return vsApicScaleoutTimeout
  **/
  @Schema(description = "Time to wait for the scaled out SE to become ready before marking the scaleout done, applies to APIC configuration only.")
  public Integer getVsApicScaleoutTimeout() {
    return vsApicScaleoutTimeout;
  }

  public void setVsApicScaleoutTimeout(Integer vsApicScaleoutTimeout) {
    this.vsApicScaleoutTimeout = vsApicScaleoutTimeout;
  }

  public ControllerProperties vsAwaitingSeTimeout(Integer vsAwaitingSeTimeout) {
    this.vsAwaitingSeTimeout = vsAwaitingSeTimeout;
    return this;
  }

   /**
   * Number of vs_awaiting_se_timeout.
   * @return vsAwaitingSeTimeout
  **/
  @Schema(description = "Number of vs_awaiting_se_timeout.")
  public Integer getVsAwaitingSeTimeout() {
    return vsAwaitingSeTimeout;
  }

  public void setVsAwaitingSeTimeout(Integer vsAwaitingSeTimeout) {
    this.vsAwaitingSeTimeout = vsAwaitingSeTimeout;
  }

  public ControllerProperties vsKeyRotatePeriod(Integer vsKeyRotatePeriod) {
    this.vsKeyRotatePeriod = vsKeyRotatePeriod;
    return this;
  }

   /**
   * Period for rotate VS keys job. Allowed values are 1-1051200. Special values are 0 - &#x27;Disabled&#x27;.
   * @return vsKeyRotatePeriod
  **/
  @Schema(description = "Period for rotate VS keys job. Allowed values are 1-1051200. Special values are 0 - 'Disabled'.")
  public Integer getVsKeyRotatePeriod() {
    return vsKeyRotatePeriod;
  }

  public void setVsKeyRotatePeriod(Integer vsKeyRotatePeriod) {
    this.vsKeyRotatePeriod = vsKeyRotatePeriod;
  }

  public ControllerProperties vsScaleoutReadyCheckInterval(Integer vsScaleoutReadyCheckInterval) {
    this.vsScaleoutReadyCheckInterval = vsScaleoutReadyCheckInterval;
    return this;
  }

   /**
   * Interval for checking scaleout_ready status while controller is waiting for ScaleOutReady RPC from the Service Engine. Field introduced in 18.2.2.
   * @return vsScaleoutReadyCheckInterval
  **/
  @Schema(description = "Interval for checking scaleout_ready status while controller is waiting for ScaleOutReady RPC from the Service Engine. Field introduced in 18.2.2.")
  public Integer getVsScaleoutReadyCheckInterval() {
    return vsScaleoutReadyCheckInterval;
  }

  public void setVsScaleoutReadyCheckInterval(Integer vsScaleoutReadyCheckInterval) {
    this.vsScaleoutReadyCheckInterval = vsScaleoutReadyCheckInterval;
  }

  public ControllerProperties vsSeAttachIpFail(Integer vsSeAttachIpFail) {
    this.vsSeAttachIpFail = vsSeAttachIpFail;
    return this;
  }

   /**
   * Time to wait before marking attach IP operation on an SE as failed. Field introduced in 17.2.2.
   * @return vsSeAttachIpFail
  **/
  @Schema(description = "Time to wait before marking attach IP operation on an SE as failed. Field introduced in 17.2.2.")
  public Integer getVsSeAttachIpFail() {
    return vsSeAttachIpFail;
  }

  public void setVsSeAttachIpFail(Integer vsSeAttachIpFail) {
    this.vsSeAttachIpFail = vsSeAttachIpFail;
  }

  public ControllerProperties vsSeBootupFail(Integer vsSeBootupFail) {
    this.vsSeBootupFail = vsSeBootupFail;
    return this;
  }

   /**
   * Number of vs_se_bootup_fail.
   * @return vsSeBootupFail
  **/
  @Schema(description = "Number of vs_se_bootup_fail.")
  public Integer getVsSeBootupFail() {
    return vsSeBootupFail;
  }

  public void setVsSeBootupFail(Integer vsSeBootupFail) {
    this.vsSeBootupFail = vsSeBootupFail;
  }

  public ControllerProperties vsSeCreateFail(Integer vsSeCreateFail) {
    this.vsSeCreateFail = vsSeCreateFail;
    return this;
  }

   /**
   * Number of vs_se_create_fail.
   * @return vsSeCreateFail
  **/
  @Schema(description = "Number of vs_se_create_fail.")
  public Integer getVsSeCreateFail() {
    return vsSeCreateFail;
  }

  public void setVsSeCreateFail(Integer vsSeCreateFail) {
    this.vsSeCreateFail = vsSeCreateFail;
  }

  public ControllerProperties vsSePingFail(Integer vsSePingFail) {
    this.vsSePingFail = vsSePingFail;
    return this;
  }

   /**
   * Number of vs_se_ping_fail.
   * @return vsSePingFail
  **/
  @Schema(description = "Number of vs_se_ping_fail.")
  public Integer getVsSePingFail() {
    return vsSePingFail;
  }

  public void setVsSePingFail(Integer vsSePingFail) {
    this.vsSePingFail = vsSePingFail;
  }

  public ControllerProperties vsSeVnicFail(Integer vsSeVnicFail) {
    this.vsSeVnicFail = vsSeVnicFail;
    return this;
  }

   /**
   * Number of vs_se_vnic_fail.
   * @return vsSeVnicFail
  **/
  @Schema(description = "Number of vs_se_vnic_fail.")
  public Integer getVsSeVnicFail() {
    return vsSeVnicFail;
  }

  public void setVsSeVnicFail(Integer vsSeVnicFail) {
    this.vsSeVnicFail = vsSeVnicFail;
  }

  public ControllerProperties vsSeVnicIpFail(Integer vsSeVnicIpFail) {
    this.vsSeVnicIpFail = vsSeVnicIpFail;
    return this;
  }

   /**
   * Number of vs_se_vnic_ip_fail.
   * @return vsSeVnicIpFail
  **/
  @Schema(description = "Number of vs_se_vnic_ip_fail.")
  public Integer getVsSeVnicIpFail() {
    return vsSeVnicIpFail;
  }

  public void setVsSeVnicIpFail(Integer vsSeVnicIpFail) {
    this.vsSeVnicIpFail = vsSeVnicIpFail;
  }

  public ControllerProperties warmstartSeReconnectWaitTime(Integer warmstartSeReconnectWaitTime) {
    this.warmstartSeReconnectWaitTime = warmstartSeReconnectWaitTime;
    return this;
  }

   /**
   * Number of warmstart_se_reconnect_wait_time.
   * @return warmstartSeReconnectWaitTime
  **/
  @Schema(description = "Number of warmstart_se_reconnect_wait_time.")
  public Integer getWarmstartSeReconnectWaitTime() {
    return warmstartSeReconnectWaitTime;
  }

  public void setWarmstartSeReconnectWaitTime(Integer warmstartSeReconnectWaitTime) {
    this.warmstartSeReconnectWaitTime = warmstartSeReconnectWaitTime;
  }

  public ControllerProperties warmstartVsResyncWaitTime(Integer warmstartVsResyncWaitTime) {
    this.warmstartVsResyncWaitTime = warmstartVsResyncWaitTime;
    return this;
  }

   /**
   * Timeout for warmstart VS resync. Field introduced in 18.1.4, 18.2.1.
   * @return warmstartVsResyncWaitTime
  **/
  @Schema(description = "Timeout for warmstart VS resync. Field introduced in 18.1.4, 18.2.1.")
  public Integer getWarmstartVsResyncWaitTime() {
    return warmstartVsResyncWaitTime;
  }

  public void setWarmstartVsResyncWaitTime(Integer warmstartVsResyncWaitTime) {
    this.warmstartVsResyncWaitTime = warmstartVsResyncWaitTime;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ControllerProperties controllerProperties = (ControllerProperties) o;
    return Objects.equals(this._lastModified, controllerProperties._lastModified) &&
        Objects.equals(this.allowAdminNetworkUpdates, controllerProperties.allowAdminNetworkUpdates) &&
        Objects.equals(this.allowIpForwarding, controllerProperties.allowIpForwarding) &&
        Objects.equals(this.allowUnauthenticatedApis, controllerProperties.allowUnauthenticatedApis) &&
        Objects.equals(this.allowUnauthenticatedNodes, controllerProperties.allowUnauthenticatedNodes) &&
        Objects.equals(this.apiIdleTimeout, controllerProperties.apiIdleTimeout) &&
        Objects.equals(this.apiPerfLoggingThreshold, controllerProperties.apiPerfLoggingThreshold) &&
        Objects.equals(this.appviewxCompatMode, controllerProperties.appviewxCompatMode) &&
        Objects.equals(this.attachIpRetryInterval, controllerProperties.attachIpRetryInterval) &&
        Objects.equals(this.attachIpRetryLimit, controllerProperties.attachIpRetryLimit) &&
        Objects.equals(this.bmUseAnsible, controllerProperties.bmUseAnsible) &&
        Objects.equals(this.cleanupExpiredAuthtokenTimeoutPeriod, controllerProperties.cleanupExpiredAuthtokenTimeoutPeriod) &&
        Objects.equals(this.cleanupSessionsTimeoutPeriod, controllerProperties.cleanupSessionsTimeoutPeriod) &&
        Objects.equals(this.cloudReconcile, controllerProperties.cloudReconcile) &&
        Objects.equals(this.clusterIpGratuitousArpPeriod, controllerProperties.clusterIpGratuitousArpPeriod) &&
        Objects.equals(this.consistencyCheckTimeoutPeriod, controllerProperties.consistencyCheckTimeoutPeriod) &&
        Objects.equals(this.crashedSeReboot, controllerProperties.crashedSeReboot) &&
        Objects.equals(this.deadSeDetectionTimer, controllerProperties.deadSeDetectionTimer) &&
        Objects.equals(this.defaultMinimumApiTimeout, controllerProperties.defaultMinimumApiTimeout) &&
        Objects.equals(this.dnsRefreshPeriod, controllerProperties.dnsRefreshPeriod) &&
        Objects.equals(this.dummy, controllerProperties.dummy) &&
        Objects.equals(this.enableApiSharding, controllerProperties.enableApiSharding) &&
        Objects.equals(this.enableMemoryBalancer, controllerProperties.enableMemoryBalancer) &&
        Objects.equals(this.fatalErrorLeaseTime, controllerProperties.fatalErrorLeaseTime) &&
        Objects.equals(this.maxDeadSeInGrp, controllerProperties.maxDeadSeInGrp) &&
        Objects.equals(this.maxPcapPerTenant, controllerProperties.maxPcapPerTenant) &&
        Objects.equals(this.maxSeSpawnIntervalDelay, controllerProperties.maxSeSpawnIntervalDelay) &&
        Objects.equals(this.maxSeqAttachIpFailures, controllerProperties.maxSeqAttachIpFailures) &&
        Objects.equals(this.maxSeqVnicFailures, controllerProperties.maxSeqVnicFailures) &&
        Objects.equals(this.permissionScopedSharedAdminNetworks, controllerProperties.permissionScopedSharedAdminNetworks) &&
        Objects.equals(this.persistenceKeyRotatePeriod, controllerProperties.persistenceKeyRotatePeriod) &&
        Objects.equals(this.portalRequestBurstLimit, controllerProperties.portalRequestBurstLimit) &&
        Objects.equals(this.portalRequestRateLimit, controllerProperties.portalRequestRateLimit) &&
        Objects.equals(this.portalToken, controllerProperties.portalToken) &&
        Objects.equals(this.processLockedUseraccountsTimeoutPeriod, controllerProperties.processLockedUseraccountsTimeoutPeriod) &&
        Objects.equals(this.processPkiProfileTimeoutPeriod, controllerProperties.processPkiProfileTimeoutPeriod) &&
        Objects.equals(this.queryHostFail, controllerProperties.queryHostFail) &&
        Objects.equals(this.safenetHsmVersion, controllerProperties.safenetHsmVersion) &&
        Objects.equals(this.seCreateTimeout, controllerProperties.seCreateTimeout) &&
        Objects.equals(this.seFailoverAttemptInterval, controllerProperties.seFailoverAttemptInterval) &&
        Objects.equals(this.seFromMarketplace, controllerProperties.seFromMarketplace) &&
        Objects.equals(this.seOfflineDel, controllerProperties.seOfflineDel) &&
        Objects.equals(this.seSpawnRetryInterval, controllerProperties.seSpawnRetryInterval) &&
        Objects.equals(this.seVnicCooldown, controllerProperties.seVnicCooldown) &&
        Objects.equals(this.secureChannelCleanupTimeout, controllerProperties.secureChannelCleanupTimeout) &&
        Objects.equals(this.secureChannelControllerTokenTimeout, controllerProperties.secureChannelControllerTokenTimeout) &&
        Objects.equals(this.secureChannelSeTokenTimeout, controllerProperties.secureChannelSeTokenTimeout) &&
        Objects.equals(this.seupgradeCopyPoolSize, controllerProperties.seupgradeCopyPoolSize) &&
        Objects.equals(this.seupgradeFabricPoolSize, controllerProperties.seupgradeFabricPoolSize) &&
        Objects.equals(this.seupgradeSegroupMinDeadTimeout, controllerProperties.seupgradeSegroupMinDeadTimeout) &&
        Objects.equals(this.sharedSslCertificates, controllerProperties.sharedSslCertificates) &&
        Objects.equals(this.sslCertificateExpiryWarningDays, controllerProperties.sslCertificateExpiryWarningDays) &&
        Objects.equals(this.unresponsiveSeReboot, controllerProperties.unresponsiveSeReboot) &&
        Objects.equals(this.upgradeDnsTtl, controllerProperties.upgradeDnsTtl) &&
        Objects.equals(this.upgradeLeaseTime, controllerProperties.upgradeLeaseTime) &&
        Objects.equals(this.url, controllerProperties.url) &&
        Objects.equals(this.uuid, controllerProperties.uuid) &&
        Objects.equals(this.vnicOpFailTime, controllerProperties.vnicOpFailTime) &&
        Objects.equals(this.vsApicScaleoutTimeout, controllerProperties.vsApicScaleoutTimeout) &&
        Objects.equals(this.vsAwaitingSeTimeout, controllerProperties.vsAwaitingSeTimeout) &&
        Objects.equals(this.vsKeyRotatePeriod, controllerProperties.vsKeyRotatePeriod) &&
        Objects.equals(this.vsScaleoutReadyCheckInterval, controllerProperties.vsScaleoutReadyCheckInterval) &&
        Objects.equals(this.vsSeAttachIpFail, controllerProperties.vsSeAttachIpFail) &&
        Objects.equals(this.vsSeBootupFail, controllerProperties.vsSeBootupFail) &&
        Objects.equals(this.vsSeCreateFail, controllerProperties.vsSeCreateFail) &&
        Objects.equals(this.vsSePingFail, controllerProperties.vsSePingFail) &&
        Objects.equals(this.vsSeVnicFail, controllerProperties.vsSeVnicFail) &&
        Objects.equals(this.vsSeVnicIpFail, controllerProperties.vsSeVnicIpFail) &&
        Objects.equals(this.warmstartSeReconnectWaitTime, controllerProperties.warmstartSeReconnectWaitTime) &&
        Objects.equals(this.warmstartVsResyncWaitTime, controllerProperties.warmstartVsResyncWaitTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(_lastModified, allowAdminNetworkUpdates, allowIpForwarding, allowUnauthenticatedApis, allowUnauthenticatedNodes, apiIdleTimeout, apiPerfLoggingThreshold, appviewxCompatMode, attachIpRetryInterval, attachIpRetryLimit, bmUseAnsible, cleanupExpiredAuthtokenTimeoutPeriod, cleanupSessionsTimeoutPeriod, cloudReconcile, clusterIpGratuitousArpPeriod, consistencyCheckTimeoutPeriod, crashedSeReboot, deadSeDetectionTimer, defaultMinimumApiTimeout, dnsRefreshPeriod, dummy, enableApiSharding, enableMemoryBalancer, fatalErrorLeaseTime, maxDeadSeInGrp, maxPcapPerTenant, maxSeSpawnIntervalDelay, maxSeqAttachIpFailures, maxSeqVnicFailures, permissionScopedSharedAdminNetworks, persistenceKeyRotatePeriod, portalRequestBurstLimit, portalRequestRateLimit, portalToken, processLockedUseraccountsTimeoutPeriod, processPkiProfileTimeoutPeriod, queryHostFail, safenetHsmVersion, seCreateTimeout, seFailoverAttemptInterval, seFromMarketplace, seOfflineDel, seSpawnRetryInterval, seVnicCooldown, secureChannelCleanupTimeout, secureChannelControllerTokenTimeout, secureChannelSeTokenTimeout, seupgradeCopyPoolSize, seupgradeFabricPoolSize, seupgradeSegroupMinDeadTimeout, sharedSslCertificates, sslCertificateExpiryWarningDays, unresponsiveSeReboot, upgradeDnsTtl, upgradeLeaseTime, url, uuid, vnicOpFailTime, vsApicScaleoutTimeout, vsAwaitingSeTimeout, vsKeyRotatePeriod, vsScaleoutReadyCheckInterval, vsSeAttachIpFail, vsSeBootupFail, vsSeCreateFail, vsSePingFail, vsSeVnicFail, vsSeVnicIpFail, warmstartSeReconnectWaitTime, warmstartVsResyncWaitTime);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ControllerProperties {\n");
    
    sb.append("    _lastModified: ").append(toIndentedString(_lastModified)).append("\n");
    sb.append("    allowAdminNetworkUpdates: ").append(toIndentedString(allowAdminNetworkUpdates)).append("\n");
    sb.append("    allowIpForwarding: ").append(toIndentedString(allowIpForwarding)).append("\n");
    sb.append("    allowUnauthenticatedApis: ").append(toIndentedString(allowUnauthenticatedApis)).append("\n");
    sb.append("    allowUnauthenticatedNodes: ").append(toIndentedString(allowUnauthenticatedNodes)).append("\n");
    sb.append("    apiIdleTimeout: ").append(toIndentedString(apiIdleTimeout)).append("\n");
    sb.append("    apiPerfLoggingThreshold: ").append(toIndentedString(apiPerfLoggingThreshold)).append("\n");
    sb.append("    appviewxCompatMode: ").append(toIndentedString(appviewxCompatMode)).append("\n");
    sb.append("    attachIpRetryInterval: ").append(toIndentedString(attachIpRetryInterval)).append("\n");
    sb.append("    attachIpRetryLimit: ").append(toIndentedString(attachIpRetryLimit)).append("\n");
    sb.append("    bmUseAnsible: ").append(toIndentedString(bmUseAnsible)).append("\n");
    sb.append("    cleanupExpiredAuthtokenTimeoutPeriod: ").append(toIndentedString(cleanupExpiredAuthtokenTimeoutPeriod)).append("\n");
    sb.append("    cleanupSessionsTimeoutPeriod: ").append(toIndentedString(cleanupSessionsTimeoutPeriod)).append("\n");
    sb.append("    cloudReconcile: ").append(toIndentedString(cloudReconcile)).append("\n");
    sb.append("    clusterIpGratuitousArpPeriod: ").append(toIndentedString(clusterIpGratuitousArpPeriod)).append("\n");
    sb.append("    consistencyCheckTimeoutPeriod: ").append(toIndentedString(consistencyCheckTimeoutPeriod)).append("\n");
    sb.append("    crashedSeReboot: ").append(toIndentedString(crashedSeReboot)).append("\n");
    sb.append("    deadSeDetectionTimer: ").append(toIndentedString(deadSeDetectionTimer)).append("\n");
    sb.append("    defaultMinimumApiTimeout: ").append(toIndentedString(defaultMinimumApiTimeout)).append("\n");
    sb.append("    dnsRefreshPeriod: ").append(toIndentedString(dnsRefreshPeriod)).append("\n");
    sb.append("    dummy: ").append(toIndentedString(dummy)).append("\n");
    sb.append("    enableApiSharding: ").append(toIndentedString(enableApiSharding)).append("\n");
    sb.append("    enableMemoryBalancer: ").append(toIndentedString(enableMemoryBalancer)).append("\n");
    sb.append("    fatalErrorLeaseTime: ").append(toIndentedString(fatalErrorLeaseTime)).append("\n");
    sb.append("    maxDeadSeInGrp: ").append(toIndentedString(maxDeadSeInGrp)).append("\n");
    sb.append("    maxPcapPerTenant: ").append(toIndentedString(maxPcapPerTenant)).append("\n");
    sb.append("    maxSeSpawnIntervalDelay: ").append(toIndentedString(maxSeSpawnIntervalDelay)).append("\n");
    sb.append("    maxSeqAttachIpFailures: ").append(toIndentedString(maxSeqAttachIpFailures)).append("\n");
    sb.append("    maxSeqVnicFailures: ").append(toIndentedString(maxSeqVnicFailures)).append("\n");
    sb.append("    permissionScopedSharedAdminNetworks: ").append(toIndentedString(permissionScopedSharedAdminNetworks)).append("\n");
    sb.append("    persistenceKeyRotatePeriod: ").append(toIndentedString(persistenceKeyRotatePeriod)).append("\n");
    sb.append("    portalRequestBurstLimit: ").append(toIndentedString(portalRequestBurstLimit)).append("\n");
    sb.append("    portalRequestRateLimit: ").append(toIndentedString(portalRequestRateLimit)).append("\n");
    sb.append("    portalToken: ").append(toIndentedString(portalToken)).append("\n");
    sb.append("    processLockedUseraccountsTimeoutPeriod: ").append(toIndentedString(processLockedUseraccountsTimeoutPeriod)).append("\n");
    sb.append("    processPkiProfileTimeoutPeriod: ").append(toIndentedString(processPkiProfileTimeoutPeriod)).append("\n");
    sb.append("    queryHostFail: ").append(toIndentedString(queryHostFail)).append("\n");
    sb.append("    safenetHsmVersion: ").append(toIndentedString(safenetHsmVersion)).append("\n");
    sb.append("    seCreateTimeout: ").append(toIndentedString(seCreateTimeout)).append("\n");
    sb.append("    seFailoverAttemptInterval: ").append(toIndentedString(seFailoverAttemptInterval)).append("\n");
    sb.append("    seFromMarketplace: ").append(toIndentedString(seFromMarketplace)).append("\n");
    sb.append("    seOfflineDel: ").append(toIndentedString(seOfflineDel)).append("\n");
    sb.append("    seSpawnRetryInterval: ").append(toIndentedString(seSpawnRetryInterval)).append("\n");
    sb.append("    seVnicCooldown: ").append(toIndentedString(seVnicCooldown)).append("\n");
    sb.append("    secureChannelCleanupTimeout: ").append(toIndentedString(secureChannelCleanupTimeout)).append("\n");
    sb.append("    secureChannelControllerTokenTimeout: ").append(toIndentedString(secureChannelControllerTokenTimeout)).append("\n");
    sb.append("    secureChannelSeTokenTimeout: ").append(toIndentedString(secureChannelSeTokenTimeout)).append("\n");
    sb.append("    seupgradeCopyPoolSize: ").append(toIndentedString(seupgradeCopyPoolSize)).append("\n");
    sb.append("    seupgradeFabricPoolSize: ").append(toIndentedString(seupgradeFabricPoolSize)).append("\n");
    sb.append("    seupgradeSegroupMinDeadTimeout: ").append(toIndentedString(seupgradeSegroupMinDeadTimeout)).append("\n");
    sb.append("    sharedSslCertificates: ").append(toIndentedString(sharedSslCertificates)).append("\n");
    sb.append("    sslCertificateExpiryWarningDays: ").append(toIndentedString(sslCertificateExpiryWarningDays)).append("\n");
    sb.append("    unresponsiveSeReboot: ").append(toIndentedString(unresponsiveSeReboot)).append("\n");
    sb.append("    upgradeDnsTtl: ").append(toIndentedString(upgradeDnsTtl)).append("\n");
    sb.append("    upgradeLeaseTime: ").append(toIndentedString(upgradeLeaseTime)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
    sb.append("    vnicOpFailTime: ").append(toIndentedString(vnicOpFailTime)).append("\n");
    sb.append("    vsApicScaleoutTimeout: ").append(toIndentedString(vsApicScaleoutTimeout)).append("\n");
    sb.append("    vsAwaitingSeTimeout: ").append(toIndentedString(vsAwaitingSeTimeout)).append("\n");
    sb.append("    vsKeyRotatePeriod: ").append(toIndentedString(vsKeyRotatePeriod)).append("\n");
    sb.append("    vsScaleoutReadyCheckInterval: ").append(toIndentedString(vsScaleoutReadyCheckInterval)).append("\n");
    sb.append("    vsSeAttachIpFail: ").append(toIndentedString(vsSeAttachIpFail)).append("\n");
    sb.append("    vsSeBootupFail: ").append(toIndentedString(vsSeBootupFail)).append("\n");
    sb.append("    vsSeCreateFail: ").append(toIndentedString(vsSeCreateFail)).append("\n");
    sb.append("    vsSePingFail: ").append(toIndentedString(vsSePingFail)).append("\n");
    sb.append("    vsSeVnicFail: ").append(toIndentedString(vsSeVnicFail)).append("\n");
    sb.append("    vsSeVnicIpFail: ").append(toIndentedString(vsSeVnicIpFail)).append("\n");
    sb.append("    warmstartSeReconnectWaitTime: ").append(toIndentedString(warmstartSeReconnectWaitTime)).append("\n");
    sb.append("    warmstartVsResyncWaitTime: ").append(toIndentedString(warmstartVsResyncWaitTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
