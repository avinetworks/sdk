/*
 * Avi avi_global_spec Object API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 20.1.1
 * Contact: support@avinetworks.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.vmware.avi.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
/**
 * CCAgentProperties
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-03-12T12:27:26.755+05:30[Asia/Kolkata]")
public class CCAgentProperties {
  @JsonProperty("async_retries")
  private Integer asyncRetries = 5;

  @JsonProperty("async_retries_delay")
  private Integer asyncRetriesDelay = 10;

  @JsonProperty("poll_duration_target")
  private Integer pollDurationTarget = 10;

  @JsonProperty("poll_fast_target")
  private Integer pollFastTarget = 60;

  @JsonProperty("poll_slow_target")
  private Integer pollSlowTarget = 240;

  @JsonProperty("vnic_retries")
  private Integer vnicRetries = 60;

  @JsonProperty("vnic_retries_delay")
  private Integer vnicRetriesDelay = 5;

  public CCAgentProperties asyncRetries(Integer asyncRetries) {
    this.asyncRetries = asyncRetries;
    return this;
  }

   /**
   * Maximum polls to check for async jobs to finish.
   * @return asyncRetries
  **/
  @Schema(description = "Maximum polls to check for async jobs to finish.")
  public Integer getAsyncRetries() {
    return asyncRetries;
  }

  public void setAsyncRetries(Integer asyncRetries) {
    this.asyncRetries = asyncRetries;
  }

  public CCAgentProperties asyncRetriesDelay(Integer asyncRetriesDelay) {
    this.asyncRetriesDelay = asyncRetriesDelay;
    return this;
  }

   /**
   * Delay between each async job status poll check.
   * @return asyncRetriesDelay
  **/
  @Schema(description = "Delay between each async job status poll check.")
  public Integer getAsyncRetriesDelay() {
    return asyncRetriesDelay;
  }

  public void setAsyncRetriesDelay(Integer asyncRetriesDelay) {
    this.asyncRetriesDelay = asyncRetriesDelay;
  }

  public CCAgentProperties pollDurationTarget(Integer pollDurationTarget) {
    this.pollDurationTarget = pollDurationTarget;
    return this;
  }

   /**
   * Discovery poll target duration; a scale factor of 1+ is computed with the actual discovery (actual/target) and used to tweak slow and fast poll intervals.
   * @return pollDurationTarget
  **/
  @Schema(description = "Discovery poll target duration; a scale factor of 1+ is computed with the actual discovery (actual/target) and used to tweak slow and fast poll intervals.")
  public Integer getPollDurationTarget() {
    return pollDurationTarget;
  }

  public void setPollDurationTarget(Integer pollDurationTarget) {
    this.pollDurationTarget = pollDurationTarget;
  }

  public CCAgentProperties pollFastTarget(Integer pollFastTarget) {
    this.pollFastTarget = pollFastTarget;
    return this;
  }

   /**
   * Fast poll interval.
   * @return pollFastTarget
  **/
  @Schema(description = "Fast poll interval.")
  public Integer getPollFastTarget() {
    return pollFastTarget;
  }

  public void setPollFastTarget(Integer pollFastTarget) {
    this.pollFastTarget = pollFastTarget;
  }

  public CCAgentProperties pollSlowTarget(Integer pollSlowTarget) {
    this.pollSlowTarget = pollSlowTarget;
    return this;
  }

   /**
   * Slow poll interval.
   * @return pollSlowTarget
  **/
  @Schema(description = "Slow poll interval.")
  public Integer getPollSlowTarget() {
    return pollSlowTarget;
  }

  public void setPollSlowTarget(Integer pollSlowTarget) {
    this.pollSlowTarget = pollSlowTarget;
  }

  public CCAgentProperties vnicRetries(Integer vnicRetries) {
    this.vnicRetries = vnicRetries;
    return this;
  }

   /**
   * Maximum polls to check for vnics to be attached to VM.
   * @return vnicRetries
  **/
  @Schema(description = "Maximum polls to check for vnics to be attached to VM.")
  public Integer getVnicRetries() {
    return vnicRetries;
  }

  public void setVnicRetries(Integer vnicRetries) {
    this.vnicRetries = vnicRetries;
  }

  public CCAgentProperties vnicRetriesDelay(Integer vnicRetriesDelay) {
    this.vnicRetriesDelay = vnicRetriesDelay;
    return this;
  }

   /**
   * Delay between each vnic status poll check.
   * @return vnicRetriesDelay
  **/
  @Schema(description = "Delay between each vnic status poll check.")
  public Integer getVnicRetriesDelay() {
    return vnicRetriesDelay;
  }

  public void setVnicRetriesDelay(Integer vnicRetriesDelay) {
    this.vnicRetriesDelay = vnicRetriesDelay;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CCAgentProperties ccAgentProperties = (CCAgentProperties) o;
    return Objects.equals(this.asyncRetries, ccAgentProperties.asyncRetries) &&
        Objects.equals(this.asyncRetriesDelay, ccAgentProperties.asyncRetriesDelay) &&
        Objects.equals(this.pollDurationTarget, ccAgentProperties.pollDurationTarget) &&
        Objects.equals(this.pollFastTarget, ccAgentProperties.pollFastTarget) &&
        Objects.equals(this.pollSlowTarget, ccAgentProperties.pollSlowTarget) &&
        Objects.equals(this.vnicRetries, ccAgentProperties.vnicRetries) &&
        Objects.equals(this.vnicRetriesDelay, ccAgentProperties.vnicRetriesDelay);
  }

  @Override
  public int hashCode() {
    return Objects.hash(asyncRetries, asyncRetriesDelay, pollDurationTarget, pollFastTarget, pollSlowTarget, vnicRetries, vnicRetriesDelay);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CCAgentProperties {\n");
    
    sb.append("    asyncRetries: ").append(toIndentedString(asyncRetries)).append("\n");
    sb.append("    asyncRetriesDelay: ").append(toIndentedString(asyncRetriesDelay)).append("\n");
    sb.append("    pollDurationTarget: ").append(toIndentedString(pollDurationTarget)).append("\n");
    sb.append("    pollFastTarget: ").append(toIndentedString(pollFastTarget)).append("\n");
    sb.append("    pollSlowTarget: ").append(toIndentedString(pollSlowTarget)).append("\n");
    sb.append("    vnicRetries: ").append(toIndentedString(vnicRetries)).append("\n");
    sb.append("    vnicRetriesDelay: ").append(toIndentedString(vnicRetriesDelay)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
