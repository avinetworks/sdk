/*
 * Avi avi_global_spec Object API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 20.1.1
 * Contact: support@avinetworks.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.vmware.avi.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
/**
 * ClientLogConfiguration
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-03-12T12:27:26.755+05:30[Asia/Kolkata]")
public class ClientLogConfiguration {
  @JsonProperty("enable_significant_log_collection")
  private Boolean enableSignificantLogCollection = true;

  @JsonProperty("filtered_log_processing")
  private String filteredLogProcessing = "LOGS_PROCESSING_SYNC_AND_INDEX_ON_DEMAND";

  @JsonProperty("non_significant_log_processing")
  private String nonSignificantLogProcessing = "LOGS_PROCESSING_SYNC_AND_INDEX_ON_DEMAND";

  @JsonProperty("significant_log_processing")
  private String significantLogProcessing = "LOGS_PROCESSING_SYNC_AND_INDEX_ON_DEMAND";

  public ClientLogConfiguration enableSignificantLogCollection(Boolean enableSignificantLogCollection) {
    this.enableSignificantLogCollection = enableSignificantLogCollection;
    return this;
  }

   /**
   * Enable significant log collection. By default, this flag is enabled, which means that Avi SEs collect significant logs and forward them to Controller for further processing. For example, these logs correspond to error conditions such as when the response code for a request is 500. Users can disable this flag to turn off default significant log collection.
   * @return enableSignificantLogCollection
  **/
  @Schema(description = "Enable significant log collection. By default, this flag is enabled, which means that Avi SEs collect significant logs and forward them to Controller for further processing. For example, these logs correspond to error conditions such as when the response code for a request is 500. Users can disable this flag to turn off default significant log collection.")
  public Boolean isEnableSignificantLogCollection() {
    return enableSignificantLogCollection;
  }

  public void setEnableSignificantLogCollection(Boolean enableSignificantLogCollection) {
    this.enableSignificantLogCollection = enableSignificantLogCollection;
  }

  public ClientLogConfiguration filteredLogProcessing(String filteredLogProcessing) {
    this.filteredLogProcessing = filteredLogProcessing;
    return this;
  }

   /**
   * (Note  Only sync_and_index_on_demand is implemented at this time) Filtered logs are logs that match any client log filters or rules with logging enabled. Such logs are processed by the Logs Analytics system according to this setting. Enum options - LOGS_PROCESSING_NONE, LOGS_PROCESSING_SYNC_AND_INDEX_ON_DEMAND, LOGS_PROCESSING_AUTO_SYNC_AND_INDEX, LOGS_PROCESSING_AUTO_SYNC_BUT_INDEX_ON_DEMAND. Field introduced in 17.1.1.
   * @return filteredLogProcessing
  **/
  @Schema(description = "(Note  Only sync_and_index_on_demand is implemented at this time) Filtered logs are logs that match any client log filters or rules with logging enabled. Such logs are processed by the Logs Analytics system according to this setting. Enum options - LOGS_PROCESSING_NONE, LOGS_PROCESSING_SYNC_AND_INDEX_ON_DEMAND, LOGS_PROCESSING_AUTO_SYNC_AND_INDEX, LOGS_PROCESSING_AUTO_SYNC_BUT_INDEX_ON_DEMAND. Field introduced in 17.1.1.")
  public String getFilteredLogProcessing() {
    return filteredLogProcessing;
  }

  public void setFilteredLogProcessing(String filteredLogProcessing) {
    this.filteredLogProcessing = filteredLogProcessing;
  }

  public ClientLogConfiguration nonSignificantLogProcessing(String nonSignificantLogProcessing) {
    this.nonSignificantLogProcessing = nonSignificantLogProcessing;
    return this;
  }

   /**
   * (Note  Only sync_and_index_on_demand is implemented at this time) Logs that are neither significant nor filtered, are processed by the Logs Analytics system according to this setting. Enum options - LOGS_PROCESSING_NONE, LOGS_PROCESSING_SYNC_AND_INDEX_ON_DEMAND, LOGS_PROCESSING_AUTO_SYNC_AND_INDEX, LOGS_PROCESSING_AUTO_SYNC_BUT_INDEX_ON_DEMAND. Field introduced in 17.1.1.
   * @return nonSignificantLogProcessing
  **/
  @Schema(description = "(Note  Only sync_and_index_on_demand is implemented at this time) Logs that are neither significant nor filtered, are processed by the Logs Analytics system according to this setting. Enum options - LOGS_PROCESSING_NONE, LOGS_PROCESSING_SYNC_AND_INDEX_ON_DEMAND, LOGS_PROCESSING_AUTO_SYNC_AND_INDEX, LOGS_PROCESSING_AUTO_SYNC_BUT_INDEX_ON_DEMAND. Field introduced in 17.1.1.")
  public String getNonSignificantLogProcessing() {
    return nonSignificantLogProcessing;
  }

  public void setNonSignificantLogProcessing(String nonSignificantLogProcessing) {
    this.nonSignificantLogProcessing = nonSignificantLogProcessing;
  }

  public ClientLogConfiguration significantLogProcessing(String significantLogProcessing) {
    this.significantLogProcessing = significantLogProcessing;
    return this;
  }

   /**
   * Significant logs are processed by the Logs Analytics system according to this setting. Enum options - LOGS_PROCESSING_NONE, LOGS_PROCESSING_SYNC_AND_INDEX_ON_DEMAND, LOGS_PROCESSING_AUTO_SYNC_AND_INDEX, LOGS_PROCESSING_AUTO_SYNC_BUT_INDEX_ON_DEMAND. Field introduced in 17.1.1.
   * @return significantLogProcessing
  **/
  @Schema(description = "Significant logs are processed by the Logs Analytics system according to this setting. Enum options - LOGS_PROCESSING_NONE, LOGS_PROCESSING_SYNC_AND_INDEX_ON_DEMAND, LOGS_PROCESSING_AUTO_SYNC_AND_INDEX, LOGS_PROCESSING_AUTO_SYNC_BUT_INDEX_ON_DEMAND. Field introduced in 17.1.1.")
  public String getSignificantLogProcessing() {
    return significantLogProcessing;
  }

  public void setSignificantLogProcessing(String significantLogProcessing) {
    this.significantLogProcessing = significantLogProcessing;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ClientLogConfiguration clientLogConfiguration = (ClientLogConfiguration) o;
    return Objects.equals(this.enableSignificantLogCollection, clientLogConfiguration.enableSignificantLogCollection) &&
        Objects.equals(this.filteredLogProcessing, clientLogConfiguration.filteredLogProcessing) &&
        Objects.equals(this.nonSignificantLogProcessing, clientLogConfiguration.nonSignificantLogProcessing) &&
        Objects.equals(this.significantLogProcessing, clientLogConfiguration.significantLogProcessing);
  }

  @Override
  public int hashCode() {
    return Objects.hash(enableSignificantLogCollection, filteredLogProcessing, nonSignificantLogProcessing, significantLogProcessing);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ClientLogConfiguration {\n");
    
    sb.append("    enableSignificantLogCollection: ").append(toIndentedString(enableSignificantLogCollection)).append("\n");
    sb.append("    filteredLogProcessing: ").append(toIndentedString(filteredLogProcessing)).append("\n");
    sb.append("    nonSignificantLogProcessing: ").append(toIndentedString(nonSignificantLogProcessing)).append("\n");
    sb.append("    significantLogProcessing: ").append(toIndentedString(significantLogProcessing)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
