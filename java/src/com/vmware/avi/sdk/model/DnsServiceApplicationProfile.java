/*
 * Avi avi_global_spec Object API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 20.1.1
 * Contact: support@avinetworks.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.vmware.avi.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.vmware.avi.sdk.model.DnsZone;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;
/**
 * DnsServiceApplicationProfile
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-03-12T12:27:26.755+05:30[Asia/Kolkata]")
public class DnsServiceApplicationProfile {
  @JsonProperty("aaaa_empty_response")
  private Boolean aaaaEmptyResponse = true;

  @JsonProperty("admin_email")
  private String adminEmail = "hostmaster";

  @JsonProperty("authoritative_domain_names")
  private List<String> authoritativeDomainNames = null;

  @JsonProperty("dns_over_tcp_enabled")
  private Boolean dnsOverTcpEnabled = true;

  @JsonProperty("dns_zones")
  private List<DnsZone> dnsZones = null;

  @JsonProperty("domain_names")
  private List<String> domainNames = null;

  @JsonProperty("ecs_stripping_enabled")
  private Boolean ecsStrippingEnabled = true;

  @JsonProperty("edns")
  private Boolean edns = true;

  @JsonProperty("edns_client_subnet_prefix_len")
  private Integer ednsClientSubnetPrefixLen = null;

  @JsonProperty("error_response")
  private String errorResponse = "DNS_ERROR_RESPONSE_NONE";

  @JsonProperty("name_server")
  private String nameServer = null;

  @JsonProperty("negative_caching_ttl")
  private Integer negativeCachingTtl = 30;

  @JsonProperty("num_dns_ip")
  private Integer numDnsIp = 1;

  @JsonProperty("ttl")
  private Integer ttl = 30;

  public DnsServiceApplicationProfile aaaaEmptyResponse(Boolean aaaaEmptyResponse) {
    this.aaaaEmptyResponse = aaaaEmptyResponse;
    return this;
  }

   /**
   * Respond to AAAA queries with empty response when there are only IPV4 records.
   * @return aaaaEmptyResponse
  **/
  @Schema(description = "Respond to AAAA queries with empty response when there are only IPV4 records.")
  public Boolean isAaaaEmptyResponse() {
    return aaaaEmptyResponse;
  }

  public void setAaaaEmptyResponse(Boolean aaaaEmptyResponse) {
    this.aaaaEmptyResponse = aaaaEmptyResponse;
  }

  public DnsServiceApplicationProfile adminEmail(String adminEmail) {
    this.adminEmail = adminEmail;
    return this;
  }

   /**
   * Email address of the administrator responsible for this zone . This field is used in SOA records (rname) pertaining to all domain names specified as authoritative domain names. If not configured, the default value &#x27;hostmaster&#x27; is used in SOA responses. Field introduced in 18.2.5.
   * @return adminEmail
  **/
  @Schema(description = "Email address of the administrator responsible for this zone . This field is used in SOA records (rname) pertaining to all domain names specified as authoritative domain names. If not configured, the default value 'hostmaster' is used in SOA responses. Field introduced in 18.2.5.")
  public String getAdminEmail() {
    return adminEmail;
  }

  public void setAdminEmail(String adminEmail) {
    this.adminEmail = adminEmail;
  }

  public DnsServiceApplicationProfile authoritativeDomainNames(List<String> authoritativeDomainNames) {
    this.authoritativeDomainNames = authoritativeDomainNames;
    return this;
  }

  public DnsServiceApplicationProfile addAuthoritativeDomainNamesItem(String authoritativeDomainNamesItem) {
    if (this.authoritativeDomainNames == null) {
      this.authoritativeDomainNames = new ArrayList<String>();
    }
    this.authoritativeDomainNames.add(authoritativeDomainNamesItem);
    return this;
  }

   /**
   * Domain names authoritatively serviced by this Virtual Service. These are configured as Ends-With semantics. Queries for FQDNs that are subdomains of this domain and do not have any DNS record in Avi are dropped or NXDomain response sent. . Field deprecated in 18.2.6. Field introduced in 17.1.6,17.2.2.
   * @return authoritativeDomainNames
  **/
  @Schema(description = "Domain names authoritatively serviced by this Virtual Service. These are configured as Ends-With semantics. Queries for FQDNs that are subdomains of this domain and do not have any DNS record in Avi are dropped or NXDomain response sent. . Field deprecated in 18.2.6. Field introduced in 17.1.6,17.2.2.")
  public List<String> getAuthoritativeDomainNames() {
    return authoritativeDomainNames;
  }

  public void setAuthoritativeDomainNames(List<String> authoritativeDomainNames) {
    this.authoritativeDomainNames = authoritativeDomainNames;
  }

  public DnsServiceApplicationProfile dnsOverTcpEnabled(Boolean dnsOverTcpEnabled) {
    this.dnsOverTcpEnabled = dnsOverTcpEnabled;
    return this;
  }

   /**
   * Enable DNS query/response over TCP. This enables analytics for pass-through queries as well. Field introduced in 17.1.1.
   * @return dnsOverTcpEnabled
  **/
  @Schema(description = "Enable DNS query/response over TCP. This enables analytics for pass-through queries as well. Field introduced in 17.1.1.")
  public Boolean isDnsOverTcpEnabled() {
    return dnsOverTcpEnabled;
  }

  public void setDnsOverTcpEnabled(Boolean dnsOverTcpEnabled) {
    this.dnsOverTcpEnabled = dnsOverTcpEnabled;
  }

  public DnsServiceApplicationProfile dnsZones(List<DnsZone> dnsZones) {
    this.dnsZones = dnsZones;
    return this;
  }

  public DnsServiceApplicationProfile addDnsZonesItem(DnsZone dnsZonesItem) {
    if (this.dnsZones == null) {
      this.dnsZones = new ArrayList<DnsZone>();
    }
    this.dnsZones.add(dnsZonesItem);
    return this;
  }

   /**
   * DNS zones hosted on this Virtual Service. Field introduced in 18.2.6.
   * @return dnsZones
  **/
  @Schema(description = "DNS zones hosted on this Virtual Service. Field introduced in 18.2.6.")
  public List<DnsZone> getDnsZones() {
    return dnsZones;
  }

  public void setDnsZones(List<DnsZone> dnsZones) {
    this.dnsZones = dnsZones;
  }

  public DnsServiceApplicationProfile domainNames(List<String> domainNames) {
    this.domainNames = domainNames;
    return this;
  }

  public DnsServiceApplicationProfile addDomainNamesItem(String domainNamesItem) {
    if (this.domainNames == null) {
      this.domainNames = new ArrayList<String>();
    }
    this.domainNames.add(domainNamesItem);
    return this;
  }

   /**
   * Subdomain names serviced by this Virtual Service. These are configured as Ends-With semantics.
   * @return domainNames
  **/
  @Schema(description = "Subdomain names serviced by this Virtual Service. These are configured as Ends-With semantics.")
  public List<String> getDomainNames() {
    return domainNames;
  }

  public void setDomainNames(List<String> domainNames) {
    this.domainNames = domainNames;
  }

  public DnsServiceApplicationProfile ecsStrippingEnabled(Boolean ecsStrippingEnabled) {
    this.ecsStrippingEnabled = ecsStrippingEnabled;
    return this;
  }

   /**
   * Enable stripping of EDNS client subnet (ecs) option towards client if DNS service inserts ecs option in the DNS query towards upstream servers. Field introduced in 17.1.5.
   * @return ecsStrippingEnabled
  **/
  @Schema(description = "Enable stripping of EDNS client subnet (ecs) option towards client if DNS service inserts ecs option in the DNS query towards upstream servers. Field introduced in 17.1.5.")
  public Boolean isEcsStrippingEnabled() {
    return ecsStrippingEnabled;
  }

  public void setEcsStrippingEnabled(Boolean ecsStrippingEnabled) {
    this.ecsStrippingEnabled = ecsStrippingEnabled;
  }

  public DnsServiceApplicationProfile edns(Boolean edns) {
    this.edns = edns;
    return this;
  }

   /**
   * Enable DNS service to be aware of EDNS (Extension mechanism for DNS). EDNS extensions are parsed and shown in logs. For GSLB services, the EDNS client subnet option can be used to influence Load Balancing. Field introduced in 17.1.1.
   * @return edns
  **/
  @Schema(description = "Enable DNS service to be aware of EDNS (Extension mechanism for DNS). EDNS extensions are parsed and shown in logs. For GSLB services, the EDNS client subnet option can be used to influence Load Balancing. Field introduced in 17.1.1.")
  public Boolean isEdns() {
    return edns;
  }

  public void setEdns(Boolean edns) {
    this.edns = edns;
  }

  public DnsServiceApplicationProfile ednsClientSubnetPrefixLen(Integer ednsClientSubnetPrefixLen) {
    this.ednsClientSubnetPrefixLen = ednsClientSubnetPrefixLen;
    return this;
  }

   /**
   * Specifies the IP address prefix length to use in the EDNS client subnet (ECS) option. When the incoming request does not have any ECS option and the prefix length is specified, an ECS option is inserted in the request passed to upstream server. If the incoming request already has an ECS option, the prefix length (and correspondingly the address) in the ECS option is updated, with the minimum of the prefix length present in the incoming and the configured prefix length, before passing the request to upstream server. Allowed values are 1-32. Field introduced in 17.1.3.
   * @return ednsClientSubnetPrefixLen
  **/
  @Schema(description = "Specifies the IP address prefix length to use in the EDNS client subnet (ECS) option. When the incoming request does not have any ECS option and the prefix length is specified, an ECS option is inserted in the request passed to upstream server. If the incoming request already has an ECS option, the prefix length (and correspondingly the address) in the ECS option is updated, with the minimum of the prefix length present in the incoming and the configured prefix length, before passing the request to upstream server. Allowed values are 1-32. Field introduced in 17.1.3.")
  public Integer getEdnsClientSubnetPrefixLen() {
    return ednsClientSubnetPrefixLen;
  }

  public void setEdnsClientSubnetPrefixLen(Integer ednsClientSubnetPrefixLen) {
    this.ednsClientSubnetPrefixLen = ednsClientSubnetPrefixLen;
  }

  public DnsServiceApplicationProfile errorResponse(String errorResponse) {
    this.errorResponse = errorResponse;
    return this;
  }

   /**
   * Drop or respond to client when the DNS service encounters an error processing a client query. By default, such a request is dropped without any response, or passed through to a passthrough pool, if configured. When set to respond, an appropriate response is sent to client, e.g. NXDOMAIN response for non-existent records, empty NOERROR response for unsupported queries, etc. Enum options - DNS_ERROR_RESPONSE_ERROR, DNS_ERROR_RESPONSE_NONE.
   * @return errorResponse
  **/
  @Schema(description = "Drop or respond to client when the DNS service encounters an error processing a client query. By default, such a request is dropped without any response, or passed through to a passthrough pool, if configured. When set to respond, an appropriate response is sent to client, e.g. NXDOMAIN response for non-existent records, empty NOERROR response for unsupported queries, etc. Enum options - DNS_ERROR_RESPONSE_ERROR, DNS_ERROR_RESPONSE_NONE.")
  public String getErrorResponse() {
    return errorResponse;
  }

  public void setErrorResponse(String errorResponse) {
    this.errorResponse = errorResponse;
  }

  public DnsServiceApplicationProfile nameServer(String nameServer) {
    this.nameServer = nameServer;
    return this;
  }

   /**
   * The &lt;domain-name&gt;  of the name server that was the original or primary source of data for this zone. This field is used in SOA records (mname) pertaining to all domain names specified as authoritative domain names. If not configured, domain name is used as name server in SOA response. Field introduced in 18.2.5.
   * @return nameServer
  **/
  @Schema(description = "The <domain-name>  of the name server that was the original or primary source of data for this zone. This field is used in SOA records (mname) pertaining to all domain names specified as authoritative domain names. If not configured, domain name is used as name server in SOA response. Field introduced in 18.2.5.")
  public String getNameServer() {
    return nameServer;
  }

  public void setNameServer(String nameServer) {
    this.nameServer = nameServer;
  }

  public DnsServiceApplicationProfile negativeCachingTtl(Integer negativeCachingTtl) {
    this.negativeCachingTtl = negativeCachingTtl;
    return this;
  }

   /**
   * Specifies the TTL value (in seconds) for SOA (Start of Authority) (corresponding to a authoritative domain owned by this DNS Virtual Service) record&#x27;s minimum TTL served by the DNS Virtual Service. Allowed values are 0-86400. Field introduced in 17.2.4.
   * @return negativeCachingTtl
  **/
  @Schema(description = "Specifies the TTL value (in seconds) for SOA (Start of Authority) (corresponding to a authoritative domain owned by this DNS Virtual Service) record's minimum TTL served by the DNS Virtual Service. Allowed values are 0-86400. Field introduced in 17.2.4.")
  public Integer getNegativeCachingTtl() {
    return negativeCachingTtl;
  }

  public void setNegativeCachingTtl(Integer negativeCachingTtl) {
    this.negativeCachingTtl = negativeCachingTtl;
  }

  public DnsServiceApplicationProfile numDnsIp(Integer numDnsIp) {
    this.numDnsIp = numDnsIp;
    return this;
  }

   /**
   * Specifies the number of IP addresses returned by the DNS Service. Enter 0 to return all IP addresses. Allowed values are 1-20. Special values are 0- &#x27;Return all IP addresses&#x27;.
   * @return numDnsIp
  **/
  @Schema(description = "Specifies the number of IP addresses returned by the DNS Service. Enter 0 to return all IP addresses. Allowed values are 1-20. Special values are 0- 'Return all IP addresses'.")
  public Integer getNumDnsIp() {
    return numDnsIp;
  }

  public void setNumDnsIp(Integer numDnsIp) {
    this.numDnsIp = numDnsIp;
  }

  public DnsServiceApplicationProfile ttl(Integer ttl) {
    this.ttl = ttl;
    return this;
  }

   /**
   * Specifies the TTL value (in seconds) for records served by DNS Service. Allowed values are 0-86400.
   * @return ttl
  **/
  @Schema(description = "Specifies the TTL value (in seconds) for records served by DNS Service. Allowed values are 0-86400.")
  public Integer getTtl() {
    return ttl;
  }

  public void setTtl(Integer ttl) {
    this.ttl = ttl;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DnsServiceApplicationProfile dnsServiceApplicationProfile = (DnsServiceApplicationProfile) o;
    return Objects.equals(this.aaaaEmptyResponse, dnsServiceApplicationProfile.aaaaEmptyResponse) &&
        Objects.equals(this.adminEmail, dnsServiceApplicationProfile.adminEmail) &&
        Objects.equals(this.authoritativeDomainNames, dnsServiceApplicationProfile.authoritativeDomainNames) &&
        Objects.equals(this.dnsOverTcpEnabled, dnsServiceApplicationProfile.dnsOverTcpEnabled) &&
        Objects.equals(this.dnsZones, dnsServiceApplicationProfile.dnsZones) &&
        Objects.equals(this.domainNames, dnsServiceApplicationProfile.domainNames) &&
        Objects.equals(this.ecsStrippingEnabled, dnsServiceApplicationProfile.ecsStrippingEnabled) &&
        Objects.equals(this.edns, dnsServiceApplicationProfile.edns) &&
        Objects.equals(this.ednsClientSubnetPrefixLen, dnsServiceApplicationProfile.ednsClientSubnetPrefixLen) &&
        Objects.equals(this.errorResponse, dnsServiceApplicationProfile.errorResponse) &&
        Objects.equals(this.nameServer, dnsServiceApplicationProfile.nameServer) &&
        Objects.equals(this.negativeCachingTtl, dnsServiceApplicationProfile.negativeCachingTtl) &&
        Objects.equals(this.numDnsIp, dnsServiceApplicationProfile.numDnsIp) &&
        Objects.equals(this.ttl, dnsServiceApplicationProfile.ttl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(aaaaEmptyResponse, adminEmail, authoritativeDomainNames, dnsOverTcpEnabled, dnsZones, domainNames, ecsStrippingEnabled, edns, ednsClientSubnetPrefixLen, errorResponse, nameServer, negativeCachingTtl, numDnsIp, ttl);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DnsServiceApplicationProfile {\n");
    
    sb.append("    aaaaEmptyResponse: ").append(toIndentedString(aaaaEmptyResponse)).append("\n");
    sb.append("    adminEmail: ").append(toIndentedString(adminEmail)).append("\n");
    sb.append("    authoritativeDomainNames: ").append(toIndentedString(authoritativeDomainNames)).append("\n");
    sb.append("    dnsOverTcpEnabled: ").append(toIndentedString(dnsOverTcpEnabled)).append("\n");
    sb.append("    dnsZones: ").append(toIndentedString(dnsZones)).append("\n");
    sb.append("    domainNames: ").append(toIndentedString(domainNames)).append("\n");
    sb.append("    ecsStrippingEnabled: ").append(toIndentedString(ecsStrippingEnabled)).append("\n");
    sb.append("    edns: ").append(toIndentedString(edns)).append("\n");
    sb.append("    ednsClientSubnetPrefixLen: ").append(toIndentedString(ednsClientSubnetPrefixLen)).append("\n");
    sb.append("    errorResponse: ").append(toIndentedString(errorResponse)).append("\n");
    sb.append("    nameServer: ").append(toIndentedString(nameServer)).append("\n");
    sb.append("    negativeCachingTtl: ").append(toIndentedString(negativeCachingTtl)).append("\n");
    sb.append("    numDnsIp: ").append(toIndentedString(numDnsIp)).append("\n");
    sb.append("    ttl: ").append(toIndentedString(ttl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
