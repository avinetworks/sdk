/*
 * Avi avi_global_spec Object API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 20.1.1
 * Contact: support@avinetworks.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.vmware.avi.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
/**
 * TCPApplicationProfile
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-03-12T12:27:26.755+05:30[Asia/Kolkata]")
public class TCPApplicationProfile {
  @JsonProperty("pki_profile_ref")
  private String pkiProfileRef = null;

  @JsonProperty("proxy_protocol_enabled")
  private Boolean proxyProtocolEnabled = null;

  @JsonProperty("proxy_protocol_version")
  private String proxyProtocolVersion = "PROXY_PROTOCOL_VERSION_1";

  @JsonProperty("ssl_client_certificate_mode")
  private String sslClientCertificateMode = "SSL_CLIENT_CERTIFICATE_NONE";

  public TCPApplicationProfile pkiProfileRef(String pkiProfileRef) {
    this.pkiProfileRef = pkiProfileRef;
    return this;
  }

   /**
   * Select the PKI profile to be associated with the Virtual Service. This profile defines the Certificate Authority and Revocation List. It is a reference to an object of type PKIProfile. Field introduced in 18.2.3.
   * @return pkiProfileRef
  **/
  @Schema(description = "Select the PKI profile to be associated with the Virtual Service. This profile defines the Certificate Authority and Revocation List. It is a reference to an object of type PKIProfile. Field introduced in 18.2.3.")
  public String getPkiProfileRef() {
    return pkiProfileRef;
  }

  public void setPkiProfileRef(String pkiProfileRef) {
    this.pkiProfileRef = pkiProfileRef;
  }

  public TCPApplicationProfile proxyProtocolEnabled(Boolean proxyProtocolEnabled) {
    this.proxyProtocolEnabled = proxyProtocolEnabled;
    return this;
  }

   /**
   * Enable/Disable the usage of proxy protocol to convey client connection information to the back-end servers.  Valid only for L4 application profiles and TCP proxy.
   * @return proxyProtocolEnabled
  **/
  @Schema(description = "Enable/Disable the usage of proxy protocol to convey client connection information to the back-end servers.  Valid only for L4 application profiles and TCP proxy.")
  public Boolean isProxyProtocolEnabled() {
    return proxyProtocolEnabled;
  }

  public void setProxyProtocolEnabled(Boolean proxyProtocolEnabled) {
    this.proxyProtocolEnabled = proxyProtocolEnabled;
  }

  public TCPApplicationProfile proxyProtocolVersion(String proxyProtocolVersion) {
    this.proxyProtocolVersion = proxyProtocolVersion;
    return this;
  }

   /**
   * Version of proxy protocol to be used to convey client connection information to the back-end servers. Enum options - PROXY_PROTOCOL_VERSION_1, PROXY_PROTOCOL_VERSION_2.
   * @return proxyProtocolVersion
  **/
  @Schema(description = "Version of proxy protocol to be used to convey client connection information to the back-end servers. Enum options - PROXY_PROTOCOL_VERSION_1, PROXY_PROTOCOL_VERSION_2.")
  public String getProxyProtocolVersion() {
    return proxyProtocolVersion;
  }

  public void setProxyProtocolVersion(String proxyProtocolVersion) {
    this.proxyProtocolVersion = proxyProtocolVersion;
  }

  public TCPApplicationProfile sslClientCertificateMode(String sslClientCertificateMode) {
    this.sslClientCertificateMode = sslClientCertificateMode;
    return this;
  }

   /**
   * Specifies whether the client side verification is set to none, request or require. Enum options - SSL_CLIENT_CERTIFICATE_NONE, SSL_CLIENT_CERTIFICATE_REQUEST, SSL_CLIENT_CERTIFICATE_REQUIRE. Field introduced in 18.2.3.
   * @return sslClientCertificateMode
  **/
  @Schema(description = "Specifies whether the client side verification is set to none, request or require. Enum options - SSL_CLIENT_CERTIFICATE_NONE, SSL_CLIENT_CERTIFICATE_REQUEST, SSL_CLIENT_CERTIFICATE_REQUIRE. Field introduced in 18.2.3.")
  public String getSslClientCertificateMode() {
    return sslClientCertificateMode;
  }

  public void setSslClientCertificateMode(String sslClientCertificateMode) {
    this.sslClientCertificateMode = sslClientCertificateMode;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TCPApplicationProfile tcPApplicationProfile = (TCPApplicationProfile) o;
    return Objects.equals(this.pkiProfileRef, tcPApplicationProfile.pkiProfileRef) &&
        Objects.equals(this.proxyProtocolEnabled, tcPApplicationProfile.proxyProtocolEnabled) &&
        Objects.equals(this.proxyProtocolVersion, tcPApplicationProfile.proxyProtocolVersion) &&
        Objects.equals(this.sslClientCertificateMode, tcPApplicationProfile.sslClientCertificateMode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(pkiProfileRef, proxyProtocolEnabled, proxyProtocolVersion, sslClientCertificateMode);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TCPApplicationProfile {\n");
    
    sb.append("    pkiProfileRef: ").append(toIndentedString(pkiProfileRef)).append("\n");
    sb.append("    proxyProtocolEnabled: ").append(toIndentedString(proxyProtocolEnabled)).append("\n");
    sb.append("    proxyProtocolVersion: ").append(toIndentedString(proxyProtocolVersion)).append("\n");
    sb.append("    sslClientCertificateMode: ").append(toIndentedString(sslClientCertificateMode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
