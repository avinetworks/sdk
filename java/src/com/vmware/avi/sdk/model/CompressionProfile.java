/*
 * Avi avi_global_spec Object API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 20.1.1
 * Contact: support@avinetworks.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.vmware.avi.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.vmware.avi.sdk.model.CompressionFilter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;
/**
 * CompressionProfile
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-03-12T12:27:26.755+05:30[Asia/Kolkata]")
public class CompressionProfile {
  @JsonProperty("compressible_content_ref")
  private String compressibleContentRef = null;

  @JsonProperty("compression")
  private Boolean compression = null;

  @JsonProperty("filter")
  private List<CompressionFilter> filter = null;

  @JsonProperty("remove_accept_encoding_header")
  private Boolean removeAcceptEncodingHeader = true;

  @JsonProperty("type")
  private String type = "AUTO_COMPRESSION";

  public CompressionProfile compressibleContentRef(String compressibleContentRef) {
    this.compressibleContentRef = compressibleContentRef;
    return this;
  }

   /**
   * Compress only content types listed in this string group. Content types not present in this list are not compressed. It is a reference to an object of type StringGroup.
   * @return compressibleContentRef
  **/
  @Schema(description = "Compress only content types listed in this string group. Content types not present in this list are not compressed. It is a reference to an object of type StringGroup.")
  public String getCompressibleContentRef() {
    return compressibleContentRef;
  }

  public void setCompressibleContentRef(String compressibleContentRef) {
    this.compressibleContentRef = compressibleContentRef;
  }

  public CompressionProfile compression(Boolean compression) {
    this.compression = compression;
    return this;
  }

   /**
   * Compress HTTP response content if it wasn&#x27;t already compressed.
   * @return compression
  **/
  @Schema(required = true, description = "Compress HTTP response content if it wasn't already compressed.")
  public Boolean isCompression() {
    return compression;
  }

  public void setCompression(Boolean compression) {
    this.compression = compression;
  }

  public CompressionProfile filter(List<CompressionFilter> filter) {
    this.filter = filter;
    return this;
  }

  public CompressionProfile addFilterItem(CompressionFilter filterItem) {
    if (this.filter == null) {
      this.filter = new ArrayList<CompressionFilter>();
    }
    this.filter.add(filterItem);
    return this;
  }

   /**
   * Custom filters used when auto compression is not selected.
   * @return filter
  **/
  @Schema(description = "Custom filters used when auto compression is not selected.")
  public List<CompressionFilter> getFilter() {
    return filter;
  }

  public void setFilter(List<CompressionFilter> filter) {
    this.filter = filter;
  }

  public CompressionProfile removeAcceptEncodingHeader(Boolean removeAcceptEncodingHeader) {
    this.removeAcceptEncodingHeader = removeAcceptEncodingHeader;
    return this;
  }

   /**
   * Offload compression from the servers to AVI. Saves compute cycles on the servers.
   * @return removeAcceptEncodingHeader
  **/
  @Schema(required = true, description = "Offload compression from the servers to AVI. Saves compute cycles on the servers.")
  public Boolean isRemoveAcceptEncodingHeader() {
    return removeAcceptEncodingHeader;
  }

  public void setRemoveAcceptEncodingHeader(Boolean removeAcceptEncodingHeader) {
    this.removeAcceptEncodingHeader = removeAcceptEncodingHeader;
  }

  public CompressionProfile type(String type) {
    this.type = type;
    return this;
  }

   /**
   * Compress content automatically or add custom filters to define compressible content and compression levels. Enum options - AUTO_COMPRESSION, CUSTOM_COMPRESSION.
   * @return type
  **/
  @Schema(required = true, description = "Compress content automatically or add custom filters to define compressible content and compression levels. Enum options - AUTO_COMPRESSION, CUSTOM_COMPRESSION.")
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CompressionProfile compressionProfile = (CompressionProfile) o;
    return Objects.equals(this.compressibleContentRef, compressionProfile.compressibleContentRef) &&
        Objects.equals(this.compression, compressionProfile.compression) &&
        Objects.equals(this.filter, compressionProfile.filter) &&
        Objects.equals(this.removeAcceptEncodingHeader, compressionProfile.removeAcceptEncodingHeader) &&
        Objects.equals(this.type, compressionProfile.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(compressibleContentRef, compression, filter, removeAcceptEncodingHeader, type);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CompressionProfile {\n");
    
    sb.append("    compressibleContentRef: ").append(toIndentedString(compressibleContentRef)).append("\n");
    sb.append("    compression: ").append(toIndentedString(compression)).append("\n");
    sb.append("    filter: ").append(toIndentedString(filter)).append("\n");
    sb.append("    removeAcceptEncodingHeader: ").append(toIndentedString(removeAcceptEncodingHeader)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
