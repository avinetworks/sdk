/*
 * Avi avi_global_spec Object API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 20.1.1
 * Contact: support@avinetworks.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.vmware.avi.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
/**
 * DnsServiceDomain
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-03-12T12:27:26.755+05:30[Asia/Kolkata]")
public class DnsServiceDomain {
  @JsonProperty("domain_name")
  private String domainName = null;

  @JsonProperty("num_dns_ip")
  private Integer numDnsIp = 1;

  @JsonProperty("pass_through")
  private Boolean passThrough = true;

  @JsonProperty("record_ttl")
  private Integer recordTtl = null;

  public DnsServiceDomain domainName(String domainName) {
    this.domainName = domainName;
    return this;
  }

   /**
   * Service domain string used for FQDN.
   * @return domainName
  **/
  @Schema(required = true, description = "Service domain string used for FQDN.")
  public String getDomainName() {
    return domainName;
  }

  public void setDomainName(String domainName) {
    this.domainName = domainName;
  }

  public DnsServiceDomain numDnsIp(Integer numDnsIp) {
    this.numDnsIp = numDnsIp;
    return this;
  }

   /**
   * Specifies the number of A records returned by Avi DNS Service. Allowed values are 0-20. Special values are 0- &#x27;Return all IP addresses&#x27;.
   * @return numDnsIp
  **/
  @Schema(description = "Specifies the number of A records returned by Avi DNS Service. Allowed values are 0-20. Special values are 0- 'Return all IP addresses'.")
  public Integer getNumDnsIp() {
    return numDnsIp;
  }

  public void setNumDnsIp(Integer numDnsIp) {
    this.numDnsIp = numDnsIp;
  }

  public DnsServiceDomain passThrough(Boolean passThrough) {
    this.passThrough = passThrough;
    return this;
  }

   /**
   * Third-party Authoritative domain requests are delegated toDNS VirtualService&#x27;s pool of nameservers.
   * @return passThrough
  **/
  @Schema(description = "Third-party Authoritative domain requests are delegated toDNS VirtualService's pool of nameservers.")
  public Boolean isPassThrough() {
    return passThrough;
  }

  public void setPassThrough(Boolean passThrough) {
    this.passThrough = passThrough;
  }

  public DnsServiceDomain recordTtl(Integer recordTtl) {
    this.recordTtl = recordTtl;
    return this;
  }

   /**
   * TTL value for DNS records. Allowed values are 1-604800.
   * @return recordTtl
  **/
  @Schema(description = "TTL value for DNS records. Allowed values are 1-604800.")
  public Integer getRecordTtl() {
    return recordTtl;
  }

  public void setRecordTtl(Integer recordTtl) {
    this.recordTtl = recordTtl;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DnsServiceDomain dnsServiceDomain = (DnsServiceDomain) o;
    return Objects.equals(this.domainName, dnsServiceDomain.domainName) &&
        Objects.equals(this.numDnsIp, dnsServiceDomain.numDnsIp) &&
        Objects.equals(this.passThrough, dnsServiceDomain.passThrough) &&
        Objects.equals(this.recordTtl, dnsServiceDomain.recordTtl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(domainName, numDnsIp, passThrough, recordTtl);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DnsServiceDomain {\n");
    
    sb.append("    domainName: ").append(toIndentedString(domainName)).append("\n");
    sb.append("    numDnsIp: ").append(toIndentedString(numDnsIp)).append("\n");
    sb.append("    passThrough: ").append(toIndentedString(passThrough)).append("\n");
    sb.append("    recordTtl: ").append(toIndentedString(recordTtl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
