/*
 * Avi avi_global_spec Object API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 20.1.1
 * Contact: support@avinetworks.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.vmware.avi.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;
/**
 * SeRuntimeCompressionProperties
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-03-12T12:27:26.755+05:30[Asia/Kolkata]")
public class SeRuntimeCompressionProperties {
  @JsonProperty("max_low_rtt")
  private Integer maxLowRtt = 10;

  @JsonProperty("min_high_rtt")
  private Integer minHighRtt = 200;

  @JsonProperty("min_length")
  private Integer minLength = 128;

  @JsonProperty("mobile_str")
  private List<String> mobileStr = null;

  public SeRuntimeCompressionProperties maxLowRtt(Integer maxLowRtt) {
    this.maxLowRtt = maxLowRtt;
    return this;
  }

   /**
   * If client RTT is higher than this threshold, enable normal compression on the response.
   * @return maxLowRtt
  **/
  @Schema(description = "If client RTT is higher than this threshold, enable normal compression on the response.")
  public Integer getMaxLowRtt() {
    return maxLowRtt;
  }

  public void setMaxLowRtt(Integer maxLowRtt) {
    this.maxLowRtt = maxLowRtt;
  }

  public SeRuntimeCompressionProperties minHighRtt(Integer minHighRtt) {
    this.minHighRtt = minHighRtt;
    return this;
  }

   /**
   * If client RTT is higher than this threshold, enable aggressive compression on the response.
   * @return minHighRtt
  **/
  @Schema(description = "If client RTT is higher than this threshold, enable aggressive compression on the response.")
  public Integer getMinHighRtt() {
    return minHighRtt;
  }

  public void setMinHighRtt(Integer minHighRtt) {
    this.minHighRtt = minHighRtt;
  }

  public SeRuntimeCompressionProperties minLength(Integer minLength) {
    this.minLength = minLength;
    return this;
  }

   /**
   * Minimum response content length to enable compression.
   * @return minLength
  **/
  @Schema(description = "Minimum response content length to enable compression.")
  public Integer getMinLength() {
    return minLength;
  }

  public void setMinLength(Integer minLength) {
    this.minLength = minLength;
  }

  public SeRuntimeCompressionProperties mobileStr(List<String> mobileStr) {
    this.mobileStr = mobileStr;
    return this;
  }

  public SeRuntimeCompressionProperties addMobileStrItem(String mobileStrItem) {
    if (this.mobileStr == null) {
      this.mobileStr = new ArrayList<String>();
    }
    this.mobileStr.add(mobileStrItem);
    return this;
  }

   /**
   * Values that identify mobile browsers in order to enable aggressive compression.
   * @return mobileStr
  **/
  @Schema(description = "Values that identify mobile browsers in order to enable aggressive compression.")
  public List<String> getMobileStr() {
    return mobileStr;
  }

  public void setMobileStr(List<String> mobileStr) {
    this.mobileStr = mobileStr;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SeRuntimeCompressionProperties seRuntimeCompressionProperties = (SeRuntimeCompressionProperties) o;
    return Objects.equals(this.maxLowRtt, seRuntimeCompressionProperties.maxLowRtt) &&
        Objects.equals(this.minHighRtt, seRuntimeCompressionProperties.minHighRtt) &&
        Objects.equals(this.minLength, seRuntimeCompressionProperties.minLength) &&
        Objects.equals(this.mobileStr, seRuntimeCompressionProperties.mobileStr);
  }

  @Override
  public int hashCode() {
    return Objects.hash(maxLowRtt, minHighRtt, minLength, mobileStr);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SeRuntimeCompressionProperties {\n");
    
    sb.append("    maxLowRtt: ").append(toIndentedString(maxLowRtt)).append("\n");
    sb.append("    minHighRtt: ").append(toIndentedString(minHighRtt)).append("\n");
    sb.append("    minLength: ").append(toIndentedString(minLength)).append("\n");
    sb.append("    mobileStr: ").append(toIndentedString(mobileStr)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
