/*
 * Avi avi_global_spec Object API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 20.1.1
 * Contact: support@avinetworks.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.vmware.avi.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.vmware.avi.sdk.model.AnalyticsPolicy;
import com.vmware.avi.sdk.model.ContentRewriteProfile;
import com.vmware.avi.sdk.model.DiscoveredNetwork;
import com.vmware.avi.sdk.model.DnsInfo;
import com.vmware.avi.sdk.model.DnsPolicies;
import com.vmware.avi.sdk.model.DnsRecord;
import com.vmware.avi.sdk.model.HTTPClientAuthenticationParams;
import com.vmware.avi.sdk.model.HTTPPolicies;
import com.vmware.avi.sdk.model.IPNetworkSubnet;
import com.vmware.avi.sdk.model.IpAddr;
import com.vmware.avi.sdk.model.IpAddrPrefix;
import com.vmware.avi.sdk.model.L4Policies;
import com.vmware.avi.sdk.model.PerformanceLimits;
import com.vmware.avi.sdk.model.RateProfile;
import com.vmware.avi.sdk.model.SAMLSPConfig;
import com.vmware.avi.sdk.model.SSLProfileSelector;
import com.vmware.avi.sdk.model.SSOPolicy;
import com.vmware.avi.sdk.model.Service;
import com.vmware.avi.sdk.model.ServicePoolSelector;
import com.vmware.avi.sdk.model.SidebandProfile;
import com.vmware.avi.sdk.model.VSDataScripts;
import com.vmware.avi.sdk.model.Vip;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;
/**
 * VirtualService
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-03-12T12:27:26.755+05:30[Asia/Kolkata]")
public class VirtualService {
  @JsonProperty("_last_modified")
  private String _lastModified = null;

  @JsonProperty("active_standby_se_tag")
  private String activeStandbySeTag = "ACTIVE_STANDBY_SE_1";

  @JsonProperty("advertise_down_vs")
  private Boolean advertiseDownVs = null;

  @JsonProperty("allow_invalid_client_cert")
  private Boolean allowInvalidClientCert = null;

  @JsonProperty("analytics_policy")
  private AnalyticsPolicy analyticsPolicy = null;

  @JsonProperty("analytics_profile_ref")
  private String analyticsProfileRef = null;

  @JsonProperty("apic_contract_graph")
  private String apicContractGraph = null;

  @JsonProperty("application_profile_ref")
  private String applicationProfileRef = null;

  @JsonProperty("auto_allocate_floating_ip")
  private Boolean autoAllocateFloatingIp = null;

  @JsonProperty("auto_allocate_ip")
  private Boolean autoAllocateIp = null;

  @JsonProperty("availability_zone")
  private String availabilityZone = null;

  @JsonProperty("avi_allocated_fip")
  private Boolean aviAllocatedFip = null;

  @JsonProperty("avi_allocated_vip")
  private Boolean aviAllocatedVip = null;

  @JsonProperty("azure_availability_set")
  private String azureAvailabilitySet = null;

  @JsonProperty("bulk_sync_kvcache")
  private Boolean bulkSyncKvcache = null;

  @JsonProperty("client_auth")
  private HTTPClientAuthenticationParams clientAuth = null;

  @JsonProperty("close_client_conn_on_config_update")
  private Boolean closeClientConnOnConfigUpdate = null;

  @JsonProperty("cloud_config_cksum")
  private String cloudConfigCksum = null;

  @JsonProperty("cloud_ref")
  private String cloudRef = null;

  @JsonProperty("cloud_type")
  private String cloudType = "CLOUD_NONE";

  @JsonProperty("connections_rate_limit")
  private RateProfile connectionsRateLimit = null;

  @JsonProperty("content_rewrite")
  private ContentRewriteProfile contentRewrite = null;

  @JsonProperty("created_by")
  private String createdBy = null;

  @JsonProperty("delay_fairness")
  private Boolean delayFairness = null;

  @JsonProperty("description")
  private String description = null;

  @JsonProperty("discovered_network_ref")
  private List<String> discoveredNetworkRef = null;

  @JsonProperty("discovered_networks")
  private List<DiscoveredNetwork> discoveredNetworks = null;

  @JsonProperty("discovered_subnet")
  private List<IpAddrPrefix> discoveredSubnet = null;

  @JsonProperty("dns_info")
  private List<DnsInfo> dnsInfo = null;

  @JsonProperty("dns_policies")
  private List<DnsPolicies> dnsPolicies = null;

  @JsonProperty("east_west_placement")
  private Boolean eastWestPlacement = null;

  @JsonProperty("enable_autogw")
  private Boolean enableAutogw = true;

  @JsonProperty("enable_rhi")
  private Boolean enableRhi = null;

  @JsonProperty("enable_rhi_snat")
  private Boolean enableRhiSnat = null;

  @JsonProperty("enabled")
  private Boolean enabled = true;

  @JsonProperty("error_page_profile_ref")
  private String errorPageProfileRef = null;

  @JsonProperty("floating_ip")
  private IpAddr floatingIp = null;

  @JsonProperty("floating_subnet_uuid")
  private String floatingSubnetUuid = null;

  @JsonProperty("flow_dist")
  private String flowDist = "LOAD_AWARE";

  @JsonProperty("flow_label_type")
  private String flowLabelType = "NO_LABEL";

  @JsonProperty("fqdn")
  private String fqdn = null;

  @JsonProperty("host_name_xlate")
  private String hostNameXlate = null;

  @JsonProperty("http_policies")
  private List<HTTPPolicies> httpPolicies = null;

  @JsonProperty("ign_pool_net_reach")
  private Boolean ignPoolNetReach = null;

  @JsonProperty("ip_address")
  private IpAddr ipAddress = null;

  @JsonProperty("ipam_network_subnet")
  private IPNetworkSubnet ipamNetworkSubnet = null;

  @JsonProperty("l4_policies")
  private List<L4Policies> l4Policies = null;

  @JsonProperty("limit_doser")
  private Boolean limitDoser = null;

  @JsonProperty("max_cps_per_client")
  private Integer maxCpsPerClient = null;

  @JsonProperty("microservice_ref")
  private String microserviceRef = null;

  @JsonProperty("min_pools_up")
  private Integer minPoolsUp = null;

  @JsonProperty("name")
  private String name = null;

  @JsonProperty("network_profile_ref")
  private String networkProfileRef = null;

  @JsonProperty("network_ref")
  private String networkRef = null;

  @JsonProperty("network_security_policy_ref")
  private String networkSecurityPolicyRef = null;

  @JsonProperty("nsx_securitygroup")
  private List<String> nsxSecuritygroup = null;

  @JsonProperty("performance_limits")
  private PerformanceLimits performanceLimits = null;

  @JsonProperty("pool_group_ref")
  private String poolGroupRef = null;

  @JsonProperty("pool_ref")
  private String poolRef = null;

  @JsonProperty("port_uuid")
  private String portUuid = null;

  @JsonProperty("remove_listening_port_on_vs_down")
  private Boolean removeListeningPortOnVsDown = null;

  @JsonProperty("requests_rate_limit")
  private RateProfile requestsRateLimit = null;

  @JsonProperty("saml_sp_config")
  private SAMLSPConfig samlSpConfig = null;

  @JsonProperty("scaleout_ecmp")
  private Boolean scaleoutEcmp = null;

  @JsonProperty("se_group_ref")
  private String seGroupRef = null;

  @JsonProperty("security_policy_ref")
  private String securityPolicyRef = null;

  @JsonProperty("server_network_profile_ref")
  private String serverNetworkProfileRef = null;

  @JsonProperty("service_metadata")
  private String serviceMetadata = null;

  @JsonProperty("service_pool_select")
  private List<ServicePoolSelector> servicePoolSelect = null;

  @JsonProperty("services")
  private List<Service> services = null;

  @JsonProperty("sideband_profile")
  private SidebandProfile sidebandProfile = null;

  @JsonProperty("snat_ip")
  private List<IpAddr> snatIp = null;

  @JsonProperty("sp_pool_refs")
  private List<String> spPoolRefs = null;

  @JsonProperty("ssl_key_and_certificate_refs")
  private List<String> sslKeyAndCertificateRefs = null;

  @JsonProperty("ssl_profile_ref")
  private String sslProfileRef = null;

  @JsonProperty("ssl_profile_selectors")
  private List<SSLProfileSelector> sslProfileSelectors = null;

  @JsonProperty("ssl_sess_cache_avg_size")
  private Integer sslSessCacheAvgSize = 1024;

  @JsonProperty("sso_policy")
  private SSOPolicy ssoPolicy = null;

  @JsonProperty("sso_policy_ref")
  private String ssoPolicyRef = null;

  @JsonProperty("static_dns_records")
  private List<DnsRecord> staticDnsRecords = null;

  @JsonProperty("subnet")
  private IpAddrPrefix subnet = null;

  @JsonProperty("subnet_uuid")
  private String subnetUuid = null;

  @JsonProperty("tenant_ref")
  private String tenantRef = null;

  @JsonProperty("test_se_datastore_level_1_ref")
  private String testSeDatastoreLevel1Ref = null;

  @JsonProperty("topology_policies")
  private List<DnsPolicies> topologyPolicies = null;

  @JsonProperty("traffic_clone_profile_ref")
  private String trafficCloneProfileRef = null;

  @JsonProperty("traffic_enabled")
  private Boolean trafficEnabled = true;

  @JsonProperty("type")
  private String type = "VS_TYPE_NORMAL";

  @JsonProperty("url")
  private String url = null;

  @JsonProperty("use_bridge_ip_as_vip")
  private Boolean useBridgeIpAsVip = null;

  @JsonProperty("use_vip_as_snat")
  private Boolean useVipAsSnat = null;

  @JsonProperty("uuid")
  private String uuid = null;

  @JsonProperty("vh_domain_name")
  private List<String> vhDomainName = null;

  @JsonProperty("vh_parent_vs_uuid")
  private String vhParentVsUuid = null;

  @JsonProperty("vip")
  private List<Vip> vip = null;

  @JsonProperty("vrf_context_ref")
  private String vrfContextRef = null;

  @JsonProperty("vs_datascripts")
  private List<VSDataScripts> vsDatascripts = null;

  @JsonProperty("vsvip_cloud_config_cksum")
  private String vsvipCloudConfigCksum = null;

  @JsonProperty("vsvip_ref")
  private String vsvipRef = null;

  @JsonProperty("waf_policy_ref")
  private String wafPolicyRef = null;

  @JsonProperty("weight")
  private Integer weight = 1;

   /**
   * UNIX time since epoch in microseconds. Units(MICROSECONDS).
   * @return _lastModified
  **/
  @Schema(description = "UNIX time since epoch in microseconds. Units(MICROSECONDS).")
  public String getLastModified() {
    return _lastModified;
  }

  public VirtualService activeStandbySeTag(String activeStandbySeTag) {
    this.activeStandbySeTag = activeStandbySeTag;
    return this;
  }

   /**
   * This configuration only applies if the VirtualService is in Legacy Active Standby HA mode and Load Distribution among Active Standby is enabled. This field is used to tag the VirtualService so that VirtualServices with the same tag will share the same Active ServiceEngine. VirtualServices with different tags will have different Active ServiceEngines. If one of the ServiceEngine&#x27;s in the ServiceEngineGroup fails, all VirtualServices will end up using the same Active ServiceEngine. Redistribution of the VirtualServices can be either manual or automated when the failed ServiceEngine recovers. Redistribution is based on the auto redistribute property of the ServiceEngineGroup. Enum options - ACTIVE_STANDBY_SE_1, ACTIVE_STANDBY_SE_2.
   * @return activeStandbySeTag
  **/
  @Schema(description = "This configuration only applies if the VirtualService is in Legacy Active Standby HA mode and Load Distribution among Active Standby is enabled. This field is used to tag the VirtualService so that VirtualServices with the same tag will share the same Active ServiceEngine. VirtualServices with different tags will have different Active ServiceEngines. If one of the ServiceEngine's in the ServiceEngineGroup fails, all VirtualServices will end up using the same Active ServiceEngine. Redistribution of the VirtualServices can be either manual or automated when the failed ServiceEngine recovers. Redistribution is based on the auto redistribute property of the ServiceEngineGroup. Enum options - ACTIVE_STANDBY_SE_1, ACTIVE_STANDBY_SE_2.")
  public String getActiveStandbySeTag() {
    return activeStandbySeTag;
  }

  public void setActiveStandbySeTag(String activeStandbySeTag) {
    this.activeStandbySeTag = activeStandbySeTag;
  }

  public VirtualService advertiseDownVs(Boolean advertiseDownVs) {
    this.advertiseDownVs = advertiseDownVs;
    return this;
  }

   /**
   * Keep advertising Virtual Service via BGP even if it is marked down by health monitor. This setting takes effect for future Virtual Service flaps. To advertise current VSes that are down, please disable and re-enable the Virtual Service. Field introduced in 20.1.1.
   * @return advertiseDownVs
  **/
  @Schema(description = "Keep advertising Virtual Service via BGP even if it is marked down by health monitor. This setting takes effect for future Virtual Service flaps. To advertise current VSes that are down, please disable and re-enable the Virtual Service. Field introduced in 20.1.1.")
  public Boolean isAdvertiseDownVs() {
    return advertiseDownVs;
  }

  public void setAdvertiseDownVs(Boolean advertiseDownVs) {
    this.advertiseDownVs = advertiseDownVs;
  }

  public VirtualService allowInvalidClientCert(Boolean allowInvalidClientCert) {
    this.allowInvalidClientCert = allowInvalidClientCert;
    return this;
  }

   /**
   * Process request even if invalid client certificate is presented. Datascript APIs need to be used for processing of such requests. Field introduced in 18.2.3.
   * @return allowInvalidClientCert
  **/
  @Schema(description = "Process request even if invalid client certificate is presented. Datascript APIs need to be used for processing of such requests. Field introduced in 18.2.3.")
  public Boolean isAllowInvalidClientCert() {
    return allowInvalidClientCert;
  }

  public void setAllowInvalidClientCert(Boolean allowInvalidClientCert) {
    this.allowInvalidClientCert = allowInvalidClientCert;
  }

  public VirtualService analyticsPolicy(AnalyticsPolicy analyticsPolicy) {
    this.analyticsPolicy = analyticsPolicy;
    return this;
  }

   /**
   * Get analyticsPolicy
   * @return analyticsPolicy
  **/
  @Schema(description = "")
  public AnalyticsPolicy getAnalyticsPolicy() {
    return analyticsPolicy;
  }

  public void setAnalyticsPolicy(AnalyticsPolicy analyticsPolicy) {
    this.analyticsPolicy = analyticsPolicy;
  }

  public VirtualService analyticsProfileRef(String analyticsProfileRef) {
    this.analyticsProfileRef = analyticsProfileRef;
    return this;
  }

   /**
   * Specifies settings related to analytics. It is a reference to an object of type AnalyticsProfile.
   * @return analyticsProfileRef
  **/
  @Schema(description = "Specifies settings related to analytics. It is a reference to an object of type AnalyticsProfile.")
  public String getAnalyticsProfileRef() {
    return analyticsProfileRef;
  }

  public void setAnalyticsProfileRef(String analyticsProfileRef) {
    this.analyticsProfileRef = analyticsProfileRef;
  }

  public VirtualService apicContractGraph(String apicContractGraph) {
    this.apicContractGraph = apicContractGraph;
    return this;
  }

   /**
   * The name of the Contract/Graph associated with the Virtual Service. Should be in the &lt;Contract name&gt; &lt;Graph name&gt; format. This is applicable only for Service Integration mode with Cisco APIC Controller . Field introduced in 17.2.12,18.1.2.
   * @return apicContractGraph
  **/
  @Schema(description = "The name of the Contract/Graph associated with the Virtual Service. Should be in the <Contract name> <Graph name> format. This is applicable only for Service Integration mode with Cisco APIC Controller . Field introduced in 17.2.12,18.1.2.")
  public String getApicContractGraph() {
    return apicContractGraph;
  }

  public void setApicContractGraph(String apicContractGraph) {
    this.apicContractGraph = apicContractGraph;
  }

  public VirtualService applicationProfileRef(String applicationProfileRef) {
    this.applicationProfileRef = applicationProfileRef;
    return this;
  }

   /**
   * Enable application layer specific features for the Virtual Service. It is a reference to an object of type ApplicationProfile.
   * @return applicationProfileRef
  **/
  @Schema(description = "Enable application layer specific features for the Virtual Service. It is a reference to an object of type ApplicationProfile.")
  public String getApplicationProfileRef() {
    return applicationProfileRef;
  }

  public void setApplicationProfileRef(String applicationProfileRef) {
    this.applicationProfileRef = applicationProfileRef;
  }

  public VirtualService autoAllocateFloatingIp(Boolean autoAllocateFloatingIp) {
    this.autoAllocateFloatingIp = autoAllocateFloatingIp;
    return this;
  }

   /**
   * Auto-allocate floating/elastic IP from the Cloud infrastructure. Field deprecated in 17.1.1.
   * @return autoAllocateFloatingIp
  **/
  @Schema(description = "Auto-allocate floating/elastic IP from the Cloud infrastructure. Field deprecated in 17.1.1.")
  public Boolean isAutoAllocateFloatingIp() {
    return autoAllocateFloatingIp;
  }

  public void setAutoAllocateFloatingIp(Boolean autoAllocateFloatingIp) {
    this.autoAllocateFloatingIp = autoAllocateFloatingIp;
  }

  public VirtualService autoAllocateIp(Boolean autoAllocateIp) {
    this.autoAllocateIp = autoAllocateIp;
    return this;
  }

   /**
   * Auto-allocate VIP from the provided subnet. Field deprecated in 17.1.1.
   * @return autoAllocateIp
  **/
  @Schema(description = "Auto-allocate VIP from the provided subnet. Field deprecated in 17.1.1.")
  public Boolean isAutoAllocateIp() {
    return autoAllocateIp;
  }

  public void setAutoAllocateIp(Boolean autoAllocateIp) {
    this.autoAllocateIp = autoAllocateIp;
  }

  public VirtualService availabilityZone(String availabilityZone) {
    this.availabilityZone = availabilityZone;
    return this;
  }

   /**
   * Availability-zone to place the Virtual Service. Field deprecated in 17.1.1.
   * @return availabilityZone
  **/
  @Schema(description = "Availability-zone to place the Virtual Service. Field deprecated in 17.1.1.")
  public String getAvailabilityZone() {
    return availabilityZone;
  }

  public void setAvailabilityZone(String availabilityZone) {
    this.availabilityZone = availabilityZone;
  }

  public VirtualService aviAllocatedFip(Boolean aviAllocatedFip) {
    this.aviAllocatedFip = aviAllocatedFip;
    return this;
  }

   /**
   * (internal-use) FIP allocated by Avi in the Cloud infrastructure. Field deprecated in 17.1.1.
   * @return aviAllocatedFip
  **/
  @Schema(description = "(internal-use) FIP allocated by Avi in the Cloud infrastructure. Field deprecated in 17.1.1.")
  public Boolean isAviAllocatedFip() {
    return aviAllocatedFip;
  }

  public void setAviAllocatedFip(Boolean aviAllocatedFip) {
    this.aviAllocatedFip = aviAllocatedFip;
  }

  public VirtualService aviAllocatedVip(Boolean aviAllocatedVip) {
    this.aviAllocatedVip = aviAllocatedVip;
    return this;
  }

   /**
   * (internal-use) VIP allocated by Avi in the Cloud infrastructure. Field deprecated in 17.1.1.
   * @return aviAllocatedVip
  **/
  @Schema(description = "(internal-use) VIP allocated by Avi in the Cloud infrastructure. Field deprecated in 17.1.1.")
  public Boolean isAviAllocatedVip() {
    return aviAllocatedVip;
  }

  public void setAviAllocatedVip(Boolean aviAllocatedVip) {
    this.aviAllocatedVip = aviAllocatedVip;
  }

   /**
   * (internal-use)Applicable for Azure only. Azure Availability set to which this VS is associated. Internally set by the cloud connector. Field introduced in 17.2.12, 18.1.2.
   * @return azureAvailabilitySet
  **/
  @Schema(description = "(internal-use)Applicable for Azure only. Azure Availability set to which this VS is associated. Internally set by the cloud connector. Field introduced in 17.2.12, 18.1.2.")
  public String getAzureAvailabilitySet() {
    return azureAvailabilitySet;
  }

  public VirtualService bulkSyncKvcache(Boolean bulkSyncKvcache) {
    this.bulkSyncKvcache = bulkSyncKvcache;
    return this;
  }

   /**
   * (This is a beta feature). Sync Key-Value cache to the new SEs when VS is scaled out. For ex  SSL sessions are stored using VS&#x27;s Key-Value cache. When the VS is scaled out, the SSL session information is synced to the new SE, allowing existing SSL sessions to be reused on the new SE. . Field introduced in 17.2.7, 18.1.1.
   * @return bulkSyncKvcache
  **/
  @Schema(description = "(This is a beta feature). Sync Key-Value cache to the new SEs when VS is scaled out. For ex  SSL sessions are stored using VS's Key-Value cache. When the VS is scaled out, the SSL session information is synced to the new SE, allowing existing SSL sessions to be reused on the new SE. . Field introduced in 17.2.7, 18.1.1.")
  public Boolean isBulkSyncKvcache() {
    return bulkSyncKvcache;
  }

  public void setBulkSyncKvcache(Boolean bulkSyncKvcache) {
    this.bulkSyncKvcache = bulkSyncKvcache;
  }

  public VirtualService clientAuth(HTTPClientAuthenticationParams clientAuth) {
    this.clientAuth = clientAuth;
    return this;
  }

   /**
   * Get clientAuth
   * @return clientAuth
  **/
  @Schema(description = "")
  public HTTPClientAuthenticationParams getClientAuth() {
    return clientAuth;
  }

  public void setClientAuth(HTTPClientAuthenticationParams clientAuth) {
    this.clientAuth = clientAuth;
  }

  public VirtualService closeClientConnOnConfigUpdate(Boolean closeClientConnOnConfigUpdate) {
    this.closeClientConnOnConfigUpdate = closeClientConnOnConfigUpdate;
    return this;
  }

   /**
   * close client connection on vs config update. Field introduced in 17.2.4.
   * @return closeClientConnOnConfigUpdate
  **/
  @Schema(description = "close client connection on vs config update. Field introduced in 17.2.4.")
  public Boolean isCloseClientConnOnConfigUpdate() {
    return closeClientConnOnConfigUpdate;
  }

  public void setCloseClientConnOnConfigUpdate(Boolean closeClientConnOnConfigUpdate) {
    this.closeClientConnOnConfigUpdate = closeClientConnOnConfigUpdate;
  }

  public VirtualService cloudConfigCksum(String cloudConfigCksum) {
    this.cloudConfigCksum = cloudConfigCksum;
    return this;
  }

   /**
   * Checksum of cloud configuration for VS. Internally set by cloud connector.
   * @return cloudConfigCksum
  **/
  @Schema(description = "Checksum of cloud configuration for VS. Internally set by cloud connector.")
  public String getCloudConfigCksum() {
    return cloudConfigCksum;
  }

  public void setCloudConfigCksum(String cloudConfigCksum) {
    this.cloudConfigCksum = cloudConfigCksum;
  }

  public VirtualService cloudRef(String cloudRef) {
    this.cloudRef = cloudRef;
    return this;
  }

   /**
   *  It is a reference to an object of type Cloud.
   * @return cloudRef
  **/
  @Schema(description = " It is a reference to an object of type Cloud.")
  public String getCloudRef() {
    return cloudRef;
  }

  public void setCloudRef(String cloudRef) {
    this.cloudRef = cloudRef;
  }

  public VirtualService cloudType(String cloudType) {
    this.cloudType = cloudType;
    return this;
  }

   /**
   *  Enum options - CLOUD_NONE, CLOUD_VCENTER, CLOUD_OPENSTACK, CLOUD_AWS, CLOUD_VCA, CLOUD_APIC, CLOUD_MESOS, CLOUD_LINUXSERVER, CLOUD_DOCKER_UCP, CLOUD_RANCHER, CLOUD_OSHIFT_K8S, CLOUD_AZURE, CLOUD_GCP.
   * @return cloudType
  **/
  @Schema(description = " Enum options - CLOUD_NONE, CLOUD_VCENTER, CLOUD_OPENSTACK, CLOUD_AWS, CLOUD_VCA, CLOUD_APIC, CLOUD_MESOS, CLOUD_LINUXSERVER, CLOUD_DOCKER_UCP, CLOUD_RANCHER, CLOUD_OSHIFT_K8S, CLOUD_AZURE, CLOUD_GCP.")
  public String getCloudType() {
    return cloudType;
  }

  public void setCloudType(String cloudType) {
    this.cloudType = cloudType;
  }

  public VirtualService connectionsRateLimit(RateProfile connectionsRateLimit) {
    this.connectionsRateLimit = connectionsRateLimit;
    return this;
  }

   /**
   * Get connectionsRateLimit
   * @return connectionsRateLimit
  **/
  @Schema(description = "")
  public RateProfile getConnectionsRateLimit() {
    return connectionsRateLimit;
  }

  public void setConnectionsRateLimit(RateProfile connectionsRateLimit) {
    this.connectionsRateLimit = connectionsRateLimit;
  }

  public VirtualService contentRewrite(ContentRewriteProfile contentRewrite) {
    this.contentRewrite = contentRewrite;
    return this;
  }

   /**
   * Get contentRewrite
   * @return contentRewrite
  **/
  @Schema(description = "")
  public ContentRewriteProfile getContentRewrite() {
    return contentRewrite;
  }

  public void setContentRewrite(ContentRewriteProfile contentRewrite) {
    this.contentRewrite = contentRewrite;
  }

  public VirtualService createdBy(String createdBy) {
    this.createdBy = createdBy;
    return this;
  }

   /**
   * Creator name.
   * @return createdBy
  **/
  @Schema(description = "Creator name.")
  public String getCreatedBy() {
    return createdBy;
  }

  public void setCreatedBy(String createdBy) {
    this.createdBy = createdBy;
  }

  public VirtualService delayFairness(Boolean delayFairness) {
    this.delayFairness = delayFairness;
    return this;
  }

   /**
   * Select the algorithm for QoS fairness.  This determines how multiple Virtual Services sharing the same Service Engines will prioritize traffic over a congested network.
   * @return delayFairness
  **/
  @Schema(description = "Select the algorithm for QoS fairness.  This determines how multiple Virtual Services sharing the same Service Engines will prioritize traffic over a congested network.")
  public Boolean isDelayFairness() {
    return delayFairness;
  }

  public void setDelayFairness(Boolean delayFairness) {
    this.delayFairness = delayFairness;
  }

  public VirtualService description(String description) {
    this.description = description;
    return this;
  }

   /**
   * User defined description for the object.
   * @return description
  **/
  @Schema(description = "User defined description for the object.")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public VirtualService discoveredNetworkRef(List<String> discoveredNetworkRef) {
    this.discoveredNetworkRef = discoveredNetworkRef;
    return this;
  }

  public VirtualService addDiscoveredNetworkRefItem(String discoveredNetworkRefItem) {
    if (this.discoveredNetworkRef == null) {
      this.discoveredNetworkRef = new ArrayList<String>();
    }
    this.discoveredNetworkRef.add(discoveredNetworkRefItem);
    return this;
  }

   /**
   * (internal-use) Discovered networks providing reachability for client facing Virtual Service IP. This field is deprecated. It is a reference to an object of type Network. Field deprecated in 17.1.1.
   * @return discoveredNetworkRef
  **/
  @Schema(description = "(internal-use) Discovered networks providing reachability for client facing Virtual Service IP. This field is deprecated. It is a reference to an object of type Network. Field deprecated in 17.1.1.")
  public List<String> getDiscoveredNetworkRef() {
    return discoveredNetworkRef;
  }

  public void setDiscoveredNetworkRef(List<String> discoveredNetworkRef) {
    this.discoveredNetworkRef = discoveredNetworkRef;
  }

  public VirtualService discoveredNetworks(List<DiscoveredNetwork> discoveredNetworks) {
    this.discoveredNetworks = discoveredNetworks;
    return this;
  }

  public VirtualService addDiscoveredNetworksItem(DiscoveredNetwork discoveredNetworksItem) {
    if (this.discoveredNetworks == null) {
      this.discoveredNetworks = new ArrayList<DiscoveredNetwork>();
    }
    this.discoveredNetworks.add(discoveredNetworksItem);
    return this;
  }

   /**
   * (internal-use) Discovered networks providing reachability for client facing Virtual Service IP. This field is used internally by Avi, not editable by the user. Field deprecated in 17.1.1.
   * @return discoveredNetworks
  **/
  @Schema(description = "(internal-use) Discovered networks providing reachability for client facing Virtual Service IP. This field is used internally by Avi, not editable by the user. Field deprecated in 17.1.1.")
  public List<DiscoveredNetwork> getDiscoveredNetworks() {
    return discoveredNetworks;
  }

  public void setDiscoveredNetworks(List<DiscoveredNetwork> discoveredNetworks) {
    this.discoveredNetworks = discoveredNetworks;
  }

  public VirtualService discoveredSubnet(List<IpAddrPrefix> discoveredSubnet) {
    this.discoveredSubnet = discoveredSubnet;
    return this;
  }

  public VirtualService addDiscoveredSubnetItem(IpAddrPrefix discoveredSubnetItem) {
    if (this.discoveredSubnet == null) {
      this.discoveredSubnet = new ArrayList<IpAddrPrefix>();
    }
    this.discoveredSubnet.add(discoveredSubnetItem);
    return this;
  }

   /**
   * (internal-use) Discovered subnets providing reachability for client facing Virtual Service IP. This field is deprecated. Field deprecated in 17.1.1.
   * @return discoveredSubnet
  **/
  @Schema(description = "(internal-use) Discovered subnets providing reachability for client facing Virtual Service IP. This field is deprecated. Field deprecated in 17.1.1.")
  public List<IpAddrPrefix> getDiscoveredSubnet() {
    return discoveredSubnet;
  }

  public void setDiscoveredSubnet(List<IpAddrPrefix> discoveredSubnet) {
    this.discoveredSubnet = discoveredSubnet;
  }

  public VirtualService dnsInfo(List<DnsInfo> dnsInfo) {
    this.dnsInfo = dnsInfo;
    return this;
  }

  public VirtualService addDnsInfoItem(DnsInfo dnsInfoItem) {
    if (this.dnsInfo == null) {
      this.dnsInfo = new ArrayList<DnsInfo>();
    }
    this.dnsInfo.add(dnsInfoItem);
    return this;
  }

   /**
   * Service discovery specific data including fully qualified domain name, type and Time-To-Live of the DNS record. Note that only one of fqdn and dns_info setting is allowed.
   * @return dnsInfo
  **/
  @Schema(description = "Service discovery specific data including fully qualified domain name, type and Time-To-Live of the DNS record. Note that only one of fqdn and dns_info setting is allowed.")
  public List<DnsInfo> getDnsInfo() {
    return dnsInfo;
  }

  public void setDnsInfo(List<DnsInfo> dnsInfo) {
    this.dnsInfo = dnsInfo;
  }

  public VirtualService dnsPolicies(List<DnsPolicies> dnsPolicies) {
    this.dnsPolicies = dnsPolicies;
    return this;
  }

  public VirtualService addDnsPoliciesItem(DnsPolicies dnsPoliciesItem) {
    if (this.dnsPolicies == null) {
      this.dnsPolicies = new ArrayList<DnsPolicies>();
    }
    this.dnsPolicies.add(dnsPoliciesItem);
    return this;
  }

   /**
   * DNS Policies applied on the dns traffic of the Virtual Service. Field introduced in 17.1.1.
   * @return dnsPolicies
  **/
  @Schema(description = "DNS Policies applied on the dns traffic of the Virtual Service. Field introduced in 17.1.1.")
  public List<DnsPolicies> getDnsPolicies() {
    return dnsPolicies;
  }

  public void setDnsPolicies(List<DnsPolicies> dnsPolicies) {
    this.dnsPolicies = dnsPolicies;
  }

  public VirtualService eastWestPlacement(Boolean eastWestPlacement) {
    this.eastWestPlacement = eastWestPlacement;
    return this;
  }

   /**
   * Force placement on all SE&#x27;s in service group (Mesos mode only).
   * @return eastWestPlacement
  **/
  @Schema(description = "Force placement on all SE's in service group (Mesos mode only).")
  public Boolean isEastWestPlacement() {
    return eastWestPlacement;
  }

  public void setEastWestPlacement(Boolean eastWestPlacement) {
    this.eastWestPlacement = eastWestPlacement;
  }

  public VirtualService enableAutogw(Boolean enableAutogw) {
    this.enableAutogw = enableAutogw;
    return this;
  }

   /**
   * Response traffic to clients will be sent back to the source MAC address of the connection, rather than statically sent to a default gateway.
   * @return enableAutogw
  **/
  @Schema(description = "Response traffic to clients will be sent back to the source MAC address of the connection, rather than statically sent to a default gateway.")
  public Boolean isEnableAutogw() {
    return enableAutogw;
  }

  public void setEnableAutogw(Boolean enableAutogw) {
    this.enableAutogw = enableAutogw;
  }

  public VirtualService enableRhi(Boolean enableRhi) {
    this.enableRhi = enableRhi;
    return this;
  }

   /**
   * Enable Route Health Injection using the BGP Config in the vrf context.
   * @return enableRhi
  **/
  @Schema(description = "Enable Route Health Injection using the BGP Config in the vrf context.")
  public Boolean isEnableRhi() {
    return enableRhi;
  }

  public void setEnableRhi(Boolean enableRhi) {
    this.enableRhi = enableRhi;
  }

  public VirtualService enableRhiSnat(Boolean enableRhiSnat) {
    this.enableRhiSnat = enableRhiSnat;
    return this;
  }

   /**
   * Enable Route Health Injection for Source NAT&#x27;ted floating IP Address using the BGP Config in the vrf context.
   * @return enableRhiSnat
  **/
  @Schema(description = "Enable Route Health Injection for Source NAT'ted floating IP Address using the BGP Config in the vrf context.")
  public Boolean isEnableRhiSnat() {
    return enableRhiSnat;
  }

  public void setEnableRhiSnat(Boolean enableRhiSnat) {
    this.enableRhiSnat = enableRhiSnat;
  }

  public VirtualService enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

   /**
   * Enable or disable the Virtual Service.
   * @return enabled
  **/
  @Schema(description = "Enable or disable the Virtual Service.")
  public Boolean isEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }

  public VirtualService errorPageProfileRef(String errorPageProfileRef) {
    this.errorPageProfileRef = errorPageProfileRef;
    return this;
  }

   /**
   * Error Page Profile to be used for this virtualservice.This profile is used to send the custom error page to the client generated by the proxy. It is a reference to an object of type ErrorPageProfile. Field introduced in 17.2.4.
   * @return errorPageProfileRef
  **/
  @Schema(description = "Error Page Profile to be used for this virtualservice.This profile is used to send the custom error page to the client generated by the proxy. It is a reference to an object of type ErrorPageProfile. Field introduced in 17.2.4.")
  public String getErrorPageProfileRef() {
    return errorPageProfileRef;
  }

  public void setErrorPageProfileRef(String errorPageProfileRef) {
    this.errorPageProfileRef = errorPageProfileRef;
  }

  public VirtualService floatingIp(IpAddr floatingIp) {
    this.floatingIp = floatingIp;
    return this;
  }

   /**
   * Get floatingIp
   * @return floatingIp
  **/
  @Schema(description = "")
  public IpAddr getFloatingIp() {
    return floatingIp;
  }

  public void setFloatingIp(IpAddr floatingIp) {
    this.floatingIp = floatingIp;
  }

  public VirtualService floatingSubnetUuid(String floatingSubnetUuid) {
    this.floatingSubnetUuid = floatingSubnetUuid;
    return this;
  }

   /**
   * If auto_allocate_floating_ip is True and more than one floating-ip subnets exist, then the subnet for the floating IP address allocation. This field is applicable only if the VirtualService belongs to an OpenStack or AWS cloud. In OpenStack or AWS cloud it is required when auto_allocate_floating_ip is selected. Field deprecated in 17.1.1.
   * @return floatingSubnetUuid
  **/
  @Schema(description = "If auto_allocate_floating_ip is True and more than one floating-ip subnets exist, then the subnet for the floating IP address allocation. This field is applicable only if the VirtualService belongs to an OpenStack or AWS cloud. In OpenStack or AWS cloud it is required when auto_allocate_floating_ip is selected. Field deprecated in 17.1.1.")
  public String getFloatingSubnetUuid() {
    return floatingSubnetUuid;
  }

  public void setFloatingSubnetUuid(String floatingSubnetUuid) {
    this.floatingSubnetUuid = floatingSubnetUuid;
  }

  public VirtualService flowDist(String flowDist) {
    this.flowDist = flowDist;
    return this;
  }

   /**
   * Criteria for flow distribution among SEs. Enum options - LOAD_AWARE, CONSISTENT_HASH_SOURCE_IP_ADDRESS, CONSISTENT_HASH_SOURCE_IP_ADDRESS_AND_PORT.
   * @return flowDist
  **/
  @Schema(description = "Criteria for flow distribution among SEs. Enum options - LOAD_AWARE, CONSISTENT_HASH_SOURCE_IP_ADDRESS, CONSISTENT_HASH_SOURCE_IP_ADDRESS_AND_PORT.")
  public String getFlowDist() {
    return flowDist;
  }

  public void setFlowDist(String flowDist) {
    this.flowDist = flowDist;
  }

  public VirtualService flowLabelType(String flowLabelType) {
    this.flowLabelType = flowLabelType;
    return this;
  }

   /**
   * Criteria for flow labelling. Enum options - NO_LABEL, APPLICATION_LABEL, SERVICE_LABEL.
   * @return flowLabelType
  **/
  @Schema(description = "Criteria for flow labelling. Enum options - NO_LABEL, APPLICATION_LABEL, SERVICE_LABEL.")
  public String getFlowLabelType() {
    return flowLabelType;
  }

  public void setFlowLabelType(String flowLabelType) {
    this.flowLabelType = flowLabelType;
  }

  public VirtualService fqdn(String fqdn) {
    this.fqdn = fqdn;
    return this;
  }

   /**
   * DNS resolvable, fully qualified domain name of the virtualservice. Only one of &#x27;fqdn&#x27; and &#x27;dns_info&#x27; configuration is allowed.
   * @return fqdn
  **/
  @Schema(description = "DNS resolvable, fully qualified domain name of the virtualservice. Only one of 'fqdn' and 'dns_info' configuration is allowed.")
  public String getFqdn() {
    return fqdn;
  }

  public void setFqdn(String fqdn) {
    this.fqdn = fqdn;
  }

  public VirtualService hostNameXlate(String hostNameXlate) {
    this.hostNameXlate = hostNameXlate;
    return this;
  }

   /**
   * Translate the host name sent to the servers to this value.  Translate the host name sent from servers back to the value used by the client.
   * @return hostNameXlate
  **/
  @Schema(description = "Translate the host name sent to the servers to this value.  Translate the host name sent from servers back to the value used by the client.")
  public String getHostNameXlate() {
    return hostNameXlate;
  }

  public void setHostNameXlate(String hostNameXlate) {
    this.hostNameXlate = hostNameXlate;
  }

  public VirtualService httpPolicies(List<HTTPPolicies> httpPolicies) {
    this.httpPolicies = httpPolicies;
    return this;
  }

  public VirtualService addHttpPoliciesItem(HTTPPolicies httpPoliciesItem) {
    if (this.httpPolicies == null) {
      this.httpPolicies = new ArrayList<HTTPPolicies>();
    }
    this.httpPolicies.add(httpPoliciesItem);
    return this;
  }

   /**
   * HTTP Policies applied on the data traffic of the Virtual Service.
   * @return httpPolicies
  **/
  @Schema(description = "HTTP Policies applied on the data traffic of the Virtual Service.")
  public List<HTTPPolicies> getHttpPolicies() {
    return httpPolicies;
  }

  public void setHttpPolicies(List<HTTPPolicies> httpPolicies) {
    this.httpPolicies = httpPolicies;
  }

  public VirtualService ignPoolNetReach(Boolean ignPoolNetReach) {
    this.ignPoolNetReach = ignPoolNetReach;
    return this;
  }

   /**
   * Ignore Pool servers network reachability constraints for Virtual Service placement.
   * @return ignPoolNetReach
  **/
  @Schema(description = "Ignore Pool servers network reachability constraints for Virtual Service placement.")
  public Boolean isIgnPoolNetReach() {
    return ignPoolNetReach;
  }

  public void setIgnPoolNetReach(Boolean ignPoolNetReach) {
    this.ignPoolNetReach = ignPoolNetReach;
  }

  public VirtualService ipAddress(IpAddr ipAddress) {
    this.ipAddress = ipAddress;
    return this;
  }

   /**
   * Get ipAddress
   * @return ipAddress
  **/
  @Schema(description = "")
  public IpAddr getIpAddress() {
    return ipAddress;
  }

  public void setIpAddress(IpAddr ipAddress) {
    this.ipAddress = ipAddress;
  }

  public VirtualService ipamNetworkSubnet(IPNetworkSubnet ipamNetworkSubnet) {
    this.ipamNetworkSubnet = ipamNetworkSubnet;
    return this;
  }

   /**
   * Get ipamNetworkSubnet
   * @return ipamNetworkSubnet
  **/
  @Schema(description = "")
  public IPNetworkSubnet getIpamNetworkSubnet() {
    return ipamNetworkSubnet;
  }

  public void setIpamNetworkSubnet(IPNetworkSubnet ipamNetworkSubnet) {
    this.ipamNetworkSubnet = ipamNetworkSubnet;
  }

  public VirtualService l4Policies(List<L4Policies> l4Policies) {
    this.l4Policies = l4Policies;
    return this;
  }

  public VirtualService addL4PoliciesItem(L4Policies l4PoliciesItem) {
    if (this.l4Policies == null) {
      this.l4Policies = new ArrayList<L4Policies>();
    }
    this.l4Policies.add(l4PoliciesItem);
    return this;
  }

   /**
   * L4 Policies applied to the data traffic of the Virtual Service. Field introduced in 17.2.7.
   * @return l4Policies
  **/
  @Schema(description = "L4 Policies applied to the data traffic of the Virtual Service. Field introduced in 17.2.7.")
  public List<L4Policies> getL4Policies() {
    return l4Policies;
  }

  public void setL4Policies(List<L4Policies> l4Policies) {
    this.l4Policies = l4Policies;
  }

  public VirtualService limitDoser(Boolean limitDoser) {
    this.limitDoser = limitDoser;
    return this;
  }

   /**
   * Limit potential DoS attackers who exceed max_cps_per_client significantly to a fraction of max_cps_per_client for a while.
   * @return limitDoser
  **/
  @Schema(description = "Limit potential DoS attackers who exceed max_cps_per_client significantly to a fraction of max_cps_per_client for a while.")
  public Boolean isLimitDoser() {
    return limitDoser;
  }

  public void setLimitDoser(Boolean limitDoser) {
    this.limitDoser = limitDoser;
  }

  public VirtualService maxCpsPerClient(Integer maxCpsPerClient) {
    this.maxCpsPerClient = maxCpsPerClient;
    return this;
  }

   /**
   * Maximum connections per second per client IP. Allowed values are 10-1000. Special values are 0- &#x27;unlimited&#x27;.
   * @return maxCpsPerClient
  **/
  @Schema(description = "Maximum connections per second per client IP. Allowed values are 10-1000. Special values are 0- 'unlimited'.")
  public Integer getMaxCpsPerClient() {
    return maxCpsPerClient;
  }

  public void setMaxCpsPerClient(Integer maxCpsPerClient) {
    this.maxCpsPerClient = maxCpsPerClient;
  }

  public VirtualService microserviceRef(String microserviceRef) {
    this.microserviceRef = microserviceRef;
    return this;
  }

   /**
   * Microservice representing the virtual service. It is a reference to an object of type MicroService.
   * @return microserviceRef
  **/
  @Schema(description = "Microservice representing the virtual service. It is a reference to an object of type MicroService.")
  public String getMicroserviceRef() {
    return microserviceRef;
  }

  public void setMicroserviceRef(String microserviceRef) {
    this.microserviceRef = microserviceRef;
  }

  public VirtualService minPoolsUp(Integer minPoolsUp) {
    this.minPoolsUp = minPoolsUp;
    return this;
  }

   /**
   * Minimum number of UP pools to mark VS up. Field introduced in 18.2.1, 17.2.12.
   * @return minPoolsUp
  **/
  @Schema(description = "Minimum number of UP pools to mark VS up. Field introduced in 18.2.1, 17.2.12.")
  public Integer getMinPoolsUp() {
    return minPoolsUp;
  }

  public void setMinPoolsUp(Integer minPoolsUp) {
    this.minPoolsUp = minPoolsUp;
  }

  public VirtualService name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Name for the Virtual Service.
   * @return name
  **/
  @Schema(required = true, description = "Name for the Virtual Service.")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public VirtualService networkProfileRef(String networkProfileRef) {
    this.networkProfileRef = networkProfileRef;
    return this;
  }

   /**
   * Determines network settings such as protocol, TCP or UDP, and related options for the protocol. It is a reference to an object of type NetworkProfile.
   * @return networkProfileRef
  **/
  @Schema(description = "Determines network settings such as protocol, TCP or UDP, and related options for the protocol. It is a reference to an object of type NetworkProfile.")
  public String getNetworkProfileRef() {
    return networkProfileRef;
  }

  public void setNetworkProfileRef(String networkProfileRef) {
    this.networkProfileRef = networkProfileRef;
  }

  public VirtualService networkRef(String networkRef) {
    this.networkRef = networkRef;
    return this;
  }

   /**
   * Manually override the network on which the Virtual Service is placed. It is a reference to an object of type Network. Field deprecated in 17.1.1.
   * @return networkRef
  **/
  @Schema(description = "Manually override the network on which the Virtual Service is placed. It is a reference to an object of type Network. Field deprecated in 17.1.1.")
  public String getNetworkRef() {
    return networkRef;
  }

  public void setNetworkRef(String networkRef) {
    this.networkRef = networkRef;
  }

  public VirtualService networkSecurityPolicyRef(String networkSecurityPolicyRef) {
    this.networkSecurityPolicyRef = networkSecurityPolicyRef;
    return this;
  }

   /**
   * Network security policies for the Virtual Service. It is a reference to an object of type NetworkSecurityPolicy.
   * @return networkSecurityPolicyRef
  **/
  @Schema(description = "Network security policies for the Virtual Service. It is a reference to an object of type NetworkSecurityPolicy.")
  public String getNetworkSecurityPolicyRef() {
    return networkSecurityPolicyRef;
  }

  public void setNetworkSecurityPolicyRef(String networkSecurityPolicyRef) {
    this.networkSecurityPolicyRef = networkSecurityPolicyRef;
  }

  public VirtualService nsxSecuritygroup(List<String> nsxSecuritygroup) {
    this.nsxSecuritygroup = nsxSecuritygroup;
    return this;
  }

  public VirtualService addNsxSecuritygroupItem(String nsxSecuritygroupItem) {
    if (this.nsxSecuritygroup == null) {
      this.nsxSecuritygroup = new ArrayList<String>();
    }
    this.nsxSecuritygroup.add(nsxSecuritygroupItem);
    return this;
  }

   /**
   * A list of NSX Service Groups representing the Clients which can access the Virtual IP of the Virtual Service. Field introduced in 17.1.1.
   * @return nsxSecuritygroup
  **/
  @Schema(description = "A list of NSX Service Groups representing the Clients which can access the Virtual IP of the Virtual Service. Field introduced in 17.1.1.")
  public List<String> getNsxSecuritygroup() {
    return nsxSecuritygroup;
  }

  public void setNsxSecuritygroup(List<String> nsxSecuritygroup) {
    this.nsxSecuritygroup = nsxSecuritygroup;
  }

  public VirtualService performanceLimits(PerformanceLimits performanceLimits) {
    this.performanceLimits = performanceLimits;
    return this;
  }

   /**
   * Get performanceLimits
   * @return performanceLimits
  **/
  @Schema(description = "")
  public PerformanceLimits getPerformanceLimits() {
    return performanceLimits;
  }

  public void setPerformanceLimits(PerformanceLimits performanceLimits) {
    this.performanceLimits = performanceLimits;
  }

  public VirtualService poolGroupRef(String poolGroupRef) {
    this.poolGroupRef = poolGroupRef;
    return this;
  }

   /**
   * The pool group is an object that contains pools. It is a reference to an object of type PoolGroup.
   * @return poolGroupRef
  **/
  @Schema(description = "The pool group is an object that contains pools. It is a reference to an object of type PoolGroup.")
  public String getPoolGroupRef() {
    return poolGroupRef;
  }

  public void setPoolGroupRef(String poolGroupRef) {
    this.poolGroupRef = poolGroupRef;
  }

  public VirtualService poolRef(String poolRef) {
    this.poolRef = poolRef;
    return this;
  }

   /**
   * The pool is an object that contains destination servers and related attributes such as load-balancing and persistence. It is a reference to an object of type Pool.
   * @return poolRef
  **/
  @Schema(description = "The pool is an object that contains destination servers and related attributes such as load-balancing and persistence. It is a reference to an object of type Pool.")
  public String getPoolRef() {
    return poolRef;
  }

  public void setPoolRef(String poolRef) {
    this.poolRef = poolRef;
  }

  public VirtualService portUuid(String portUuid) {
    this.portUuid = portUuid;
    return this;
  }

   /**
   * (internal-use) Network port assigned to the Virtual Service IP address. Field deprecated in 17.1.1.
   * @return portUuid
  **/
  @Schema(description = "(internal-use) Network port assigned to the Virtual Service IP address. Field deprecated in 17.1.1.")
  public String getPortUuid() {
    return portUuid;
  }

  public void setPortUuid(String portUuid) {
    this.portUuid = portUuid;
  }

  public VirtualService removeListeningPortOnVsDown(Boolean removeListeningPortOnVsDown) {
    this.removeListeningPortOnVsDown = removeListeningPortOnVsDown;
    return this;
  }

   /**
   * Remove listening port if VirtualService is down.
   * @return removeListeningPortOnVsDown
  **/
  @Schema(description = "Remove listening port if VirtualService is down.")
  public Boolean isRemoveListeningPortOnVsDown() {
    return removeListeningPortOnVsDown;
  }

  public void setRemoveListeningPortOnVsDown(Boolean removeListeningPortOnVsDown) {
    this.removeListeningPortOnVsDown = removeListeningPortOnVsDown;
  }

  public VirtualService requestsRateLimit(RateProfile requestsRateLimit) {
    this.requestsRateLimit = requestsRateLimit;
    return this;
  }

   /**
   * Get requestsRateLimit
   * @return requestsRateLimit
  **/
  @Schema(description = "")
  public RateProfile getRequestsRateLimit() {
    return requestsRateLimit;
  }

  public void setRequestsRateLimit(RateProfile requestsRateLimit) {
    this.requestsRateLimit = requestsRateLimit;
  }

  public VirtualService samlSpConfig(SAMLSPConfig samlSpConfig) {
    this.samlSpConfig = samlSpConfig;
    return this;
  }

   /**
   * Get samlSpConfig
   * @return samlSpConfig
  **/
  @Schema(description = "")
  public SAMLSPConfig getSamlSpConfig() {
    return samlSpConfig;
  }

  public void setSamlSpConfig(SAMLSPConfig samlSpConfig) {
    this.samlSpConfig = samlSpConfig;
  }

  public VirtualService scaleoutEcmp(Boolean scaleoutEcmp) {
    this.scaleoutEcmp = scaleoutEcmp;
    return this;
  }

   /**
   * Disable re-distribution of flows across service engines for a virtual service. Enable if the network itself performs flow hashing with ECMP in environments such as GCP.
   * @return scaleoutEcmp
  **/
  @Schema(description = "Disable re-distribution of flows across service engines for a virtual service. Enable if the network itself performs flow hashing with ECMP in environments such as GCP.")
  public Boolean isScaleoutEcmp() {
    return scaleoutEcmp;
  }

  public void setScaleoutEcmp(Boolean scaleoutEcmp) {
    this.scaleoutEcmp = scaleoutEcmp;
  }

  public VirtualService seGroupRef(String seGroupRef) {
    this.seGroupRef = seGroupRef;
    return this;
  }

   /**
   * The Service Engine Group to use for this Virtual Service. Moving to a new SE Group is disruptive to existing connections for this VS. It is a reference to an object of type ServiceEngineGroup.
   * @return seGroupRef
  **/
  @Schema(description = "The Service Engine Group to use for this Virtual Service. Moving to a new SE Group is disruptive to existing connections for this VS. It is a reference to an object of type ServiceEngineGroup.")
  public String getSeGroupRef() {
    return seGroupRef;
  }

  public void setSeGroupRef(String seGroupRef) {
    this.seGroupRef = seGroupRef;
  }

  public VirtualService securityPolicyRef(String securityPolicyRef) {
    this.securityPolicyRef = securityPolicyRef;
    return this;
  }

   /**
   * Security policy applied on the traffic of the Virtual Service. This policy is used to perform security actions such as Distributed Denial of Service (DDoS) attack mitigation, etc. It is a reference to an object of type SecurityPolicy. Field introduced in 18.2.1.
   * @return securityPolicyRef
  **/
  @Schema(description = "Security policy applied on the traffic of the Virtual Service. This policy is used to perform security actions such as Distributed Denial of Service (DDoS) attack mitigation, etc. It is a reference to an object of type SecurityPolicy. Field introduced in 18.2.1.")
  public String getSecurityPolicyRef() {
    return securityPolicyRef;
  }

  public void setSecurityPolicyRef(String securityPolicyRef) {
    this.securityPolicyRef = securityPolicyRef;
  }

  public VirtualService serverNetworkProfileRef(String serverNetworkProfileRef) {
    this.serverNetworkProfileRef = serverNetworkProfileRef;
    return this;
  }

   /**
   * Determines the network settings profile for the server side of TCP proxied connections.  Leave blank to use the same settings as the client to VS side of the connection. It is a reference to an object of type NetworkProfile.
   * @return serverNetworkProfileRef
  **/
  @Schema(description = "Determines the network settings profile for the server side of TCP proxied connections.  Leave blank to use the same settings as the client to VS side of the connection. It is a reference to an object of type NetworkProfile.")
  public String getServerNetworkProfileRef() {
    return serverNetworkProfileRef;
  }

  public void setServerNetworkProfileRef(String serverNetworkProfileRef) {
    this.serverNetworkProfileRef = serverNetworkProfileRef;
  }

  public VirtualService serviceMetadata(String serviceMetadata) {
    this.serviceMetadata = serviceMetadata;
    return this;
  }

   /**
   * Metadata pertaining to the Service provided by this virtual service. In Openshift/Kubernetes environments, egress pod info is stored. Any user input to this field will be overwritten by Avi Vantage.
   * @return serviceMetadata
  **/
  @Schema(description = "Metadata pertaining to the Service provided by this virtual service. In Openshift/Kubernetes environments, egress pod info is stored. Any user input to this field will be overwritten by Avi Vantage.")
  public String getServiceMetadata() {
    return serviceMetadata;
  }

  public void setServiceMetadata(String serviceMetadata) {
    this.serviceMetadata = serviceMetadata;
  }

  public VirtualService servicePoolSelect(List<ServicePoolSelector> servicePoolSelect) {
    this.servicePoolSelect = servicePoolSelect;
    return this;
  }

  public VirtualService addServicePoolSelectItem(ServicePoolSelector servicePoolSelectItem) {
    if (this.servicePoolSelect == null) {
      this.servicePoolSelect = new ArrayList<ServicePoolSelector>();
    }
    this.servicePoolSelect.add(servicePoolSelectItem);
    return this;
  }

   /**
   * Select pool based on destination port.
   * @return servicePoolSelect
  **/
  @Schema(description = "Select pool based on destination port.")
  public List<ServicePoolSelector> getServicePoolSelect() {
    return servicePoolSelect;
  }

  public void setServicePoolSelect(List<ServicePoolSelector> servicePoolSelect) {
    this.servicePoolSelect = servicePoolSelect;
  }

  public VirtualService services(List<Service> services) {
    this.services = services;
    return this;
  }

  public VirtualService addServicesItem(Service servicesItem) {
    if (this.services == null) {
      this.services = new ArrayList<Service>();
    }
    this.services.add(servicesItem);
    return this;
  }

   /**
   * List of Services defined for this Virtual Service.
   * @return services
  **/
  @Schema(description = "List of Services defined for this Virtual Service.")
  public List<Service> getServices() {
    return services;
  }

  public void setServices(List<Service> services) {
    this.services = services;
  }

  public VirtualService sidebandProfile(SidebandProfile sidebandProfile) {
    this.sidebandProfile = sidebandProfile;
    return this;
  }

   /**
   * Get sidebandProfile
   * @return sidebandProfile
  **/
  @Schema(description = "")
  public SidebandProfile getSidebandProfile() {
    return sidebandProfile;
  }

  public void setSidebandProfile(SidebandProfile sidebandProfile) {
    this.sidebandProfile = sidebandProfile;
  }

  public VirtualService snatIp(List<IpAddr> snatIp) {
    this.snatIp = snatIp;
    return this;
  }

  public VirtualService addSnatIpItem(IpAddr snatIpItem) {
    if (this.snatIp == null) {
      this.snatIp = new ArrayList<IpAddr>();
    }
    this.snatIp.add(snatIpItem);
    return this;
  }

   /**
   * NAT&#x27;ted floating source IP Address(es) for upstream connection to servers.
   * @return snatIp
  **/
  @Schema(description = "NAT'ted floating source IP Address(es) for upstream connection to servers.")
  public List<IpAddr> getSnatIp() {
    return snatIp;
  }

  public void setSnatIp(List<IpAddr> snatIp) {
    this.snatIp = snatIp;
  }

   /**
   * GSLB pools used to manage site-persistence functionality. Each site-persistence pool contains the virtualservices in all the other sites, that is auto-generated by the GSLB manager. This is a read-only field for the user. It is a reference to an object of type Pool. Field introduced in 17.2.2.
   * @return spPoolRefs
  **/
  @Schema(description = "GSLB pools used to manage site-persistence functionality. Each site-persistence pool contains the virtualservices in all the other sites, that is auto-generated by the GSLB manager. This is a read-only field for the user. It is a reference to an object of type Pool. Field introduced in 17.2.2.")
  public List<String> getSpPoolRefs() {
    return spPoolRefs;
  }

  public VirtualService sslKeyAndCertificateRefs(List<String> sslKeyAndCertificateRefs) {
    this.sslKeyAndCertificateRefs = sslKeyAndCertificateRefs;
    return this;
  }

  public VirtualService addSslKeyAndCertificateRefsItem(String sslKeyAndCertificateRefsItem) {
    if (this.sslKeyAndCertificateRefs == null) {
      this.sslKeyAndCertificateRefs = new ArrayList<String>();
    }
    this.sslKeyAndCertificateRefs.add(sslKeyAndCertificateRefsItem);
    return this;
  }

   /**
   * Select or create one or two certificates, EC and/or RSA, that will be presented to SSL/TLS terminated connections. It is a reference to an object of type SSLKeyAndCertificate.
   * @return sslKeyAndCertificateRefs
  **/
  @Schema(description = "Select or create one or two certificates, EC and/or RSA, that will be presented to SSL/TLS terminated connections. It is a reference to an object of type SSLKeyAndCertificate.")
  public List<String> getSslKeyAndCertificateRefs() {
    return sslKeyAndCertificateRefs;
  }

  public void setSslKeyAndCertificateRefs(List<String> sslKeyAndCertificateRefs) {
    this.sslKeyAndCertificateRefs = sslKeyAndCertificateRefs;
  }

  public VirtualService sslProfileRef(String sslProfileRef) {
    this.sslProfileRef = sslProfileRef;
    return this;
  }

   /**
   * Determines the set of SSL versions and ciphers to accept for SSL/TLS terminated connections. It is a reference to an object of type SSLProfile.
   * @return sslProfileRef
  **/
  @Schema(description = "Determines the set of SSL versions and ciphers to accept for SSL/TLS terminated connections. It is a reference to an object of type SSLProfile.")
  public String getSslProfileRef() {
    return sslProfileRef;
  }

  public void setSslProfileRef(String sslProfileRef) {
    this.sslProfileRef = sslProfileRef;
  }

  public VirtualService sslProfileSelectors(List<SSLProfileSelector> sslProfileSelectors) {
    this.sslProfileSelectors = sslProfileSelectors;
    return this;
  }

  public VirtualService addSslProfileSelectorsItem(SSLProfileSelector sslProfileSelectorsItem) {
    if (this.sslProfileSelectors == null) {
      this.sslProfileSelectors = new ArrayList<SSLProfileSelector>();
    }
    this.sslProfileSelectors.add(sslProfileSelectorsItem);
    return this;
  }

   /**
   * Select SSL Profile based on client IP address match. Field introduced in 18.2.3.
   * @return sslProfileSelectors
  **/
  @Schema(description = "Select SSL Profile based on client IP address match. Field introduced in 18.2.3.")
  public List<SSLProfileSelector> getSslProfileSelectors() {
    return sslProfileSelectors;
  }

  public void setSslProfileSelectors(List<SSLProfileSelector> sslProfileSelectors) {
    this.sslProfileSelectors = sslProfileSelectors;
  }

  public VirtualService sslSessCacheAvgSize(Integer sslSessCacheAvgSize) {
    this.sslSessCacheAvgSize = sslSessCacheAvgSize;
    return this;
  }

   /**
   * Expected number of SSL session cache entries (may be exceeded). Allowed values are 1024-16383.
   * @return sslSessCacheAvgSize
  **/
  @Schema(description = "Expected number of SSL session cache entries (may be exceeded). Allowed values are 1024-16383.")
  public Integer getSslSessCacheAvgSize() {
    return sslSessCacheAvgSize;
  }

  public void setSslSessCacheAvgSize(Integer sslSessCacheAvgSize) {
    this.sslSessCacheAvgSize = sslSessCacheAvgSize;
  }

  public VirtualService ssoPolicy(SSOPolicy ssoPolicy) {
    this.ssoPolicy = ssoPolicy;
    return this;
  }

   /**
   * Get ssoPolicy
   * @return ssoPolicy
  **/
  @Schema(description = "")
  public SSOPolicy getSsoPolicy() {
    return ssoPolicy;
  }

  public void setSsoPolicy(SSOPolicy ssoPolicy) {
    this.ssoPolicy = ssoPolicy;
  }

  public VirtualService ssoPolicyRef(String ssoPolicyRef) {
    this.ssoPolicyRef = ssoPolicyRef;
    return this;
  }

   /**
   * The SSO Policy attached to the virtualservice. It is a reference to an object of type SSOPolicy. Field introduced in 18.2.3.
   * @return ssoPolicyRef
  **/
  @Schema(description = "The SSO Policy attached to the virtualservice. It is a reference to an object of type SSOPolicy. Field introduced in 18.2.3.")
  public String getSsoPolicyRef() {
    return ssoPolicyRef;
  }

  public void setSsoPolicyRef(String ssoPolicyRef) {
    this.ssoPolicyRef = ssoPolicyRef;
  }

  public VirtualService staticDnsRecords(List<DnsRecord> staticDnsRecords) {
    this.staticDnsRecords = staticDnsRecords;
    return this;
  }

  public VirtualService addStaticDnsRecordsItem(DnsRecord staticDnsRecordsItem) {
    if (this.staticDnsRecords == null) {
      this.staticDnsRecords = new ArrayList<DnsRecord>();
    }
    this.staticDnsRecords.add(staticDnsRecordsItem);
    return this;
  }

   /**
   * List of static DNS records applied to this Virtual Service. These are static entries and no health monitoring is performed against the IP addresses.
   * @return staticDnsRecords
  **/
  @Schema(description = "List of static DNS records applied to this Virtual Service. These are static entries and no health monitoring is performed against the IP addresses.")
  public List<DnsRecord> getStaticDnsRecords() {
    return staticDnsRecords;
  }

  public void setStaticDnsRecords(List<DnsRecord> staticDnsRecords) {
    this.staticDnsRecords = staticDnsRecords;
  }

  public VirtualService subnet(IpAddrPrefix subnet) {
    this.subnet = subnet;
    return this;
  }

   /**
   * Get subnet
   * @return subnet
  **/
  @Schema(description = "")
  public IpAddrPrefix getSubnet() {
    return subnet;
  }

  public void setSubnet(IpAddrPrefix subnet) {
    this.subnet = subnet;
  }

  public VirtualService subnetUuid(String subnetUuid) {
    this.subnetUuid = subnetUuid;
    return this;
  }

   /**
   * It represents subnet for the Virtual Service IP address allocation when auto_allocate_ip is True.It is only applicable in OpenStack or AWS cloud. This field is required if auto_allocate_ip is True. Field deprecated in 17.1.1.
   * @return subnetUuid
  **/
  @Schema(description = "It represents subnet for the Virtual Service IP address allocation when auto_allocate_ip is True.It is only applicable in OpenStack or AWS cloud. This field is required if auto_allocate_ip is True. Field deprecated in 17.1.1.")
  public String getSubnetUuid() {
    return subnetUuid;
  }

  public void setSubnetUuid(String subnetUuid) {
    this.subnetUuid = subnetUuid;
  }

  public VirtualService tenantRef(String tenantRef) {
    this.tenantRef = tenantRef;
    return this;
  }

   /**
   *  It is a reference to an object of type Tenant.
   * @return tenantRef
  **/
  @Schema(description = " It is a reference to an object of type Tenant.")
  public String getTenantRef() {
    return tenantRef;
  }

  public void setTenantRef(String tenantRef) {
    this.tenantRef = tenantRef;
  }

  public VirtualService testSeDatastoreLevel1Ref(String testSeDatastoreLevel1Ref) {
    this.testSeDatastoreLevel1Ref = testSeDatastoreLevel1Ref;
    return this;
  }

   /**
   * Used for testing SE Datastore Upgrade 2.0 functionality. It is a reference to an object of type TestSeDatastoreLevel1. Field introduced in 18.2.6.
   * @return testSeDatastoreLevel1Ref
  **/
  @Schema(description = "Used for testing SE Datastore Upgrade 2.0 functionality. It is a reference to an object of type TestSeDatastoreLevel1. Field introduced in 18.2.6.")
  public String getTestSeDatastoreLevel1Ref() {
    return testSeDatastoreLevel1Ref;
  }

  public void setTestSeDatastoreLevel1Ref(String testSeDatastoreLevel1Ref) {
    this.testSeDatastoreLevel1Ref = testSeDatastoreLevel1Ref;
  }

  public VirtualService topologyPolicies(List<DnsPolicies> topologyPolicies) {
    this.topologyPolicies = topologyPolicies;
    return this;
  }

  public VirtualService addTopologyPoliciesItem(DnsPolicies topologyPoliciesItem) {
    if (this.topologyPolicies == null) {
      this.topologyPolicies = new ArrayList<DnsPolicies>();
    }
    this.topologyPolicies.add(topologyPoliciesItem);
    return this;
  }

   /**
   * Topology Policies applied on the dns traffic of the Virtual Service based onGSLB Topology algorithm. Field introduced in 18.2.3.
   * @return topologyPolicies
  **/
  @Schema(description = "Topology Policies applied on the dns traffic of the Virtual Service based onGSLB Topology algorithm. Field introduced in 18.2.3.")
  public List<DnsPolicies> getTopologyPolicies() {
    return topologyPolicies;
  }

  public void setTopologyPolicies(List<DnsPolicies> topologyPolicies) {
    this.topologyPolicies = topologyPolicies;
  }

  public VirtualService trafficCloneProfileRef(String trafficCloneProfileRef) {
    this.trafficCloneProfileRef = trafficCloneProfileRef;
    return this;
  }

   /**
   * Server network or list of servers for cloning traffic. It is a reference to an object of type TrafficCloneProfile. Field introduced in 17.1.1.
   * @return trafficCloneProfileRef
  **/
  @Schema(description = "Server network or list of servers for cloning traffic. It is a reference to an object of type TrafficCloneProfile. Field introduced in 17.1.1.")
  public String getTrafficCloneProfileRef() {
    return trafficCloneProfileRef;
  }

  public void setTrafficCloneProfileRef(String trafficCloneProfileRef) {
    this.trafficCloneProfileRef = trafficCloneProfileRef;
  }

  public VirtualService trafficEnabled(Boolean trafficEnabled) {
    this.trafficEnabled = trafficEnabled;
    return this;
  }

   /**
   * Knob to enable the Virtual Service traffic on its assigned service engines. This setting is effective only when the enabled flag is set to True. Field introduced in 17.2.8.
   * @return trafficEnabled
  **/
  @Schema(description = "Knob to enable the Virtual Service traffic on its assigned service engines. This setting is effective only when the enabled flag is set to True. Field introduced in 17.2.8.")
  public Boolean isTrafficEnabled() {
    return trafficEnabled;
  }

  public void setTrafficEnabled(Boolean trafficEnabled) {
    this.trafficEnabled = trafficEnabled;
  }

  public VirtualService type(String type) {
    this.type = type;
    return this;
  }

   /**
   * Specify if this is a normal Virtual Service, or if it is the parent or child of an SNI-enabled virtual hosted Virtual Service. Enum options - VS_TYPE_NORMAL, VS_TYPE_VH_PARENT, VS_TYPE_VH_CHILD.
   * @return type
  **/
  @Schema(description = "Specify if this is a normal Virtual Service, or if it is the parent or child of an SNI-enabled virtual hosted Virtual Service. Enum options - VS_TYPE_NORMAL, VS_TYPE_VH_PARENT, VS_TYPE_VH_CHILD.")
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }

   /**
   * url
   * @return url
  **/
  @Schema(description = "url")
  public String getUrl() {
    return url;
  }

  public VirtualService useBridgeIpAsVip(Boolean useBridgeIpAsVip) {
    this.useBridgeIpAsVip = useBridgeIpAsVip;
    return this;
  }

   /**
   * Use Bridge IP as VIP on each Host in Mesos deployments.
   * @return useBridgeIpAsVip
  **/
  @Schema(description = "Use Bridge IP as VIP on each Host in Mesos deployments.")
  public Boolean isUseBridgeIpAsVip() {
    return useBridgeIpAsVip;
  }

  public void setUseBridgeIpAsVip(Boolean useBridgeIpAsVip) {
    this.useBridgeIpAsVip = useBridgeIpAsVip;
  }

  public VirtualService useVipAsSnat(Boolean useVipAsSnat) {
    this.useVipAsSnat = useVipAsSnat;
    return this;
  }

   /**
   * Use the Virtual IP as the SNAT IP for health monitoring and sending traffic to the backend servers instead of the Service Engine interface IP. The caveat of enabling this option is that the VirtualService cannot be configued in an Active-Active HA mode. DNS based Multi VIP solution has to be used for HA &amp; Non-disruptive Upgrade purposes. Field introduced in 17.1.9,17.2.3.
   * @return useVipAsSnat
  **/
  @Schema(description = "Use the Virtual IP as the SNAT IP for health monitoring and sending traffic to the backend servers instead of the Service Engine interface IP. The caveat of enabling this option is that the VirtualService cannot be configued in an Active-Active HA mode. DNS based Multi VIP solution has to be used for HA & Non-disruptive Upgrade purposes. Field introduced in 17.1.9,17.2.3.")
  public Boolean isUseVipAsSnat() {
    return useVipAsSnat;
  }

  public void setUseVipAsSnat(Boolean useVipAsSnat) {
    this.useVipAsSnat = useVipAsSnat;
  }

  public VirtualService uuid(String uuid) {
    this.uuid = uuid;
    return this;
  }

   /**
   * UUID of the VirtualService.
   * @return uuid
  **/
  @Schema(description = "UUID of the VirtualService.")
  public String getUuid() {
    return uuid;
  }

  public void setUuid(String uuid) {
    this.uuid = uuid;
  }

  public VirtualService vhDomainName(List<String> vhDomainName) {
    this.vhDomainName = vhDomainName;
    return this;
  }

  public VirtualService addVhDomainNameItem(String vhDomainNameItem) {
    if (this.vhDomainName == null) {
      this.vhDomainName = new ArrayList<String>();
    }
    this.vhDomainName.add(vhDomainNameItem);
    return this;
  }

   /**
   * The exact name requested from the client&#x27;s SNI-enabled TLS hello domain name field. If this is a match, the parent VS will forward the connection to this child VS.
   * @return vhDomainName
  **/
  @Schema(description = "The exact name requested from the client's SNI-enabled TLS hello domain name field. If this is a match, the parent VS will forward the connection to this child VS.")
  public List<String> getVhDomainName() {
    return vhDomainName;
  }

  public void setVhDomainName(List<String> vhDomainName) {
    this.vhDomainName = vhDomainName;
  }

  public VirtualService vhParentVsUuid(String vhParentVsUuid) {
    this.vhParentVsUuid = vhParentVsUuid;
    return this;
  }

   /**
   * Specifies the Virtual Service acting as Virtual Hosting (SNI) parent.
   * @return vhParentVsUuid
  **/
  @Schema(description = "Specifies the Virtual Service acting as Virtual Hosting (SNI) parent.")
  public String getVhParentVsUuid() {
    return vhParentVsUuid;
  }

  public void setVhParentVsUuid(String vhParentVsUuid) {
    this.vhParentVsUuid = vhParentVsUuid;
  }

  public VirtualService vip(List<Vip> vip) {
    this.vip = vip;
    return this;
  }

  public VirtualService addVipItem(Vip vipItem) {
    if (this.vip == null) {
      this.vip = new ArrayList<Vip>();
    }
    this.vip.add(vipItem);
    return this;
  }

   /**
   * List of Virtual Service IPs. While creating a &#x27;Shared VS&#x27;,please use vsvip_ref to point to the shared entities. Field introduced in 17.1.1.
   * @return vip
  **/
  @Schema(description = "List of Virtual Service IPs. While creating a 'Shared VS',please use vsvip_ref to point to the shared entities. Field introduced in 17.1.1.")
  public List<Vip> getVip() {
    return vip;
  }

  public void setVip(List<Vip> vip) {
    this.vip = vip;
  }

  public VirtualService vrfContextRef(String vrfContextRef) {
    this.vrfContextRef = vrfContextRef;
    return this;
  }

   /**
   * Virtual Routing Context that the Virtual Service is bound to. This is used to provide the isolation of the set of networks the application is attached to. It is a reference to an object of type VrfContext.
   * @return vrfContextRef
  **/
  @Schema(description = "Virtual Routing Context that the Virtual Service is bound to. This is used to provide the isolation of the set of networks the application is attached to. It is a reference to an object of type VrfContext.")
  public String getVrfContextRef() {
    return vrfContextRef;
  }

  public void setVrfContextRef(String vrfContextRef) {
    this.vrfContextRef = vrfContextRef;
  }

  public VirtualService vsDatascripts(List<VSDataScripts> vsDatascripts) {
    this.vsDatascripts = vsDatascripts;
    return this;
  }

  public VirtualService addVsDatascriptsItem(VSDataScripts vsDatascriptsItem) {
    if (this.vsDatascripts == null) {
      this.vsDatascripts = new ArrayList<VSDataScripts>();
    }
    this.vsDatascripts.add(vsDatascriptsItem);
    return this;
  }

   /**
   * Datascripts applied on the data traffic of the Virtual Service.
   * @return vsDatascripts
  **/
  @Schema(description = "Datascripts applied on the data traffic of the Virtual Service.")
  public List<VSDataScripts> getVsDatascripts() {
    return vsDatascripts;
  }

  public void setVsDatascripts(List<VSDataScripts> vsDatascripts) {
    this.vsDatascripts = vsDatascripts;
  }

  public VirtualService vsvipCloudConfigCksum(String vsvipCloudConfigCksum) {
    this.vsvipCloudConfigCksum = vsvipCloudConfigCksum;
    return this;
  }

   /**
   * Checksum of cloud configuration for VsVip. Internally set by cloud connector. Field introduced in 17.2.9, 18.1.2.
   * @return vsvipCloudConfigCksum
  **/
  @Schema(description = "Checksum of cloud configuration for VsVip. Internally set by cloud connector. Field introduced in 17.2.9, 18.1.2.")
  public String getVsvipCloudConfigCksum() {
    return vsvipCloudConfigCksum;
  }

  public void setVsvipCloudConfigCksum(String vsvipCloudConfigCksum) {
    this.vsvipCloudConfigCksum = vsvipCloudConfigCksum;
  }

  public VirtualService vsvipRef(String vsvipRef) {
    this.vsvipRef = vsvipRef;
    return this;
  }

   /**
   * Mostly used during the creation of Shared VS, this field refers to entities that can be shared across Virtual Services. It is a reference to an object of type VsVip. Field introduced in 17.1.1.
   * @return vsvipRef
  **/
  @Schema(description = "Mostly used during the creation of Shared VS, this field refers to entities that can be shared across Virtual Services. It is a reference to an object of type VsVip. Field introduced in 17.1.1.")
  public String getVsvipRef() {
    return vsvipRef;
  }

  public void setVsvipRef(String vsvipRef) {
    this.vsvipRef = vsvipRef;
  }

  public VirtualService wafPolicyRef(String wafPolicyRef) {
    this.wafPolicyRef = wafPolicyRef;
    return this;
  }

   /**
   * WAF policy for the Virtual Service. It is a reference to an object of type WafPolicy. Field introduced in 17.2.1.
   * @return wafPolicyRef
  **/
  @Schema(description = "WAF policy for the Virtual Service. It is a reference to an object of type WafPolicy. Field introduced in 17.2.1.")
  public String getWafPolicyRef() {
    return wafPolicyRef;
  }

  public void setWafPolicyRef(String wafPolicyRef) {
    this.wafPolicyRef = wafPolicyRef;
  }

  public VirtualService weight(Integer weight) {
    this.weight = weight;
    return this;
  }

   /**
   * The Quality of Service weight to assign to traffic transmitted from this Virtual Service.  A higher weight will prioritize traffic versus other Virtual Services sharing the same Service Engines. Allowed values are 1-128.
   * @return weight
  **/
  @Schema(description = "The Quality of Service weight to assign to traffic transmitted from this Virtual Service.  A higher weight will prioritize traffic versus other Virtual Services sharing the same Service Engines. Allowed values are 1-128.")
  public Integer getWeight() {
    return weight;
  }

  public void setWeight(Integer weight) {
    this.weight = weight;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VirtualService virtualService = (VirtualService) o;
    return Objects.equals(this._lastModified, virtualService._lastModified) &&
        Objects.equals(this.activeStandbySeTag, virtualService.activeStandbySeTag) &&
        Objects.equals(this.advertiseDownVs, virtualService.advertiseDownVs) &&
        Objects.equals(this.allowInvalidClientCert, virtualService.allowInvalidClientCert) &&
        Objects.equals(this.analyticsPolicy, virtualService.analyticsPolicy) &&
        Objects.equals(this.analyticsProfileRef, virtualService.analyticsProfileRef) &&
        Objects.equals(this.apicContractGraph, virtualService.apicContractGraph) &&
        Objects.equals(this.applicationProfileRef, virtualService.applicationProfileRef) &&
        Objects.equals(this.autoAllocateFloatingIp, virtualService.autoAllocateFloatingIp) &&
        Objects.equals(this.autoAllocateIp, virtualService.autoAllocateIp) &&
        Objects.equals(this.availabilityZone, virtualService.availabilityZone) &&
        Objects.equals(this.aviAllocatedFip, virtualService.aviAllocatedFip) &&
        Objects.equals(this.aviAllocatedVip, virtualService.aviAllocatedVip) &&
        Objects.equals(this.azureAvailabilitySet, virtualService.azureAvailabilitySet) &&
        Objects.equals(this.bulkSyncKvcache, virtualService.bulkSyncKvcache) &&
        Objects.equals(this.clientAuth, virtualService.clientAuth) &&
        Objects.equals(this.closeClientConnOnConfigUpdate, virtualService.closeClientConnOnConfigUpdate) &&
        Objects.equals(this.cloudConfigCksum, virtualService.cloudConfigCksum) &&
        Objects.equals(this.cloudRef, virtualService.cloudRef) &&
        Objects.equals(this.cloudType, virtualService.cloudType) &&
        Objects.equals(this.connectionsRateLimit, virtualService.connectionsRateLimit) &&
        Objects.equals(this.contentRewrite, virtualService.contentRewrite) &&
        Objects.equals(this.createdBy, virtualService.createdBy) &&
        Objects.equals(this.delayFairness, virtualService.delayFairness) &&
        Objects.equals(this.description, virtualService.description) &&
        Objects.equals(this.discoveredNetworkRef, virtualService.discoveredNetworkRef) &&
        Objects.equals(this.discoveredNetworks, virtualService.discoveredNetworks) &&
        Objects.equals(this.discoveredSubnet, virtualService.discoveredSubnet) &&
        Objects.equals(this.dnsInfo, virtualService.dnsInfo) &&
        Objects.equals(this.dnsPolicies, virtualService.dnsPolicies) &&
        Objects.equals(this.eastWestPlacement, virtualService.eastWestPlacement) &&
        Objects.equals(this.enableAutogw, virtualService.enableAutogw) &&
        Objects.equals(this.enableRhi, virtualService.enableRhi) &&
        Objects.equals(this.enableRhiSnat, virtualService.enableRhiSnat) &&
        Objects.equals(this.enabled, virtualService.enabled) &&
        Objects.equals(this.errorPageProfileRef, virtualService.errorPageProfileRef) &&
        Objects.equals(this.floatingIp, virtualService.floatingIp) &&
        Objects.equals(this.floatingSubnetUuid, virtualService.floatingSubnetUuid) &&
        Objects.equals(this.flowDist, virtualService.flowDist) &&
        Objects.equals(this.flowLabelType, virtualService.flowLabelType) &&
        Objects.equals(this.fqdn, virtualService.fqdn) &&
        Objects.equals(this.hostNameXlate, virtualService.hostNameXlate) &&
        Objects.equals(this.httpPolicies, virtualService.httpPolicies) &&
        Objects.equals(this.ignPoolNetReach, virtualService.ignPoolNetReach) &&
        Objects.equals(this.ipAddress, virtualService.ipAddress) &&
        Objects.equals(this.ipamNetworkSubnet, virtualService.ipamNetworkSubnet) &&
        Objects.equals(this.l4Policies, virtualService.l4Policies) &&
        Objects.equals(this.limitDoser, virtualService.limitDoser) &&
        Objects.equals(this.maxCpsPerClient, virtualService.maxCpsPerClient) &&
        Objects.equals(this.microserviceRef, virtualService.microserviceRef) &&
        Objects.equals(this.minPoolsUp, virtualService.minPoolsUp) &&
        Objects.equals(this.name, virtualService.name) &&
        Objects.equals(this.networkProfileRef, virtualService.networkProfileRef) &&
        Objects.equals(this.networkRef, virtualService.networkRef) &&
        Objects.equals(this.networkSecurityPolicyRef, virtualService.networkSecurityPolicyRef) &&
        Objects.equals(this.nsxSecuritygroup, virtualService.nsxSecuritygroup) &&
        Objects.equals(this.performanceLimits, virtualService.performanceLimits) &&
        Objects.equals(this.poolGroupRef, virtualService.poolGroupRef) &&
        Objects.equals(this.poolRef, virtualService.poolRef) &&
        Objects.equals(this.portUuid, virtualService.portUuid) &&
        Objects.equals(this.removeListeningPortOnVsDown, virtualService.removeListeningPortOnVsDown) &&
        Objects.equals(this.requestsRateLimit, virtualService.requestsRateLimit) &&
        Objects.equals(this.samlSpConfig, virtualService.samlSpConfig) &&
        Objects.equals(this.scaleoutEcmp, virtualService.scaleoutEcmp) &&
        Objects.equals(this.seGroupRef, virtualService.seGroupRef) &&
        Objects.equals(this.securityPolicyRef, virtualService.securityPolicyRef) &&
        Objects.equals(this.serverNetworkProfileRef, virtualService.serverNetworkProfileRef) &&
        Objects.equals(this.serviceMetadata, virtualService.serviceMetadata) &&
        Objects.equals(this.servicePoolSelect, virtualService.servicePoolSelect) &&
        Objects.equals(this.services, virtualService.services) &&
        Objects.equals(this.sidebandProfile, virtualService.sidebandProfile) &&
        Objects.equals(this.snatIp, virtualService.snatIp) &&
        Objects.equals(this.spPoolRefs, virtualService.spPoolRefs) &&
        Objects.equals(this.sslKeyAndCertificateRefs, virtualService.sslKeyAndCertificateRefs) &&
        Objects.equals(this.sslProfileRef, virtualService.sslProfileRef) &&
        Objects.equals(this.sslProfileSelectors, virtualService.sslProfileSelectors) &&
        Objects.equals(this.sslSessCacheAvgSize, virtualService.sslSessCacheAvgSize) &&
        Objects.equals(this.ssoPolicy, virtualService.ssoPolicy) &&
        Objects.equals(this.ssoPolicyRef, virtualService.ssoPolicyRef) &&
        Objects.equals(this.staticDnsRecords, virtualService.staticDnsRecords) &&
        Objects.equals(this.subnet, virtualService.subnet) &&
        Objects.equals(this.subnetUuid, virtualService.subnetUuid) &&
        Objects.equals(this.tenantRef, virtualService.tenantRef) &&
        Objects.equals(this.testSeDatastoreLevel1Ref, virtualService.testSeDatastoreLevel1Ref) &&
        Objects.equals(this.topologyPolicies, virtualService.topologyPolicies) &&
        Objects.equals(this.trafficCloneProfileRef, virtualService.trafficCloneProfileRef) &&
        Objects.equals(this.trafficEnabled, virtualService.trafficEnabled) &&
        Objects.equals(this.type, virtualService.type) &&
        Objects.equals(this.url, virtualService.url) &&
        Objects.equals(this.useBridgeIpAsVip, virtualService.useBridgeIpAsVip) &&
        Objects.equals(this.useVipAsSnat, virtualService.useVipAsSnat) &&
        Objects.equals(this.uuid, virtualService.uuid) &&
        Objects.equals(this.vhDomainName, virtualService.vhDomainName) &&
        Objects.equals(this.vhParentVsUuid, virtualService.vhParentVsUuid) &&
        Objects.equals(this.vip, virtualService.vip) &&
        Objects.equals(this.vrfContextRef, virtualService.vrfContextRef) &&
        Objects.equals(this.vsDatascripts, virtualService.vsDatascripts) &&
        Objects.equals(this.vsvipCloudConfigCksum, virtualService.vsvipCloudConfigCksum) &&
        Objects.equals(this.vsvipRef, virtualService.vsvipRef) &&
        Objects.equals(this.wafPolicyRef, virtualService.wafPolicyRef) &&
        Objects.equals(this.weight, virtualService.weight);
  }

  @Override
  public int hashCode() {
    return Objects.hash(_lastModified, activeStandbySeTag, advertiseDownVs, allowInvalidClientCert, analyticsPolicy, analyticsProfileRef, apicContractGraph, applicationProfileRef, autoAllocateFloatingIp, autoAllocateIp, availabilityZone, aviAllocatedFip, aviAllocatedVip, azureAvailabilitySet, bulkSyncKvcache, clientAuth, closeClientConnOnConfigUpdate, cloudConfigCksum, cloudRef, cloudType, connectionsRateLimit, contentRewrite, createdBy, delayFairness, description, discoveredNetworkRef, discoveredNetworks, discoveredSubnet, dnsInfo, dnsPolicies, eastWestPlacement, enableAutogw, enableRhi, enableRhiSnat, enabled, errorPageProfileRef, floatingIp, floatingSubnetUuid, flowDist, flowLabelType, fqdn, hostNameXlate, httpPolicies, ignPoolNetReach, ipAddress, ipamNetworkSubnet, l4Policies, limitDoser, maxCpsPerClient, microserviceRef, minPoolsUp, name, networkProfileRef, networkRef, networkSecurityPolicyRef, nsxSecuritygroup, performanceLimits, poolGroupRef, poolRef, portUuid, removeListeningPortOnVsDown, requestsRateLimit, samlSpConfig, scaleoutEcmp, seGroupRef, securityPolicyRef, serverNetworkProfileRef, serviceMetadata, servicePoolSelect, services, sidebandProfile, snatIp, spPoolRefs, sslKeyAndCertificateRefs, sslProfileRef, sslProfileSelectors, sslSessCacheAvgSize, ssoPolicy, ssoPolicyRef, staticDnsRecords, subnet, subnetUuid, tenantRef, testSeDatastoreLevel1Ref, topologyPolicies, trafficCloneProfileRef, trafficEnabled, type, url, useBridgeIpAsVip, useVipAsSnat, uuid, vhDomainName, vhParentVsUuid, vip, vrfContextRef, vsDatascripts, vsvipCloudConfigCksum, vsvipRef, wafPolicyRef, weight);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VirtualService {\n");
    
    sb.append("    _lastModified: ").append(toIndentedString(_lastModified)).append("\n");
    sb.append("    activeStandbySeTag: ").append(toIndentedString(activeStandbySeTag)).append("\n");
    sb.append("    advertiseDownVs: ").append(toIndentedString(advertiseDownVs)).append("\n");
    sb.append("    allowInvalidClientCert: ").append(toIndentedString(allowInvalidClientCert)).append("\n");
    sb.append("    analyticsPolicy: ").append(toIndentedString(analyticsPolicy)).append("\n");
    sb.append("    analyticsProfileRef: ").append(toIndentedString(analyticsProfileRef)).append("\n");
    sb.append("    apicContractGraph: ").append(toIndentedString(apicContractGraph)).append("\n");
    sb.append("    applicationProfileRef: ").append(toIndentedString(applicationProfileRef)).append("\n");
    sb.append("    autoAllocateFloatingIp: ").append(toIndentedString(autoAllocateFloatingIp)).append("\n");
    sb.append("    autoAllocateIp: ").append(toIndentedString(autoAllocateIp)).append("\n");
    sb.append("    availabilityZone: ").append(toIndentedString(availabilityZone)).append("\n");
    sb.append("    aviAllocatedFip: ").append(toIndentedString(aviAllocatedFip)).append("\n");
    sb.append("    aviAllocatedVip: ").append(toIndentedString(aviAllocatedVip)).append("\n");
    sb.append("    azureAvailabilitySet: ").append(toIndentedString(azureAvailabilitySet)).append("\n");
    sb.append("    bulkSyncKvcache: ").append(toIndentedString(bulkSyncKvcache)).append("\n");
    sb.append("    clientAuth: ").append(toIndentedString(clientAuth)).append("\n");
    sb.append("    closeClientConnOnConfigUpdate: ").append(toIndentedString(closeClientConnOnConfigUpdate)).append("\n");
    sb.append("    cloudConfigCksum: ").append(toIndentedString(cloudConfigCksum)).append("\n");
    sb.append("    cloudRef: ").append(toIndentedString(cloudRef)).append("\n");
    sb.append("    cloudType: ").append(toIndentedString(cloudType)).append("\n");
    sb.append("    connectionsRateLimit: ").append(toIndentedString(connectionsRateLimit)).append("\n");
    sb.append("    contentRewrite: ").append(toIndentedString(contentRewrite)).append("\n");
    sb.append("    createdBy: ").append(toIndentedString(createdBy)).append("\n");
    sb.append("    delayFairness: ").append(toIndentedString(delayFairness)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    discoveredNetworkRef: ").append(toIndentedString(discoveredNetworkRef)).append("\n");
    sb.append("    discoveredNetworks: ").append(toIndentedString(discoveredNetworks)).append("\n");
    sb.append("    discoveredSubnet: ").append(toIndentedString(discoveredSubnet)).append("\n");
    sb.append("    dnsInfo: ").append(toIndentedString(dnsInfo)).append("\n");
    sb.append("    dnsPolicies: ").append(toIndentedString(dnsPolicies)).append("\n");
    sb.append("    eastWestPlacement: ").append(toIndentedString(eastWestPlacement)).append("\n");
    sb.append("    enableAutogw: ").append(toIndentedString(enableAutogw)).append("\n");
    sb.append("    enableRhi: ").append(toIndentedString(enableRhi)).append("\n");
    sb.append("    enableRhiSnat: ").append(toIndentedString(enableRhiSnat)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    errorPageProfileRef: ").append(toIndentedString(errorPageProfileRef)).append("\n");
    sb.append("    floatingIp: ").append(toIndentedString(floatingIp)).append("\n");
    sb.append("    floatingSubnetUuid: ").append(toIndentedString(floatingSubnetUuid)).append("\n");
    sb.append("    flowDist: ").append(toIndentedString(flowDist)).append("\n");
    sb.append("    flowLabelType: ").append(toIndentedString(flowLabelType)).append("\n");
    sb.append("    fqdn: ").append(toIndentedString(fqdn)).append("\n");
    sb.append("    hostNameXlate: ").append(toIndentedString(hostNameXlate)).append("\n");
    sb.append("    httpPolicies: ").append(toIndentedString(httpPolicies)).append("\n");
    sb.append("    ignPoolNetReach: ").append(toIndentedString(ignPoolNetReach)).append("\n");
    sb.append("    ipAddress: ").append(toIndentedString(ipAddress)).append("\n");
    sb.append("    ipamNetworkSubnet: ").append(toIndentedString(ipamNetworkSubnet)).append("\n");
    sb.append("    l4Policies: ").append(toIndentedString(l4Policies)).append("\n");
    sb.append("    limitDoser: ").append(toIndentedString(limitDoser)).append("\n");
    sb.append("    maxCpsPerClient: ").append(toIndentedString(maxCpsPerClient)).append("\n");
    sb.append("    microserviceRef: ").append(toIndentedString(microserviceRef)).append("\n");
    sb.append("    minPoolsUp: ").append(toIndentedString(minPoolsUp)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    networkProfileRef: ").append(toIndentedString(networkProfileRef)).append("\n");
    sb.append("    networkRef: ").append(toIndentedString(networkRef)).append("\n");
    sb.append("    networkSecurityPolicyRef: ").append(toIndentedString(networkSecurityPolicyRef)).append("\n");
    sb.append("    nsxSecuritygroup: ").append(toIndentedString(nsxSecuritygroup)).append("\n");
    sb.append("    performanceLimits: ").append(toIndentedString(performanceLimits)).append("\n");
    sb.append("    poolGroupRef: ").append(toIndentedString(poolGroupRef)).append("\n");
    sb.append("    poolRef: ").append(toIndentedString(poolRef)).append("\n");
    sb.append("    portUuid: ").append(toIndentedString(portUuid)).append("\n");
    sb.append("    removeListeningPortOnVsDown: ").append(toIndentedString(removeListeningPortOnVsDown)).append("\n");
    sb.append("    requestsRateLimit: ").append(toIndentedString(requestsRateLimit)).append("\n");
    sb.append("    samlSpConfig: ").append(toIndentedString(samlSpConfig)).append("\n");
    sb.append("    scaleoutEcmp: ").append(toIndentedString(scaleoutEcmp)).append("\n");
    sb.append("    seGroupRef: ").append(toIndentedString(seGroupRef)).append("\n");
    sb.append("    securityPolicyRef: ").append(toIndentedString(securityPolicyRef)).append("\n");
    sb.append("    serverNetworkProfileRef: ").append(toIndentedString(serverNetworkProfileRef)).append("\n");
    sb.append("    serviceMetadata: ").append(toIndentedString(serviceMetadata)).append("\n");
    sb.append("    servicePoolSelect: ").append(toIndentedString(servicePoolSelect)).append("\n");
    sb.append("    services: ").append(toIndentedString(services)).append("\n");
    sb.append("    sidebandProfile: ").append(toIndentedString(sidebandProfile)).append("\n");
    sb.append("    snatIp: ").append(toIndentedString(snatIp)).append("\n");
    sb.append("    spPoolRefs: ").append(toIndentedString(spPoolRefs)).append("\n");
    sb.append("    sslKeyAndCertificateRefs: ").append(toIndentedString(sslKeyAndCertificateRefs)).append("\n");
    sb.append("    sslProfileRef: ").append(toIndentedString(sslProfileRef)).append("\n");
    sb.append("    sslProfileSelectors: ").append(toIndentedString(sslProfileSelectors)).append("\n");
    sb.append("    sslSessCacheAvgSize: ").append(toIndentedString(sslSessCacheAvgSize)).append("\n");
    sb.append("    ssoPolicy: ").append(toIndentedString(ssoPolicy)).append("\n");
    sb.append("    ssoPolicyRef: ").append(toIndentedString(ssoPolicyRef)).append("\n");
    sb.append("    staticDnsRecords: ").append(toIndentedString(staticDnsRecords)).append("\n");
    sb.append("    subnet: ").append(toIndentedString(subnet)).append("\n");
    sb.append("    subnetUuid: ").append(toIndentedString(subnetUuid)).append("\n");
    sb.append("    tenantRef: ").append(toIndentedString(tenantRef)).append("\n");
    sb.append("    testSeDatastoreLevel1Ref: ").append(toIndentedString(testSeDatastoreLevel1Ref)).append("\n");
    sb.append("    topologyPolicies: ").append(toIndentedString(topologyPolicies)).append("\n");
    sb.append("    trafficCloneProfileRef: ").append(toIndentedString(trafficCloneProfileRef)).append("\n");
    sb.append("    trafficEnabled: ").append(toIndentedString(trafficEnabled)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    useBridgeIpAsVip: ").append(toIndentedString(useBridgeIpAsVip)).append("\n");
    sb.append("    useVipAsSnat: ").append(toIndentedString(useVipAsSnat)).append("\n");
    sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
    sb.append("    vhDomainName: ").append(toIndentedString(vhDomainName)).append("\n");
    sb.append("    vhParentVsUuid: ").append(toIndentedString(vhParentVsUuid)).append("\n");
    sb.append("    vip: ").append(toIndentedString(vip)).append("\n");
    sb.append("    vrfContextRef: ").append(toIndentedString(vrfContextRef)).append("\n");
    sb.append("    vsDatascripts: ").append(toIndentedString(vsDatascripts)).append("\n");
    sb.append("    vsvipCloudConfigCksum: ").append(toIndentedString(vsvipCloudConfigCksum)).append("\n");
    sb.append("    vsvipRef: ").append(toIndentedString(vsvipRef)).append("\n");
    sb.append("    wafPolicyRef: ").append(toIndentedString(wafPolicyRef)).append("\n");
    sb.append("    weight: ").append(toIndentedString(weight)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
