/*
 * Avi avi_global_spec Object API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 20.1.1
 * Contact: support@avinetworks.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.vmware.avi.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.vmware.avi.sdk.model.IpAddr;
import io.swagger.v3.oas.annotations.media.Schema;
/**
 * OshiftDockerRegistryMetaData
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-03-12T12:27:26.755+05:30[Asia/Kolkata]")
public class OshiftDockerRegistryMetaData {
  @JsonProperty("registry_namespace")
  private String registryNamespace = "default";

  @JsonProperty("registry_service")
  private String registryService = "docker-registry";

  @JsonProperty("registry_vip")
  private IpAddr registryVip = null;

  public OshiftDockerRegistryMetaData registryNamespace(String registryNamespace) {
    this.registryNamespace = registryNamespace;
    return this;
  }

   /**
   * Namespace for the ServiceEngine image to be hosted in Openshift Integrated registry.
   * @return registryNamespace
  **/
  @Schema(description = "Namespace for the ServiceEngine image to be hosted in Openshift Integrated registry.")
  public String getRegistryNamespace() {
    return registryNamespace;
  }

  public void setRegistryNamespace(String registryNamespace) {
    this.registryNamespace = registryNamespace;
  }

  public OshiftDockerRegistryMetaData registryService(String registryService) {
    this.registryService = registryService;
    return this;
  }

   /**
   * Name of the Integrated registry Service in Openshift.
   * @return registryService
  **/
  @Schema(description = "Name of the Integrated registry Service in Openshift.")
  public String getRegistryService() {
    return registryService;
  }

  public void setRegistryService(String registryService) {
    this.registryService = registryService;
  }

  public OshiftDockerRegistryMetaData registryVip(IpAddr registryVip) {
    this.registryVip = registryVip;
    return this;
  }

   /**
   * Get registryVip
   * @return registryVip
  **/
  @Schema(description = "")
  public IpAddr getRegistryVip() {
    return registryVip;
  }

  public void setRegistryVip(IpAddr registryVip) {
    this.registryVip = registryVip;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OshiftDockerRegistryMetaData oshiftDockerRegistryMetaData = (OshiftDockerRegistryMetaData) o;
    return Objects.equals(this.registryNamespace, oshiftDockerRegistryMetaData.registryNamespace) &&
        Objects.equals(this.registryService, oshiftDockerRegistryMetaData.registryService) &&
        Objects.equals(this.registryVip, oshiftDockerRegistryMetaData.registryVip);
  }

  @Override
  public int hashCode() {
    return Objects.hash(registryNamespace, registryService, registryVip);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OshiftDockerRegistryMetaData {\n");
    
    sb.append("    registryNamespace: ").append(toIndentedString(registryNamespace)).append("\n");
    sb.append("    registryService: ").append(toIndentedString(registryService)).append("\n");
    sb.append("    registryVip: ").append(toIndentedString(registryVip)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
