/*
 * Avi avi_global_spec Object API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 20.1.1
 * Contact: support@avinetworks.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.vmware.avi.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.vmware.avi.sdk.model.IpAddr;
import com.vmware.avi.sdk.model.IpAddrPrefix;
import io.swagger.v3.oas.annotations.media.Schema;
/**
 * RouteInfo
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-03-12T12:27:26.755+05:30[Asia/Kolkata]")
public class RouteInfo {
  @JsonProperty("if_name")
  private String ifName = null;

  @JsonProperty("network_namespace")
  private String networkNamespace = "HOST_NAMESPACE";

  @JsonProperty("nexthop")
  private IpAddr nexthop = null;

  @JsonProperty("subnet")
  private IpAddrPrefix subnet = null;

  public RouteInfo ifName(String ifName) {
    this.ifName = ifName;
    return this;
  }

   /**
   * Host interface name. Field introduced in 18.2.6.
   * @return ifName
  **/
  @Schema(description = "Host interface name. Field introduced in 18.2.6.")
  public String getIfName() {
    return ifName;
  }

  public void setIfName(String ifName) {
    this.ifName = ifName;
  }

  public RouteInfo networkNamespace(String networkNamespace) {
    this.networkNamespace = networkNamespace;
    return this;
  }

   /**
   * Network Namespace type used to add an route entry in a specific namespace. Enum options - LOCAL_NAMESPACE, HOST_NAMESPACE, OTHER_NAMESPACE. Field introduced in 18.2.6.
   * @return networkNamespace
  **/
  @Schema(description = "Network Namespace type used to add an route entry in a specific namespace. Enum options - LOCAL_NAMESPACE, HOST_NAMESPACE, OTHER_NAMESPACE. Field introduced in 18.2.6.")
  public String getNetworkNamespace() {
    return networkNamespace;
  }

  public void setNetworkNamespace(String networkNamespace) {
    this.networkNamespace = networkNamespace;
  }

  public RouteInfo nexthop(IpAddr nexthop) {
    this.nexthop = nexthop;
    return this;
  }

   /**
   * Get nexthop
   * @return nexthop
  **/
  @Schema(description = "")
  public IpAddr getNexthop() {
    return nexthop;
  }

  public void setNexthop(IpAddr nexthop) {
    this.nexthop = nexthop;
  }

  public RouteInfo subnet(IpAddrPrefix subnet) {
    this.subnet = subnet;
    return this;
  }

   /**
   * Get subnet
   * @return subnet
  **/
  @Schema(required = true, description = "")
  public IpAddrPrefix getSubnet() {
    return subnet;
  }

  public void setSubnet(IpAddrPrefix subnet) {
    this.subnet = subnet;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RouteInfo routeInfo = (RouteInfo) o;
    return Objects.equals(this.ifName, routeInfo.ifName) &&
        Objects.equals(this.networkNamespace, routeInfo.networkNamespace) &&
        Objects.equals(this.nexthop, routeInfo.nexthop) &&
        Objects.equals(this.subnet, routeInfo.subnet);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ifName, networkNamespace, nexthop, subnet);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RouteInfo {\n");
    
    sb.append("    ifName: ").append(toIndentedString(ifName)).append("\n");
    sb.append("    networkNamespace: ").append(toIndentedString(networkNamespace)).append("\n");
    sb.append("    nexthop: ").append(toIndentedString(nexthop)).append("\n");
    sb.append("    subnet: ").append(toIndentedString(subnet)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
