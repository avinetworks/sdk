/*
 * Avi avi_global_spec Object API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 20.1.1
 * Contact: support@avinetworks.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.vmware.avi.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.vmware.avi.sdk.model.DiscoveredNetwork;
import com.vmware.avi.sdk.model.IPNetworkSubnet;
import com.vmware.avi.sdk.model.IpAddr;
import com.vmware.avi.sdk.model.IpAddrPrefix;
import com.vmware.avi.sdk.model.VipPlacementNetwork;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;
/**
 * Vip
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-03-12T12:27:26.755+05:30[Asia/Kolkata]")
public class Vip {
  @JsonProperty("auto_allocate_floating_ip")
  private Boolean autoAllocateFloatingIp = null;

  @JsonProperty("auto_allocate_ip")
  private Boolean autoAllocateIp = null;

  @JsonProperty("auto_allocate_ip_type")
  private String autoAllocateIpType = "V4_ONLY";

  @JsonProperty("availability_zone")
  private String availabilityZone = null;

  @JsonProperty("avi_allocated_fip")
  private Boolean aviAllocatedFip = null;

  @JsonProperty("avi_allocated_vip")
  private Boolean aviAllocatedVip = null;

  @JsonProperty("discovered_networks")
  private List<DiscoveredNetwork> discoveredNetworks = null;

  @JsonProperty("enabled")
  private Boolean enabled = true;

  @JsonProperty("floating_ip")
  private IpAddr floatingIp = null;

  @JsonProperty("floating_ip6")
  private IpAddr floatingIp6 = null;

  @JsonProperty("floating_subnet6_uuid")
  private String floatingSubnet6Uuid = null;

  @JsonProperty("floating_subnet_uuid")
  private String floatingSubnetUuid = null;

  @JsonProperty("ip6_address")
  private IpAddr ip6Address = null;

  @JsonProperty("ip_address")
  private IpAddr ipAddress = null;

  @JsonProperty("ipam_network_subnet")
  private IPNetworkSubnet ipamNetworkSubnet = null;

  @JsonProperty("network_ref")
  private String networkRef = null;

  @JsonProperty("placement_networks")
  private List<VipPlacementNetwork> placementNetworks = null;

  @JsonProperty("port_uuid")
  private String portUuid = null;

  @JsonProperty("subnet")
  private IpAddrPrefix subnet = null;

  @JsonProperty("subnet6")
  private IpAddrPrefix subnet6 = null;

  @JsonProperty("subnet6_uuid")
  private String subnet6Uuid = null;

  @JsonProperty("subnet_uuid")
  private String subnetUuid = null;

  @JsonProperty("vip_id")
  private String vipId = null;

  public Vip autoAllocateFloatingIp(Boolean autoAllocateFloatingIp) {
    this.autoAllocateFloatingIp = autoAllocateFloatingIp;
    return this;
  }

   /**
   * Auto-allocate floating/elastic IP from the Cloud infrastructure. Field introduced in 17.1.1.
   * @return autoAllocateFloatingIp
  **/
  @Schema(description = "Auto-allocate floating/elastic IP from the Cloud infrastructure. Field introduced in 17.1.1.")
  public Boolean isAutoAllocateFloatingIp() {
    return autoAllocateFloatingIp;
  }

  public void setAutoAllocateFloatingIp(Boolean autoAllocateFloatingIp) {
    this.autoAllocateFloatingIp = autoAllocateFloatingIp;
  }

  public Vip autoAllocateIp(Boolean autoAllocateIp) {
    this.autoAllocateIp = autoAllocateIp;
    return this;
  }

   /**
   * Auto-allocate VIP from the provided subnet. Field introduced in 17.1.1.
   * @return autoAllocateIp
  **/
  @Schema(description = "Auto-allocate VIP from the provided subnet. Field introduced in 17.1.1.")
  public Boolean isAutoAllocateIp() {
    return autoAllocateIp;
  }

  public void setAutoAllocateIp(Boolean autoAllocateIp) {
    this.autoAllocateIp = autoAllocateIp;
  }

  public Vip autoAllocateIpType(String autoAllocateIpType) {
    this.autoAllocateIpType = autoAllocateIpType;
    return this;
  }

   /**
   * Specifies whether to auto-allocate only a V4 address, only a V6 address, or one of each type. Enum options - V4_ONLY, V6_ONLY, V4_V6. Field introduced in 18.1.1.
   * @return autoAllocateIpType
  **/
  @Schema(description = "Specifies whether to auto-allocate only a V4 address, only a V6 address, or one of each type. Enum options - V4_ONLY, V6_ONLY, V4_V6. Field introduced in 18.1.1.")
  public String getAutoAllocateIpType() {
    return autoAllocateIpType;
  }

  public void setAutoAllocateIpType(String autoAllocateIpType) {
    this.autoAllocateIpType = autoAllocateIpType;
  }

  public Vip availabilityZone(String availabilityZone) {
    this.availabilityZone = availabilityZone;
    return this;
  }

   /**
   * Availability-zone to place the Virtual Service. Field introduced in 17.1.1.
   * @return availabilityZone
  **/
  @Schema(description = "Availability-zone to place the Virtual Service. Field introduced in 17.1.1.")
  public String getAvailabilityZone() {
    return availabilityZone;
  }

  public void setAvailabilityZone(String availabilityZone) {
    this.availabilityZone = availabilityZone;
  }

  public Vip aviAllocatedFip(Boolean aviAllocatedFip) {
    this.aviAllocatedFip = aviAllocatedFip;
    return this;
  }

   /**
   * (internal-use) FIP allocated by Avi in the Cloud infrastructure. Field introduced in 17.1.1.
   * @return aviAllocatedFip
  **/
  @Schema(description = "(internal-use) FIP allocated by Avi in the Cloud infrastructure. Field introduced in 17.1.1.")
  public Boolean isAviAllocatedFip() {
    return aviAllocatedFip;
  }

  public void setAviAllocatedFip(Boolean aviAllocatedFip) {
    this.aviAllocatedFip = aviAllocatedFip;
  }

  public Vip aviAllocatedVip(Boolean aviAllocatedVip) {
    this.aviAllocatedVip = aviAllocatedVip;
    return this;
  }

   /**
   * (internal-use) VIP allocated by Avi in the Cloud infrastructure. Field introduced in 17.1.1.
   * @return aviAllocatedVip
  **/
  @Schema(description = "(internal-use) VIP allocated by Avi in the Cloud infrastructure. Field introduced in 17.1.1.")
  public Boolean isAviAllocatedVip() {
    return aviAllocatedVip;
  }

  public void setAviAllocatedVip(Boolean aviAllocatedVip) {
    this.aviAllocatedVip = aviAllocatedVip;
  }

  public Vip discoveredNetworks(List<DiscoveredNetwork> discoveredNetworks) {
    this.discoveredNetworks = discoveredNetworks;
    return this;
  }

  public Vip addDiscoveredNetworksItem(DiscoveredNetwork discoveredNetworksItem) {
    if (this.discoveredNetworks == null) {
      this.discoveredNetworks = new ArrayList<DiscoveredNetwork>();
    }
    this.discoveredNetworks.add(discoveredNetworksItem);
    return this;
  }

   /**
   * Discovered networks providing reachability for client facing Vip IP. Field introduced in 17.1.1.
   * @return discoveredNetworks
  **/
  @Schema(description = "Discovered networks providing reachability for client facing Vip IP. Field introduced in 17.1.1.")
  public List<DiscoveredNetwork> getDiscoveredNetworks() {
    return discoveredNetworks;
  }

  public void setDiscoveredNetworks(List<DiscoveredNetwork> discoveredNetworks) {
    this.discoveredNetworks = discoveredNetworks;
  }

  public Vip enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

   /**
   * Enable or disable the Vip. Field introduced in 17.1.1.
   * @return enabled
  **/
  @Schema(description = "Enable or disable the Vip. Field introduced in 17.1.1.")
  public Boolean isEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }

  public Vip floatingIp(IpAddr floatingIp) {
    this.floatingIp = floatingIp;
    return this;
  }

   /**
   * Get floatingIp
   * @return floatingIp
  **/
  @Schema(description = "")
  public IpAddr getFloatingIp() {
    return floatingIp;
  }

  public void setFloatingIp(IpAddr floatingIp) {
    this.floatingIp = floatingIp;
  }

  public Vip floatingIp6(IpAddr floatingIp6) {
    this.floatingIp6 = floatingIp6;
    return this;
  }

   /**
   * Get floatingIp6
   * @return floatingIp6
  **/
  @Schema(description = "")
  public IpAddr getFloatingIp6() {
    return floatingIp6;
  }

  public void setFloatingIp6(IpAddr floatingIp6) {
    this.floatingIp6 = floatingIp6;
  }

  public Vip floatingSubnet6Uuid(String floatingSubnet6Uuid) {
    this.floatingSubnet6Uuid = floatingSubnet6Uuid;
    return this;
  }

   /**
   * If auto_allocate_floating_ip is True and more than one floating-ip subnets exist, then the subnet for the floating IPv6 address allocation. Field introduced in 18.1.1.
   * @return floatingSubnet6Uuid
  **/
  @Schema(description = "If auto_allocate_floating_ip is True and more than one floating-ip subnets exist, then the subnet for the floating IPv6 address allocation. Field introduced in 18.1.1.")
  public String getFloatingSubnet6Uuid() {
    return floatingSubnet6Uuid;
  }

  public void setFloatingSubnet6Uuid(String floatingSubnet6Uuid) {
    this.floatingSubnet6Uuid = floatingSubnet6Uuid;
  }

  public Vip floatingSubnetUuid(String floatingSubnetUuid) {
    this.floatingSubnetUuid = floatingSubnetUuid;
    return this;
  }

   /**
   * If auto_allocate_floating_ip is True and more than one floating-ip subnets exist, then the subnet for the floating IP address allocation. Field introduced in 17.1.1.
   * @return floatingSubnetUuid
  **/
  @Schema(description = "If auto_allocate_floating_ip is True and more than one floating-ip subnets exist, then the subnet for the floating IP address allocation. Field introduced in 17.1.1.")
  public String getFloatingSubnetUuid() {
    return floatingSubnetUuid;
  }

  public void setFloatingSubnetUuid(String floatingSubnetUuid) {
    this.floatingSubnetUuid = floatingSubnetUuid;
  }

  public Vip ip6Address(IpAddr ip6Address) {
    this.ip6Address = ip6Address;
    return this;
  }

   /**
   * Get ip6Address
   * @return ip6Address
  **/
  @Schema(description = "")
  public IpAddr getIp6Address() {
    return ip6Address;
  }

  public void setIp6Address(IpAddr ip6Address) {
    this.ip6Address = ip6Address;
  }

  public Vip ipAddress(IpAddr ipAddress) {
    this.ipAddress = ipAddress;
    return this;
  }

   /**
   * Get ipAddress
   * @return ipAddress
  **/
  @Schema(description = "")
  public IpAddr getIpAddress() {
    return ipAddress;
  }

  public void setIpAddress(IpAddr ipAddress) {
    this.ipAddress = ipAddress;
  }

  public Vip ipamNetworkSubnet(IPNetworkSubnet ipamNetworkSubnet) {
    this.ipamNetworkSubnet = ipamNetworkSubnet;
    return this;
  }

   /**
   * Get ipamNetworkSubnet
   * @return ipamNetworkSubnet
  **/
  @Schema(description = "")
  public IPNetworkSubnet getIpamNetworkSubnet() {
    return ipamNetworkSubnet;
  }

  public void setIpamNetworkSubnet(IPNetworkSubnet ipamNetworkSubnet) {
    this.ipamNetworkSubnet = ipamNetworkSubnet;
  }

  public Vip networkRef(String networkRef) {
    this.networkRef = networkRef;
    return this;
  }

   /**
   * Manually override the network on which the Vip is placed. It is a reference to an object of type Network. Field introduced in 17.1.1.
   * @return networkRef
  **/
  @Schema(description = "Manually override the network on which the Vip is placed. It is a reference to an object of type Network. Field introduced in 17.1.1.")
  public String getNetworkRef() {
    return networkRef;
  }

  public void setNetworkRef(String networkRef) {
    this.networkRef = networkRef;
  }

  public Vip placementNetworks(List<VipPlacementNetwork> placementNetworks) {
    this.placementNetworks = placementNetworks;
    return this;
  }

  public Vip addPlacementNetworksItem(VipPlacementNetwork placementNetworksItem) {
    if (this.placementNetworks == null) {
      this.placementNetworks = new ArrayList<VipPlacementNetwork>();
    }
    this.placementNetworks.add(placementNetworksItem);
    return this;
  }

   /**
   * Placement networks/subnets to use for vip placement. Field introduced in 18.2.5.
   * @return placementNetworks
  **/
  @Schema(description = "Placement networks/subnets to use for vip placement. Field introduced in 18.2.5.")
  public List<VipPlacementNetwork> getPlacementNetworks() {
    return placementNetworks;
  }

  public void setPlacementNetworks(List<VipPlacementNetwork> placementNetworks) {
    this.placementNetworks = placementNetworks;
  }

  public Vip portUuid(String portUuid) {
    this.portUuid = portUuid;
    return this;
  }

   /**
   * (internal-use) Network port assigned to the Vip IP address. Field introduced in 17.1.1.
   * @return portUuid
  **/
  @Schema(description = "(internal-use) Network port assigned to the Vip IP address. Field introduced in 17.1.1.")
  public String getPortUuid() {
    return portUuid;
  }

  public void setPortUuid(String portUuid) {
    this.portUuid = portUuid;
  }

  public Vip subnet(IpAddrPrefix subnet) {
    this.subnet = subnet;
    return this;
  }

   /**
   * Get subnet
   * @return subnet
  **/
  @Schema(description = "")
  public IpAddrPrefix getSubnet() {
    return subnet;
  }

  public void setSubnet(IpAddrPrefix subnet) {
    this.subnet = subnet;
  }

  public Vip subnet6(IpAddrPrefix subnet6) {
    this.subnet6 = subnet6;
    return this;
  }

   /**
   * Get subnet6
   * @return subnet6
  **/
  @Schema(description = "")
  public IpAddrPrefix getSubnet6() {
    return subnet6;
  }

  public void setSubnet6(IpAddrPrefix subnet6) {
    this.subnet6 = subnet6;
  }

  public Vip subnet6Uuid(String subnet6Uuid) {
    this.subnet6Uuid = subnet6Uuid;
    return this;
  }

   /**
   * If auto_allocate_ip is True, then the subnet for the Vip IPv6 address allocation. This field is applicable only if the VirtualService belongs to an Openstack or AWS cloud, in which case it is mandatory, if auto_allocate is selected. Field introduced in 18.1.1.
   * @return subnet6Uuid
  **/
  @Schema(description = "If auto_allocate_ip is True, then the subnet for the Vip IPv6 address allocation. This field is applicable only if the VirtualService belongs to an Openstack or AWS cloud, in which case it is mandatory, if auto_allocate is selected. Field introduced in 18.1.1.")
  public String getSubnet6Uuid() {
    return subnet6Uuid;
  }

  public void setSubnet6Uuid(String subnet6Uuid) {
    this.subnet6Uuid = subnet6Uuid;
  }

  public Vip subnetUuid(String subnetUuid) {
    this.subnetUuid = subnetUuid;
    return this;
  }

   /**
   * If auto_allocate_ip is True, then the subnet for the Vip IP address allocation. This field is applicable only if the VirtualService belongs to an Openstack or AWS cloud, in which case it is mandatory, if auto_allocate is selected. Field introduced in 17.1.1.
   * @return subnetUuid
  **/
  @Schema(description = "If auto_allocate_ip is True, then the subnet for the Vip IP address allocation. This field is applicable only if the VirtualService belongs to an Openstack or AWS cloud, in which case it is mandatory, if auto_allocate is selected. Field introduced in 17.1.1.")
  public String getSubnetUuid() {
    return subnetUuid;
  }

  public void setSubnetUuid(String subnetUuid) {
    this.subnetUuid = subnetUuid;
  }

  public Vip vipId(String vipId) {
    this.vipId = vipId;
    return this;
  }

   /**
   * Unique ID associated with the vip. Field introduced in 17.1.1.
   * @return vipId
  **/
  @Schema(required = true, description = "Unique ID associated with the vip. Field introduced in 17.1.1.")
  public String getVipId() {
    return vipId;
  }

  public void setVipId(String vipId) {
    this.vipId = vipId;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Vip vip = (Vip) o;
    return Objects.equals(this.autoAllocateFloatingIp, vip.autoAllocateFloatingIp) &&
        Objects.equals(this.autoAllocateIp, vip.autoAllocateIp) &&
        Objects.equals(this.autoAllocateIpType, vip.autoAllocateIpType) &&
        Objects.equals(this.availabilityZone, vip.availabilityZone) &&
        Objects.equals(this.aviAllocatedFip, vip.aviAllocatedFip) &&
        Objects.equals(this.aviAllocatedVip, vip.aviAllocatedVip) &&
        Objects.equals(this.discoveredNetworks, vip.discoveredNetworks) &&
        Objects.equals(this.enabled, vip.enabled) &&
        Objects.equals(this.floatingIp, vip.floatingIp) &&
        Objects.equals(this.floatingIp6, vip.floatingIp6) &&
        Objects.equals(this.floatingSubnet6Uuid, vip.floatingSubnet6Uuid) &&
        Objects.equals(this.floatingSubnetUuid, vip.floatingSubnetUuid) &&
        Objects.equals(this.ip6Address, vip.ip6Address) &&
        Objects.equals(this.ipAddress, vip.ipAddress) &&
        Objects.equals(this.ipamNetworkSubnet, vip.ipamNetworkSubnet) &&
        Objects.equals(this.networkRef, vip.networkRef) &&
        Objects.equals(this.placementNetworks, vip.placementNetworks) &&
        Objects.equals(this.portUuid, vip.portUuid) &&
        Objects.equals(this.subnet, vip.subnet) &&
        Objects.equals(this.subnet6, vip.subnet6) &&
        Objects.equals(this.subnet6Uuid, vip.subnet6Uuid) &&
        Objects.equals(this.subnetUuid, vip.subnetUuid) &&
        Objects.equals(this.vipId, vip.vipId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(autoAllocateFloatingIp, autoAllocateIp, autoAllocateIpType, availabilityZone, aviAllocatedFip, aviAllocatedVip, discoveredNetworks, enabled, floatingIp, floatingIp6, floatingSubnet6Uuid, floatingSubnetUuid, ip6Address, ipAddress, ipamNetworkSubnet, networkRef, placementNetworks, portUuid, subnet, subnet6, subnet6Uuid, subnetUuid, vipId);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Vip {\n");
    
    sb.append("    autoAllocateFloatingIp: ").append(toIndentedString(autoAllocateFloatingIp)).append("\n");
    sb.append("    autoAllocateIp: ").append(toIndentedString(autoAllocateIp)).append("\n");
    sb.append("    autoAllocateIpType: ").append(toIndentedString(autoAllocateIpType)).append("\n");
    sb.append("    availabilityZone: ").append(toIndentedString(availabilityZone)).append("\n");
    sb.append("    aviAllocatedFip: ").append(toIndentedString(aviAllocatedFip)).append("\n");
    sb.append("    aviAllocatedVip: ").append(toIndentedString(aviAllocatedVip)).append("\n");
    sb.append("    discoveredNetworks: ").append(toIndentedString(discoveredNetworks)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    floatingIp: ").append(toIndentedString(floatingIp)).append("\n");
    sb.append("    floatingIp6: ").append(toIndentedString(floatingIp6)).append("\n");
    sb.append("    floatingSubnet6Uuid: ").append(toIndentedString(floatingSubnet6Uuid)).append("\n");
    sb.append("    floatingSubnetUuid: ").append(toIndentedString(floatingSubnetUuid)).append("\n");
    sb.append("    ip6Address: ").append(toIndentedString(ip6Address)).append("\n");
    sb.append("    ipAddress: ").append(toIndentedString(ipAddress)).append("\n");
    sb.append("    ipamNetworkSubnet: ").append(toIndentedString(ipamNetworkSubnet)).append("\n");
    sb.append("    networkRef: ").append(toIndentedString(networkRef)).append("\n");
    sb.append("    placementNetworks: ").append(toIndentedString(placementNetworks)).append("\n");
    sb.append("    portUuid: ").append(toIndentedString(portUuid)).append("\n");
    sb.append("    subnet: ").append(toIndentedString(subnet)).append("\n");
    sb.append("    subnet6: ").append(toIndentedString(subnet6)).append("\n");
    sb.append("    subnet6Uuid: ").append(toIndentedString(subnet6Uuid)).append("\n");
    sb.append("    subnetUuid: ").append(toIndentedString(subnetUuid)).append("\n");
    sb.append("    vipId: ").append(toIndentedString(vipId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
