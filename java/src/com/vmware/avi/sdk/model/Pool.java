/*
 * Avi avi_global_spec Object API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 20.1.1
 * Contact: support@avinetworks.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.vmware.avi.sdk.model;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.WritableTypeId.Inclusion;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;

import io.swagger.v3.oas.annotations.media.Schema;
/**
 * Pool
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-03-12T12:27:26.755+05:30[Asia/Kolkata]")
@JsonInclude(JsonInclude.Include.NON_NULL)
public class Pool extends AviRestResource{
  @JsonProperty("_last_modified")
  private String _lastModified = null;

  @JsonProperty("a_pool")
  private String aPool = null;

  @JsonProperty("ab_pool")
  private AbPool abPool = null;

  @JsonProperty("ab_priority")
  private Integer abPriority = null;

  @JsonProperty("analytics_policy")
  private PoolAnalyticsPolicy analyticsPolicy = null;

  @JsonProperty("analytics_profile_ref")
  private String analyticsProfileRef = null;

  @JsonProperty("apic_epg_name")
  private String apicEpgName = null;

  @JsonProperty("application_persistence_profile_ref")
  private String applicationPersistenceProfileRef = null;

  @JsonProperty("autoscale_launch_config_ref")
  private String autoscaleLaunchConfigRef = null;

  @JsonProperty("autoscale_networks")
  private List<String> autoscaleNetworks = null;

  @JsonProperty("autoscale_policy_ref")
  private String autoscalePolicyRef = null;

  @JsonProperty("capacity_estimation")
  private Boolean capacityEstimation = null;

  @JsonProperty("capacity_estimation_ttfb_thresh")
  private Integer capacityEstimationTtfbThresh = null;

  @JsonProperty("cloud_config_cksum")
  private String cloudConfigCksum = null;

  @JsonProperty("cloud_ref")
  private String cloudRef = null;

  @JsonProperty("conn_pool_properties")
  private ConnPoolProperties connPoolProperties = null;

  @JsonProperty("connection_ramp_duration")
  private Integer connectionRampDuration = 10;

  @JsonProperty("created_by")
  private String createdBy = null;

  @JsonProperty("default_server_port")
  private Integer defaultServerPort = 80;

  @JsonProperty("delete_server_on_dns_refresh")
  private Boolean deleteServerOnDnsRefresh = true;

  @JsonProperty("description")
  private String description = null;

  @JsonProperty("domain_name")
  private List<String> domainName = null;

  @JsonProperty("east_west")
  private Boolean eastWest = null;

  @JsonProperty("enable_http2")
  private Boolean enableHttp2 = null;

  @JsonProperty("enabled")
  private Boolean enabled = true;

  @JsonProperty("external_autoscale_groups")
  private List<String> externalAutoscaleGroups = null;

  @JsonProperty("fail_action")
  private FailAction failAction = null;

  @JsonProperty("fewest_tasks_feedback_delay")
  private Integer fewestTasksFeedbackDelay = 10;

  @JsonProperty("graceful_disable_timeout")
  private Integer gracefulDisableTimeout = 1;

  @JsonProperty("gslb_sp_enabled")
  private Boolean gslbSpEnabled = null;

  @JsonProperty("health_monitor_refs")
  private List<String> healthMonitorRefs = null;

  @JsonProperty("host_check_enabled")
  private Boolean hostCheckEnabled = null;

  @JsonProperty("ignore_server_port")
  private Boolean ignoreServerPort = null;

  @JsonProperty("inline_health_monitor")
  private Boolean inlineHealthMonitor = true;

  @JsonProperty("ipaddrgroup_ref")
  private String ipaddrgroupRef = null;

  @JsonProperty("lb_algorithm")
  private String lbAlgorithm = "LB_ALGORITHM_LEAST_CONNECTIONS";

  @JsonProperty("lb_algorithm_consistent_hash_hdr")
  private String lbAlgorithmConsistentHashHdr = null;

  @JsonProperty("lb_algorithm_core_nonaffinity")
  private Integer lbAlgorithmCoreNonaffinity = 2;

  @JsonProperty("lb_algorithm_hash")
  private String lbAlgorithmHash = "LB_ALGORITHM_CONSISTENT_HASH_SOURCE_IP_ADDRESS";

  @JsonProperty("lookup_server_by_name")
  private Boolean lookupServerByName = null;

  @JsonProperty("max_concurrent_connections_per_server")
  private Integer maxConcurrentConnectionsPerServer = null;

  @JsonProperty("max_conn_rate_per_server")
  private RateProfile maxConnRatePerServer = null;

  @JsonProperty("min_health_monitors_up")
  private Integer minHealthMonitorsUp = null;

  @JsonProperty("min_servers_up")
  private Integer minServersUp = null;

  @JsonProperty("name")
  private String name = null;

  @JsonProperty("networks")
  private List<NetworkFilter> networks = null;

  @JsonProperty("nsx_securitygroup")
  private List<String> nsxSecuritygroup = null;

  @JsonProperty("pki_profile_ref")
  private String pkiProfileRef = null;

  @JsonProperty("placement_networks")
  private List<PlacementNetwork> placementNetworks = null;

  @JsonProperty("prst_hdr_name")
  private String prstHdrName = null;

  @JsonProperty("request_queue_depth")
  private Integer requestQueueDepth = 128;

  @JsonProperty("request_queue_enabled")
  private Boolean requestQueueEnabled = null;

  @JsonProperty("rewrite_host_header_to_server_name")
  private Boolean rewriteHostHeaderToServerName = null;

  @JsonProperty("rewrite_host_header_to_sni")
  private Boolean rewriteHostHeaderToSni = null;

  @JsonProperty("server_auto_scale")
  private Boolean serverAutoScale = null;

  @JsonProperty("server_count")
  private Integer serverCount = null;

  @JsonProperty("server_name")
  private String serverName = null;

  @JsonProperty("server_reselect")
  private HTTPServerReselect serverReselect = null;

  @JsonProperty("server_timeout")
  private Integer serverTimeout = null;

  @JsonProperty("servers")
  private List<Server> servers = null;

  @JsonProperty("service_metadata")
  private String serviceMetadata = null;

  @JsonProperty("sni_enabled")
  private Boolean sniEnabled = true;

  @JsonProperty("ssl_key_and_certificate_ref")
  private String sslKeyAndCertificateRef = null;

  @JsonProperty("ssl_profile_ref")
  private String sslProfileRef = null;

  @JsonProperty("tenant_ref")
  private String tenantRef = null;

  @JsonProperty("url")
  private String url = null;

  @JsonProperty("use_service_port")
  private Boolean useServicePort = null;

  @JsonProperty("uuid")
  private String uuid = null;

  @JsonProperty("vrf_ref")
  private String vrfRef = null;

   /**
   * UNIX time since epoch in microseconds. Units(MICROSECONDS).
   * @return _lastModified
  **/
  @Schema(description = "UNIX time since epoch in microseconds. Units(MICROSECONDS).")
  public String getLastModified() {
    return _lastModified;
  }

  public Pool aPool(String aPool) {
    this.aPool = aPool;
    return this;
  }

   /**
   * Name of container cloud application that constitutes A pool in a A-B pool configuration, if different from VS app. Field deprecated in 18.1.2.
   * @return aPool
  **/
  @Schema(description = "Name of container cloud application that constitutes A pool in a A-B pool configuration, if different from VS app. Field deprecated in 18.1.2.")
  public String getAPool() {
    return aPool;
  }

  public void setAPool(String aPool) {
    this.aPool = aPool;
  }

  public Pool abPool(AbPool abPool) {
    this.abPool = abPool;
    return this;
  }

   /**
   * Get abPool
   * @return abPool
  **/
  @Schema(description = "")
  public AbPool getAbPool() {
    return abPool;
  }

  public void setAbPool(AbPool abPool) {
    this.abPool = abPool;
  }

  public Pool abPriority(Integer abPriority) {
    this.abPriority = abPriority;
    return this;
  }

   /**
   * Priority of this pool in a A-B pool pair. Internally used. Field deprecated in 18.1.2.
   * @return abPriority
  **/
  @Schema(description = "Priority of this pool in a A-B pool pair. Internally used. Field deprecated in 18.1.2.")
  public Integer getAbPriority() {
    return abPriority;
  }

  public void setAbPriority(Integer abPriority) {
    this.abPriority = abPriority;
  }

  public Pool analyticsPolicy(PoolAnalyticsPolicy analyticsPolicy) {
    this.analyticsPolicy = analyticsPolicy;
    return this;
  }

   /**
   * Get analyticsPolicy
   * @return analyticsPolicy
  **/
  @Schema(description = "")
  public PoolAnalyticsPolicy getAnalyticsPolicy() {
    return analyticsPolicy;
  }

  public void setAnalyticsPolicy(PoolAnalyticsPolicy analyticsPolicy) {
    this.analyticsPolicy = analyticsPolicy;
  }

  public Pool analyticsProfileRef(String analyticsProfileRef) {
    this.analyticsProfileRef = analyticsProfileRef;
    return this;
  }

   /**
   * Specifies settings related to analytics. It is a reference to an object of type AnalyticsProfile. Field introduced in 18.1.4,18.2.1.
   * @return analyticsProfileRef
  **/
  @Schema(description = "Specifies settings related to analytics. It is a reference to an object of type AnalyticsProfile. Field introduced in 18.1.4,18.2.1.")
  public String getAnalyticsProfileRef() {
    return analyticsProfileRef;
  }

  public void setAnalyticsProfileRef(String analyticsProfileRef) {
    this.analyticsProfileRef = analyticsProfileRef;
  }

  public Pool apicEpgName(String apicEpgName) {
    this.apicEpgName = apicEpgName;
    return this;
  }

   /**
   * Synchronize Cisco APIC EPG members with pool servers.
   * @return apicEpgName
  **/
  @Schema(description = "Synchronize Cisco APIC EPG members with pool servers.")
  public String getApicEpgName() {
    return apicEpgName;
  }

  public void setApicEpgName(String apicEpgName) {
    this.apicEpgName = apicEpgName;
  }

  public Pool applicationPersistenceProfileRef(String applicationPersistenceProfileRef) {
    this.applicationPersistenceProfileRef = applicationPersistenceProfileRef;
    return this;
  }

   /**
   * Persistence will ensure the same user sticks to the same server for a desired duration of time. It is a reference to an object of type ApplicationPersistenceProfile.
   * @return applicationPersistenceProfileRef
  **/
  @Schema(description = "Persistence will ensure the same user sticks to the same server for a desired duration of time. It is a reference to an object of type ApplicationPersistenceProfile.")
  public String getApplicationPersistenceProfileRef() {
    return applicationPersistenceProfileRef;
  }

  public void setApplicationPersistenceProfileRef(String applicationPersistenceProfileRef) {
    this.applicationPersistenceProfileRef = applicationPersistenceProfileRef;
  }

  public Pool autoscaleLaunchConfigRef(String autoscaleLaunchConfigRef) {
    this.autoscaleLaunchConfigRef = autoscaleLaunchConfigRef;
    return this;
  }

   /**
   * If configured then Avi will trigger orchestration of pool server creation and deletion. It is only supported for container clouds like Mesos, Opensift, Kubernates, Docker etc. It is a reference to an object of type AutoScaleLaunchConfig.
   * @return autoscaleLaunchConfigRef
  **/
  @Schema(description = "If configured then Avi will trigger orchestration of pool server creation and deletion. It is only supported for container clouds like Mesos, Opensift, Kubernates, Docker etc. It is a reference to an object of type AutoScaleLaunchConfig.")
  public String getAutoscaleLaunchConfigRef() {
    return autoscaleLaunchConfigRef;
  }

  public void setAutoscaleLaunchConfigRef(String autoscaleLaunchConfigRef) {
    this.autoscaleLaunchConfigRef = autoscaleLaunchConfigRef;
  }

  public Pool autoscaleNetworks(List<String> autoscaleNetworks) {
    this.autoscaleNetworks = autoscaleNetworks;
    return this;
  }

  public Pool addAutoscaleNetworksItem(String autoscaleNetworksItem) {
    if (this.autoscaleNetworks == null) {
      this.autoscaleNetworks = new ArrayList<String>();
    }
    this.autoscaleNetworks.add(autoscaleNetworksItem);
    return this;
  }

   /**
   * Network Ids for the launch configuration.
   * @return autoscaleNetworks
  **/
  @Schema(description = "Network Ids for the launch configuration.")
  public List<String> getAutoscaleNetworks() {
    return autoscaleNetworks;
  }

  public void setAutoscaleNetworks(List<String> autoscaleNetworks) {
    this.autoscaleNetworks = autoscaleNetworks;
  }

  public Pool autoscalePolicyRef(String autoscalePolicyRef) {
    this.autoscalePolicyRef = autoscalePolicyRef;
    return this;
  }

   /**
   * Reference to Server Autoscale Policy. It is a reference to an object of type ServerAutoScalePolicy.
   * @return autoscalePolicyRef
  **/
  @Schema(description = "Reference to Server Autoscale Policy. It is a reference to an object of type ServerAutoScalePolicy.")
  public String getAutoscalePolicyRef() {
    return autoscalePolicyRef;
  }

  public void setAutoscalePolicyRef(String autoscalePolicyRef) {
    this.autoscalePolicyRef = autoscalePolicyRef;
  }

  public Pool capacityEstimation(Boolean capacityEstimation) {
    this.capacityEstimation = capacityEstimation;
    return this;
  }

   /**
   * Inline estimation of capacity of servers.
   * @return capacityEstimation
  **/
  @Schema(description = "Inline estimation of capacity of servers.")
  public Boolean isCapacityEstimation() {
    return capacityEstimation;
  }

  public void setCapacityEstimation(Boolean capacityEstimation) {
    this.capacityEstimation = capacityEstimation;
  }

  public Pool capacityEstimationTtfbThresh(Integer capacityEstimationTtfbThresh) {
    this.capacityEstimationTtfbThresh = capacityEstimationTtfbThresh;
    return this;
  }

   /**
   * The maximum time-to-first-byte of a server. Allowed values are 1-5000. Special values are 0 - &#x27;Automatic&#x27;.
   * @return capacityEstimationTtfbThresh
  **/
  @Schema(description = "The maximum time-to-first-byte of a server. Allowed values are 1-5000. Special values are 0 - 'Automatic'.")
  public Integer getCapacityEstimationTtfbThresh() {
    return capacityEstimationTtfbThresh;
  }

  public void setCapacityEstimationTtfbThresh(Integer capacityEstimationTtfbThresh) {
    this.capacityEstimationTtfbThresh = capacityEstimationTtfbThresh;
  }

  public Pool cloudConfigCksum(String cloudConfigCksum) {
    this.cloudConfigCksum = cloudConfigCksum;
    return this;
  }

   /**
   * Checksum of cloud configuration for Pool. Internally set by cloud connector.
   * @return cloudConfigCksum
  **/
  @Schema(description = "Checksum of cloud configuration for Pool. Internally set by cloud connector.")
  public String getCloudConfigCksum() {
    return cloudConfigCksum;
  }

  public void setCloudConfigCksum(String cloudConfigCksum) {
    this.cloudConfigCksum = cloudConfigCksum;
  }

  public Pool cloudRef(String cloudRef) {
    this.cloudRef = cloudRef;
    return this;
  }

   /**
   *  It is a reference to an object of type Cloud.
   * @return cloudRef
  **/
  @Schema(description = " It is a reference to an object of type Cloud.")
  public String getCloudRef() {
    return cloudRef;
  }

  public void setCloudRef(String cloudRef) {
    this.cloudRef = cloudRef;
  }

  public Pool connPoolProperties(ConnPoolProperties connPoolProperties) {
    this.connPoolProperties = connPoolProperties;
    return this;
  }

   /**
   * Get connPoolProperties
   * @return connPoolProperties
  **/
  @Schema(description = "")
  public ConnPoolProperties getConnPoolProperties() {
    return connPoolProperties;
  }

  public void setConnPoolProperties(ConnPoolProperties connPoolProperties) {
    this.connPoolProperties = connPoolProperties;
  }

  public Pool connectionRampDuration(Integer connectionRampDuration) {
    this.connectionRampDuration = connectionRampDuration;
    return this;
  }

   /**
   * Duration for which new connections will be gradually ramped up to a server recently brought online.  Useful for LB algorithms that are least connection based. Allowed values are 1-300. Special values are 0 - &#x27;Immediate&#x27;.
   * @return connectionRampDuration
  **/
  @Schema(description = "Duration for which new connections will be gradually ramped up to a server recently brought online.  Useful for LB algorithms that are least connection based. Allowed values are 1-300. Special values are 0 - 'Immediate'.")
  public Integer getConnectionRampDuration() {
    return connectionRampDuration;
  }

  public void setConnectionRampDuration(Integer connectionRampDuration) {
    this.connectionRampDuration = connectionRampDuration;
  }

  public Pool createdBy(String createdBy) {
    this.createdBy = createdBy;
    return this;
  }

   /**
   * Creator name.
   * @return createdBy
  **/
  @Schema(description = "Creator name.")
  public String getCreatedBy() {
    return createdBy;
  }

  public void setCreatedBy(String createdBy) {
    this.createdBy = createdBy;
  }

  public Pool defaultServerPort(Integer defaultServerPort) {
    this.defaultServerPort = defaultServerPort;
    return this;
  }

   /**
   * Traffic sent to servers will use this destination server port unless overridden by the server&#x27;s specific port attribute. The SSL checkbox enables Avi to server encryption. Allowed values are 1-65535.
   * @return defaultServerPort
  **/
  @Schema(description = "Traffic sent to servers will use this destination server port unless overridden by the server's specific port attribute. The SSL checkbox enables Avi to server encryption. Allowed values are 1-65535.")
  public Integer getDefaultServerPort() {
    return defaultServerPort;
  }

  public void setDefaultServerPort(Integer defaultServerPort) {
    this.defaultServerPort = defaultServerPort;
  }

  public Pool deleteServerOnDnsRefresh(Boolean deleteServerOnDnsRefresh) {
    this.deleteServerOnDnsRefresh = deleteServerOnDnsRefresh;
    return this;
  }

   /**
   * Indicates whether existing IPs are disabled(false) or deleted(true) on dns hostname refreshDetail -- On a dns refresh, some IPs set on pool may no longer be returned by the resolver. These IPs are deleted from the pool when this knob is set to true. They are disabled, if the knob is set to false. Field introduced in 18.2.3.
   * @return deleteServerOnDnsRefresh
  **/
  @Schema(description = "Indicates whether existing IPs are disabled(false) or deleted(true) on dns hostname refreshDetail -- On a dns refresh, some IPs set on pool may no longer be returned by the resolver. These IPs are deleted from the pool when this knob is set to true. They are disabled, if the knob is set to false. Field introduced in 18.2.3.")
  public Boolean isDeleteServerOnDnsRefresh() {
    return deleteServerOnDnsRefresh;
  }

  public void setDeleteServerOnDnsRefresh(Boolean deleteServerOnDnsRefresh) {
    this.deleteServerOnDnsRefresh = deleteServerOnDnsRefresh;
  }

  public Pool description(String description) {
    this.description = description;
    return this;
  }

   /**
   * A description of the pool.
   * @return description
  **/
  @Schema(description = "A description of the pool.")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public Pool domainName(List<String> domainName) {
    this.domainName = domainName;
    return this;
  }

  public Pool addDomainNameItem(String domainNameItem) {
    if (this.domainName == null) {
      this.domainName = new ArrayList<String>();
    }
    this.domainName.add(domainNameItem);
    return this;
  }

   /**
   * Comma separated list of domain names which will be used to verify the common names or subject alternative names presented by server certificates. It is performed only when common name check host_check_enabled is enabled.
   * @return domainName
  **/
  @Schema(description = "Comma separated list of domain names which will be used to verify the common names or subject alternative names presented by server certificates. It is performed only when common name check host_check_enabled is enabled.")
  public List<String> getDomainName() {
    return domainName;
  }

  public void setDomainName(List<String> domainName) {
    this.domainName = domainName;
  }

  public Pool eastWest(Boolean eastWest) {
    this.eastWest = eastWest;
    return this;
  }

   /**
   * Inherited config from VirtualService.
   * @return eastWest
  **/
  @Schema(description = "Inherited config from VirtualService.")
  public Boolean isEastWest() {
    return eastWest;
  }

  public void setEastWest(Boolean eastWest) {
    this.eastWest = eastWest;
  }

  public Pool enableHttp2(Boolean enableHttp2) {
    this.enableHttp2 = enableHttp2;
    return this;
  }

   /**
   * Enable HTTP/2 for traffic from VirtualService to all backend servers in this pool. Field introduced in 20.1.1.
   * @return enableHttp2
  **/
  @Schema(description = "Enable HTTP/2 for traffic from VirtualService to all backend servers in this pool. Field introduced in 20.1.1.")
  public Boolean isEnableHttp2() {
    return enableHttp2;
  }

  public void setEnableHttp2(Boolean enableHttp2) {
    this.enableHttp2 = enableHttp2;
  }

  public Pool enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

   /**
   * Enable or disable the pool.  Disabling will terminate all open connections and pause health monitors.
   * @return enabled
  **/
  @Schema(description = "Enable or disable the pool.  Disabling will terminate all open connections and pause health monitors.")
  public Boolean isEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }

  public Pool externalAutoscaleGroups(List<String> externalAutoscaleGroups) {
    this.externalAutoscaleGroups = externalAutoscaleGroups;
    return this;
  }

  public Pool addExternalAutoscaleGroupsItem(String externalAutoscaleGroupsItem) {
    if (this.externalAutoscaleGroups == null) {
      this.externalAutoscaleGroups = new ArrayList<String>();
    }
    this.externalAutoscaleGroups.add(externalAutoscaleGroupsItem);
    return this;
  }

   /**
   * Names of external auto-scale groups for pool servers. Currently available only for AWS and Azure. Field introduced in 17.1.2.
   * @return externalAutoscaleGroups
  **/
  @Schema(description = "Names of external auto-scale groups for pool servers. Currently available only for AWS and Azure. Field introduced in 17.1.2.")
  public List<String> getExternalAutoscaleGroups() {
    return externalAutoscaleGroups;
  }

  public void setExternalAutoscaleGroups(List<String> externalAutoscaleGroups) {
    this.externalAutoscaleGroups = externalAutoscaleGroups;
  }

  public Pool failAction(FailAction failAction) {
    this.failAction = failAction;
    return this;
  }

   /**
   * Get failAction
   * @return failAction
  **/
  @Schema(description = "")
  public FailAction getFailAction() {
    return failAction;
  }

  public void setFailAction(FailAction failAction) {
    this.failAction = failAction;
  }

  public Pool fewestTasksFeedbackDelay(Integer fewestTasksFeedbackDelay) {
    this.fewestTasksFeedbackDelay = fewestTasksFeedbackDelay;
    return this;
  }

   /**
   * Periodicity of feedback for fewest tasks server selection algorithm. Allowed values are 1-300.
   * @return fewestTasksFeedbackDelay
  **/
  @Schema(description = "Periodicity of feedback for fewest tasks server selection algorithm. Allowed values are 1-300.")
  public Integer getFewestTasksFeedbackDelay() {
    return fewestTasksFeedbackDelay;
  }

  public void setFewestTasksFeedbackDelay(Integer fewestTasksFeedbackDelay) {
    this.fewestTasksFeedbackDelay = fewestTasksFeedbackDelay;
  }

  public Pool gracefulDisableTimeout(Integer gracefulDisableTimeout) {
    this.gracefulDisableTimeout = gracefulDisableTimeout;
    return this;
  }

   /**
   * Used to gracefully disable a server. Virtual service waits for the specified time before terminating the existing connections  to the servers that are disabled. Allowed values are 1-7200. Special values are 0 - &#x27;Immediate&#x27;, -1 - &#x27;Infinite&#x27;.
   * @return gracefulDisableTimeout
  **/
  @Schema(description = "Used to gracefully disable a server. Virtual service waits for the specified time before terminating the existing connections  to the servers that are disabled. Allowed values are 1-7200. Special values are 0 - 'Immediate', -1 - 'Infinite'.")
  public Integer getGracefulDisableTimeout() {
    return gracefulDisableTimeout;
  }

  public void setGracefulDisableTimeout(Integer gracefulDisableTimeout) {
    this.gracefulDisableTimeout = gracefulDisableTimeout;
  }

   /**
   * Indicates if the pool is a site-persistence pool. . Field introduced in 17.2.1.
   * @return gslbSpEnabled
  **/
  @Schema(description = "Indicates if the pool is a site-persistence pool. . Field introduced in 17.2.1.")
  public Boolean isGslbSpEnabled() {
    return gslbSpEnabled;
  }

  public Pool healthMonitorRefs(List<String> healthMonitorRefs) {
    this.healthMonitorRefs = healthMonitorRefs;
    return this;
  }

  public Pool addHealthMonitorRefsItem(String healthMonitorRefsItem) {
    if (this.healthMonitorRefs == null) {
      this.healthMonitorRefs = new ArrayList<String>();
    }
    this.healthMonitorRefs.add(healthMonitorRefsItem);
    return this;
  }

   /**
   * Verify server health by applying one or more health monitors.  Active monitors generate synthetic traffic from each Service Engine and mark a server up or down based on the response. The Passive monitor listens only to client to server communication. It raises or lowers the ratio of traffic destined to a server based on successful responses. It is a reference to an object of type HealthMonitor.
   * @return healthMonitorRefs
  **/
  @Schema(description = "Verify server health by applying one or more health monitors.  Active monitors generate synthetic traffic from each Service Engine and mark a server up or down based on the response. The Passive monitor listens only to client to server communication. It raises or lowers the ratio of traffic destined to a server based on successful responses. It is a reference to an object of type HealthMonitor.")
  public List<String> getHealthMonitorRefs() {
    return healthMonitorRefs;
  }

  public void setHealthMonitorRefs(List<String> healthMonitorRefs) {
    this.healthMonitorRefs = healthMonitorRefs;
  }

  public Pool hostCheckEnabled(Boolean hostCheckEnabled) {
    this.hostCheckEnabled = hostCheckEnabled;
    return this;
  }

   /**
   * Enable common name check for server certificate. If enabled and no explicit domain name is specified, Avi will use the incoming host header to do the match.
   * @return hostCheckEnabled
  **/
  @Schema(description = "Enable common name check for server certificate. If enabled and no explicit domain name is specified, Avi will use the incoming host header to do the match.")
  public Boolean isHostCheckEnabled() {
    return hostCheckEnabled;
  }

  public void setHostCheckEnabled(Boolean hostCheckEnabled) {
    this.hostCheckEnabled = hostCheckEnabled;
  }

  public Pool ignoreServerPort(Boolean ignoreServerPort) {
    this.ignoreServerPort = ignoreServerPort;
    return this;
  }

   /**
   * Ignore the server port in building the load balancing state.Applicable only for consistent hash load balancing algorithm or Disable Port translation (use_service_port) use cases. Field introduced in 20.1.1.
   * @return ignoreServerPort
  **/
  @Schema(description = "Ignore the server port in building the load balancing state.Applicable only for consistent hash load balancing algorithm or Disable Port translation (use_service_port) use cases. Field introduced in 20.1.1.")
  public Boolean isIgnoreServerPort() {
    return ignoreServerPort;
  }

  public void setIgnoreServerPort(Boolean ignoreServerPort) {
    this.ignoreServerPort = ignoreServerPort;
  }

  public Pool inlineHealthMonitor(Boolean inlineHealthMonitor) {
    this.inlineHealthMonitor = inlineHealthMonitor;
    return this;
  }

   /**
   * The Passive monitor will monitor client to server connections and requests and adjust traffic load to servers based on successful responses.  This may alter the expected behavior of the LB method, such as Round Robin.
   * @return inlineHealthMonitor
  **/
  @Schema(description = "The Passive monitor will monitor client to server connections and requests and adjust traffic load to servers based on successful responses.  This may alter the expected behavior of the LB method, such as Round Robin.")
  public Boolean isInlineHealthMonitor() {
    return inlineHealthMonitor;
  }

  public void setInlineHealthMonitor(Boolean inlineHealthMonitor) {
    this.inlineHealthMonitor = inlineHealthMonitor;
  }

  public Pool ipaddrgroupRef(String ipaddrgroupRef) {
    this.ipaddrgroupRef = ipaddrgroupRef;
    return this;
  }

   /**
   * Use list of servers from Ip Address Group. It is a reference to an object of type IpAddrGroup.
   * @return ipaddrgroupRef
  **/
  @Schema(description = "Use list of servers from Ip Address Group. It is a reference to an object of type IpAddrGroup.")
  public String getIpaddrgroupRef() {
    return ipaddrgroupRef;
  }

  public void setIpaddrgroupRef(String ipaddrgroupRef) {
    this.ipaddrgroupRef = ipaddrgroupRef;
  }

  public Pool lbAlgorithm(String lbAlgorithm) {
    this.lbAlgorithm = lbAlgorithm;
    return this;
  }

   /**
   * The load balancing algorithm will pick a server within the pool&#x27;s list of available servers. Enum options - LB_ALGORITHM_LEAST_CONNECTIONS, LB_ALGORITHM_ROUND_ROBIN, LB_ALGORITHM_FASTEST_RESPONSE, LB_ALGORITHM_CONSISTENT_HASH, LB_ALGORITHM_LEAST_LOAD, LB_ALGORITHM_FEWEST_SERVERS, LB_ALGORITHM_RANDOM, LB_ALGORITHM_FEWEST_TASKS, LB_ALGORITHM_NEAREST_SERVER, LB_ALGORITHM_CORE_AFFINITY, LB_ALGORITHM_TOPOLOGY.
   * @return lbAlgorithm
  **/
  @Schema(description = "The load balancing algorithm will pick a server within the pool's list of available servers. Enum options - LB_ALGORITHM_LEAST_CONNECTIONS, LB_ALGORITHM_ROUND_ROBIN, LB_ALGORITHM_FASTEST_RESPONSE, LB_ALGORITHM_CONSISTENT_HASH, LB_ALGORITHM_LEAST_LOAD, LB_ALGORITHM_FEWEST_SERVERS, LB_ALGORITHM_RANDOM, LB_ALGORITHM_FEWEST_TASKS, LB_ALGORITHM_NEAREST_SERVER, LB_ALGORITHM_CORE_AFFINITY, LB_ALGORITHM_TOPOLOGY.")
  public String getLbAlgorithm() {
    return lbAlgorithm;
  }

  public void setLbAlgorithm(String lbAlgorithm) {
    this.lbAlgorithm = lbAlgorithm;
  }

  public Pool lbAlgorithmConsistentHashHdr(String lbAlgorithmConsistentHashHdr) {
    this.lbAlgorithmConsistentHashHdr = lbAlgorithmConsistentHashHdr;
    return this;
  }

   /**
   * HTTP header name to be used for the hash key.
   * @return lbAlgorithmConsistentHashHdr
  **/
  @Schema(description = "HTTP header name to be used for the hash key.")
  public String getLbAlgorithmConsistentHashHdr() {
    return lbAlgorithmConsistentHashHdr;
  }

  public void setLbAlgorithmConsistentHashHdr(String lbAlgorithmConsistentHashHdr) {
    this.lbAlgorithmConsistentHashHdr = lbAlgorithmConsistentHashHdr;
  }

  public Pool lbAlgorithmCoreNonaffinity(Integer lbAlgorithmCoreNonaffinity) {
    this.lbAlgorithmCoreNonaffinity = lbAlgorithmCoreNonaffinity;
    return this;
  }

   /**
   * Degree of non-affinity for core afffinity based server selection. Allowed values are 1-65535. Field introduced in 17.1.3.
   * @return lbAlgorithmCoreNonaffinity
  **/
  @Schema(description = "Degree of non-affinity for core afffinity based server selection. Allowed values are 1-65535. Field introduced in 17.1.3.")
  public Integer getLbAlgorithmCoreNonaffinity() {
    return lbAlgorithmCoreNonaffinity;
  }

  public void setLbAlgorithmCoreNonaffinity(Integer lbAlgorithmCoreNonaffinity) {
    this.lbAlgorithmCoreNonaffinity = lbAlgorithmCoreNonaffinity;
  }

  public Pool lbAlgorithmHash(String lbAlgorithmHash) {
    this.lbAlgorithmHash = lbAlgorithmHash;
    return this;
  }

   /**
   * Criteria used as a key for determining the hash between the client and  server. Enum options - LB_ALGORITHM_CONSISTENT_HASH_SOURCE_IP_ADDRESS, LB_ALGORITHM_CONSISTENT_HASH_SOURCE_IP_ADDRESS_AND_PORT, LB_ALGORITHM_CONSISTENT_HASH_URI, LB_ALGORITHM_CONSISTENT_HASH_CUSTOM_HEADER, LB_ALGORITHM_CONSISTENT_HASH_CUSTOM_STRING, LB_ALGORITHM_CONSISTENT_HASH_CALLID.
   * @return lbAlgorithmHash
  **/
  @Schema(description = "Criteria used as a key for determining the hash between the client and  server. Enum options - LB_ALGORITHM_CONSISTENT_HASH_SOURCE_IP_ADDRESS, LB_ALGORITHM_CONSISTENT_HASH_SOURCE_IP_ADDRESS_AND_PORT, LB_ALGORITHM_CONSISTENT_HASH_URI, LB_ALGORITHM_CONSISTENT_HASH_CUSTOM_HEADER, LB_ALGORITHM_CONSISTENT_HASH_CUSTOM_STRING, LB_ALGORITHM_CONSISTENT_HASH_CALLID.")
  public String getLbAlgorithmHash() {
    return lbAlgorithmHash;
  }

  public void setLbAlgorithmHash(String lbAlgorithmHash) {
    this.lbAlgorithmHash = lbAlgorithmHash;
  }

  public Pool lookupServerByName(Boolean lookupServerByName) {
    this.lookupServerByName = lookupServerByName;
    return this;
  }

   /**
   * Allow server lookup by name. Field introduced in 17.1.11,17.2.4.
   * @return lookupServerByName
  **/
  @Schema(description = "Allow server lookup by name. Field introduced in 17.1.11,17.2.4.")
  public Boolean isLookupServerByName() {
    return lookupServerByName;
  }

  public void setLookupServerByName(Boolean lookupServerByName) {
    this.lookupServerByName = lookupServerByName;
  }

  public Pool maxConcurrentConnectionsPerServer(Integer maxConcurrentConnectionsPerServer) {
    this.maxConcurrentConnectionsPerServer = maxConcurrentConnectionsPerServer;
    return this;
  }

   /**
   * The maximum number of concurrent connections allowed to each server within the pool. NOTE  applied value will be no less than the number of service engines that the pool is placed on. If set to 0, no limit is applied.
   * @return maxConcurrentConnectionsPerServer
  **/
  @Schema(description = "The maximum number of concurrent connections allowed to each server within the pool. NOTE  applied value will be no less than the number of service engines that the pool is placed on. If set to 0, no limit is applied.")
  public Integer getMaxConcurrentConnectionsPerServer() {
    return maxConcurrentConnectionsPerServer;
  }

  public void setMaxConcurrentConnectionsPerServer(Integer maxConcurrentConnectionsPerServer) {
    this.maxConcurrentConnectionsPerServer = maxConcurrentConnectionsPerServer;
  }

  public Pool maxConnRatePerServer(RateProfile maxConnRatePerServer) {
    this.maxConnRatePerServer = maxConnRatePerServer;
    return this;
  }

   /**
   * Get maxConnRatePerServer
   * @return maxConnRatePerServer
  **/
  @Schema(description = "")
  public RateProfile getMaxConnRatePerServer() {
    return maxConnRatePerServer;
  }

  public void setMaxConnRatePerServer(RateProfile maxConnRatePerServer) {
    this.maxConnRatePerServer = maxConnRatePerServer;
  }

  public Pool minHealthMonitorsUp(Integer minHealthMonitorsUp) {
    this.minHealthMonitorsUp = minHealthMonitorsUp;
    return this;
  }

   /**
   * Minimum number of health monitors in UP state to mark server UP. Field introduced in 18.2.1, 17.2.12.
   * @return minHealthMonitorsUp
  **/
  @Schema(description = "Minimum number of health monitors in UP state to mark server UP. Field introduced in 18.2.1, 17.2.12.")
  public Integer getMinHealthMonitorsUp() {
    return minHealthMonitorsUp;
  }

  public void setMinHealthMonitorsUp(Integer minHealthMonitorsUp) {
    this.minHealthMonitorsUp = minHealthMonitorsUp;
  }

  public Pool minServersUp(Integer minServersUp) {
    this.minServersUp = minServersUp;
    return this;
  }

   /**
   * Minimum number of servers in UP state for marking the pool UP. Field introduced in 18.2.1, 17.2.12.
   * @return minServersUp
  **/
  @Schema(description = "Minimum number of servers in UP state for marking the pool UP. Field introduced in 18.2.1, 17.2.12.")
  public Integer getMinServersUp() {
    return minServersUp;
  }

  public void setMinServersUp(Integer minServersUp) {
    this.minServersUp = minServersUp;
  }

  public Pool name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The name of the pool.
   * @return name
  **/
  @Schema(required = true, description = "The name of the pool.")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public Pool networks(List<NetworkFilter> networks) {
    this.networks = networks;
    return this;
  }

  public Pool addNetworksItem(NetworkFilter networksItem) {
    if (this.networks == null) {
      this.networks = new ArrayList<NetworkFilter>();
    }
    this.networks.add(networksItem);
    return this;
  }

   /**
   * (internal-use) Networks designated as containing servers for this pool.  The servers may be further narrowed down by a filter. This field is used internally by Avi, not editable by the user.
   * @return networks
  **/
  @Schema(description = "(internal-use) Networks designated as containing servers for this pool.  The servers may be further narrowed down by a filter. This field is used internally by Avi, not editable by the user.")
  public List<NetworkFilter> getNetworks() {
    return networks;
  }

  public void setNetworks(List<NetworkFilter> networks) {
    this.networks = networks;
  }

  public Pool nsxSecuritygroup(List<String> nsxSecuritygroup) {
    this.nsxSecuritygroup = nsxSecuritygroup;
    return this;
  }

  public Pool addNsxSecuritygroupItem(String nsxSecuritygroupItem) {
    if (this.nsxSecuritygroup == null) {
      this.nsxSecuritygroup = new ArrayList<String>();
    }
    this.nsxSecuritygroup.add(nsxSecuritygroupItem);
    return this;
  }

   /**
   * A list of NSX Service Groups where the Servers for the Pool are created . Field introduced in 17.1.1.
   * @return nsxSecuritygroup
  **/
  @Schema(description = "A list of NSX Service Groups where the Servers for the Pool are created . Field introduced in 17.1.1.")
  public List<String> getNsxSecuritygroup() {
    return nsxSecuritygroup;
  }

  public void setNsxSecuritygroup(List<String> nsxSecuritygroup) {
    this.nsxSecuritygroup = nsxSecuritygroup;
  }

  public Pool pkiProfileRef(String pkiProfileRef) {
    this.pkiProfileRef = pkiProfileRef;
    return this;
  }

   /**
   * Avi will validate the SSL certificate present by a server against the selected PKI Profile. It is a reference to an object of type PKIProfile.
   * @return pkiProfileRef
  **/
  @Schema(description = "Avi will validate the SSL certificate present by a server against the selected PKI Profile. It is a reference to an object of type PKIProfile.")
  public String getPkiProfileRef() {
    return pkiProfileRef;
  }

  public void setPkiProfileRef(String pkiProfileRef) {
    this.pkiProfileRef = pkiProfileRef;
  }

  public Pool placementNetworks(List<PlacementNetwork> placementNetworks) {
    this.placementNetworks = placementNetworks;
    return this;
  }

  public Pool addPlacementNetworksItem(PlacementNetwork placementNetworksItem) {
    if (this.placementNetworks == null) {
      this.placementNetworks = new ArrayList<PlacementNetwork>();
    }
    this.placementNetworks.add(placementNetworksItem);
    return this;
  }

   /**
   * Manually select the networks and subnets used to provide reachability to the pool&#x27;s servers.  Specify the Subnet using the following syntax  10-1-1-0/24. Use static routes in VRF configuration when pool servers are not directly connected butroutable from the service engine.
   * @return placementNetworks
  **/
  @Schema(description = "Manually select the networks and subnets used to provide reachability to the pool's servers.  Specify the Subnet using the following syntax  10-1-1-0/24. Use static routes in VRF configuration when pool servers are not directly connected butroutable from the service engine.")
  public List<PlacementNetwork> getPlacementNetworks() {
    return placementNetworks;
  }

  public void setPlacementNetworks(List<PlacementNetwork> placementNetworks) {
    this.placementNetworks = placementNetworks;
  }

  public Pool prstHdrName(String prstHdrName) {
    this.prstHdrName = prstHdrName;
    return this;
  }

   /**
   * Header name for custom header persistence. Field deprecated in 18.1.2.
   * @return prstHdrName
  **/
  @Schema(description = "Header name for custom header persistence. Field deprecated in 18.1.2.")
  public String getPrstHdrName() {
    return prstHdrName;
  }

  public void setPrstHdrName(String prstHdrName) {
    this.prstHdrName = prstHdrName;
  }

  public Pool requestQueueDepth(Integer requestQueueDepth) {
    this.requestQueueDepth = requestQueueDepth;
    return this;
  }

   /**
   * Minimum number of requests to be queued when pool is full.
   * @return requestQueueDepth
  **/
  @Schema(description = "Minimum number of requests to be queued when pool is full.")
  public Integer getRequestQueueDepth() {
    return requestQueueDepth;
  }

  public void setRequestQueueDepth(Integer requestQueueDepth) {
    this.requestQueueDepth = requestQueueDepth;
  }

  public Pool requestQueueEnabled(Boolean requestQueueEnabled) {
    this.requestQueueEnabled = requestQueueEnabled;
    return this;
  }

   /**
   * Enable request queue when pool is full.
   * @return requestQueueEnabled
  **/
  @Schema(description = "Enable request queue when pool is full.")
  public Boolean isRequestQueueEnabled() {
    return requestQueueEnabled;
  }

  public void setRequestQueueEnabled(Boolean requestQueueEnabled) {
    this.requestQueueEnabled = requestQueueEnabled;
  }

  public Pool rewriteHostHeaderToServerName(Boolean rewriteHostHeaderToServerName) {
    this.rewriteHostHeaderToServerName = rewriteHostHeaderToServerName;
    return this;
  }

   /**
   * Rewrite incoming Host Header to server name of the server to which the request is proxied.  Enabling this feature rewrites Host Header for requests to all servers in the pool.
   * @return rewriteHostHeaderToServerName
  **/
  @Schema(description = "Rewrite incoming Host Header to server name of the server to which the request is proxied.  Enabling this feature rewrites Host Header for requests to all servers in the pool.")
  public Boolean isRewriteHostHeaderToServerName() {
    return rewriteHostHeaderToServerName;
  }

  public void setRewriteHostHeaderToServerName(Boolean rewriteHostHeaderToServerName) {
    this.rewriteHostHeaderToServerName = rewriteHostHeaderToServerName;
  }

  public Pool rewriteHostHeaderToSni(Boolean rewriteHostHeaderToSni) {
    this.rewriteHostHeaderToSni = rewriteHostHeaderToSni;
    return this;
  }

   /**
   * If SNI server name is specified, rewrite incoming host header to the SNI server name.
   * @return rewriteHostHeaderToSni
  **/
  @Schema(description = "If SNI server name is specified, rewrite incoming host header to the SNI server name.")
  public Boolean isRewriteHostHeaderToSni() {
    return rewriteHostHeaderToSni;
  }

  public void setRewriteHostHeaderToSni(Boolean rewriteHostHeaderToSni) {
    this.rewriteHostHeaderToSni = rewriteHostHeaderToSni;
  }

  public Pool serverAutoScale(Boolean serverAutoScale) {
    this.serverAutoScale = serverAutoScale;
    return this;
  }

   /**
   * Server AutoScale. Not used anymore. Field deprecated in 18.1.2.
   * @return serverAutoScale
  **/
  @Schema(description = "Server AutoScale. Not used anymore. Field deprecated in 18.1.2.")
  public Boolean isServerAutoScale() {
    return serverAutoScale;
  }

  public void setServerAutoScale(Boolean serverAutoScale) {
    this.serverAutoScale = serverAutoScale;
  }

  public Pool serverCount(Integer serverCount) {
    this.serverCount = serverCount;
    return this;
  }

   /**
   *  Field deprecated in 18.2.1.
   * @return serverCount
  **/
  @Schema(description = " Field deprecated in 18.2.1.")
  public Integer getServerCount() {
    return serverCount;
  }

  public void setServerCount(Integer serverCount) {
    this.serverCount = serverCount;
  }

  public Pool serverName(String serverName) {
    this.serverName = serverName;
    return this;
  }

   /**
   * Fully qualified DNS hostname which will be used in the TLS SNI extension in server connections if SNI is enabled. If no value is specified, Avi will use the incoming host header instead.
   * @return serverName
  **/
  @Schema(description = "Fully qualified DNS hostname which will be used in the TLS SNI extension in server connections if SNI is enabled. If no value is specified, Avi will use the incoming host header instead.")
  public String getServerName() {
    return serverName;
  }

  public void setServerName(String serverName) {
    this.serverName = serverName;
  }

  public Pool serverReselect(HTTPServerReselect serverReselect) {
    this.serverReselect = serverReselect;
    return this;
  }

   /**
   * Get serverReselect
   * @return serverReselect
  **/
  @Schema(description = "")
  public HTTPServerReselect getServerReselect() {
    return serverReselect;
  }

  public void setServerReselect(HTTPServerReselect serverReselect) {
    this.serverReselect = serverReselect;
  }

  public Pool serverTimeout(Integer serverTimeout) {
    this.serverTimeout = serverTimeout;
    return this;
  }

   /**
   * Server timeout value specifies the time within which a server connection needs to be established and a request-response exchange completes between AVI and the server. Value of 0 results in using default timeout of 60 minutes. Allowed values are 0-3600000. Field introduced in 18.1.5,18.2.1.
   * @return serverTimeout
  **/
  @Schema(description = "Server timeout value specifies the time within which a server connection needs to be established and a request-response exchange completes between AVI and the server. Value of 0 results in using default timeout of 60 minutes. Allowed values are 0-3600000. Field introduced in 18.1.5,18.2.1.")
  public Integer getServerTimeout() {
    return serverTimeout;
  }

  public void setServerTimeout(Integer serverTimeout) {
    this.serverTimeout = serverTimeout;
  }

  public Pool servers(List<Server> servers) {
    this.servers = servers;
    return this;
  }

  public Pool addServersItem(Server serversItem) {
    if (this.servers == null) {
      this.servers = new ArrayList<Server>();
    }
    this.servers.add(serversItem);
    return this;
  }

   /**
   * The pool directs load balanced traffic to this list of destination servers. The servers can be configured by IP address, name, network or via IP Address Group.
   * @return servers
  **/
  @Schema(description = "The pool directs load balanced traffic to this list of destination servers. The servers can be configured by IP address, name, network or via IP Address Group.")
  public List<Server> getServers() {
    return servers;
  }

  public void setServers(List<Server> servers) {
    this.servers = servers;
  }

  public Pool serviceMetadata(String serviceMetadata) {
    this.serviceMetadata = serviceMetadata;
    return this;
  }

   /**
   * Metadata pertaining to the service provided by this Pool. In Openshift/Kubernetes environments, app metadata info is stored. Any user input to this field will be overwritten by Avi Vantage. Field introduced in 17.2.14,18.1.5,18.2.1.
   * @return serviceMetadata
  **/
  @Schema(description = "Metadata pertaining to the service provided by this Pool. In Openshift/Kubernetes environments, app metadata info is stored. Any user input to this field will be overwritten by Avi Vantage. Field introduced in 17.2.14,18.1.5,18.2.1.")
  public String getServiceMetadata() {
    return serviceMetadata;
  }

  public void setServiceMetadata(String serviceMetadata) {
    this.serviceMetadata = serviceMetadata;
  }

  public Pool sniEnabled(Boolean sniEnabled) {
    this.sniEnabled = sniEnabled;
    return this;
  }

   /**
   * Enable TLS SNI for server connections. If disabled, Avi will not send the SNI extension as part of the handshake.
   * @return sniEnabled
  **/
  @Schema(description = "Enable TLS SNI for server connections. If disabled, Avi will not send the SNI extension as part of the handshake.")
  public Boolean isSniEnabled() {
    return sniEnabled;
  }

  public void setSniEnabled(Boolean sniEnabled) {
    this.sniEnabled = sniEnabled;
  }

  public Pool sslKeyAndCertificateRef(String sslKeyAndCertificateRef) {
    this.sslKeyAndCertificateRef = sslKeyAndCertificateRef;
    return this;
  }

   /**
   * Service Engines will present a client SSL certificate to the server. It is a reference to an object of type SSLKeyAndCertificate.
   * @return sslKeyAndCertificateRef
  **/
  @Schema(description = "Service Engines will present a client SSL certificate to the server. It is a reference to an object of type SSLKeyAndCertificate.")
  public String getSslKeyAndCertificateRef() {
    return sslKeyAndCertificateRef;
  }

  public void setSslKeyAndCertificateRef(String sslKeyAndCertificateRef) {
    this.sslKeyAndCertificateRef = sslKeyAndCertificateRef;
  }

  public Pool sslProfileRef(String sslProfileRef) {
    this.sslProfileRef = sslProfileRef;
    return this;
  }

   /**
   * When enabled, Avi re-encrypts traffic to the backend servers. The specific SSL profile defines which ciphers and SSL versions will be supported. It is a reference to an object of type SSLProfile.
   * @return sslProfileRef
  **/
  @Schema(description = "When enabled, Avi re-encrypts traffic to the backend servers. The specific SSL profile defines which ciphers and SSL versions will be supported. It is a reference to an object of type SSLProfile.")
  public String getSslProfileRef() {
    return sslProfileRef;
  }

  public void setSslProfileRef(String sslProfileRef) {
    this.sslProfileRef = sslProfileRef;
  }

  public Pool tenantRef(String tenantRef) {
    this.tenantRef = tenantRef;
    return this;
  }

   /**
   *  It is a reference to an object of type Tenant.
   * @return tenantRef
  **/
  @Schema(description = " It is a reference to an object of type Tenant.")
  public String getTenantRef() {
    return tenantRef;
  }

  public void setTenantRef(String tenantRef) {
    this.tenantRef = tenantRef;
  }

   /**
   * url
   * @return url
  **/
  @Schema(description = "url")
  public String getUrl() {
    return url;
  }

  public Pool useServicePort(Boolean useServicePort) {
    this.useServicePort = useServicePort;
    return this;
  }

   /**
   * Do not translate the client&#x27;s destination port when sending the connection to the server.  The pool or servers specified service port will still be used for health monitoring.
   * @return useServicePort
  **/
  @Schema(description = "Do not translate the client's destination port when sending the connection to the server.  The pool or servers specified service port will still be used for health monitoring.")
  public Boolean isUseServicePort() {
    return useServicePort;
  }

  public void setUseServicePort(Boolean useServicePort) {
    this.useServicePort = useServicePort;
  }

  public Pool uuid(String uuid) {
    this.uuid = uuid;
    return this;
  }

   /**
   * UUID of the pool.
   * @return uuid
  **/
  @Schema(description = "UUID of the pool.")
  public String getUuid() {
    return uuid;
  }

  public void setUuid(String uuid) {
    this.uuid = uuid;
  }

  public Pool vrfRef(String vrfRef) {
    this.vrfRef = vrfRef;
    return this;
  }

   /**
   * Virtual Routing Context that the pool is bound to. This is used to provide the isolation of the set of networks the pool is attached to. The pool inherits the Virtual Routing Conext of the Virtual Service, and this field is used only internally, and is set by pb-transform. It is a reference to an object of type VrfContext.
   * @return vrfRef
  **/
  @Schema(description = "Virtual Routing Context that the pool is bound to. This is used to provide the isolation of the set of networks the pool is attached to. The pool inherits the Virtual Routing Conext of the Virtual Service, and this field is used only internally, and is set by pb-transform. It is a reference to an object of type VrfContext.")
  public String getVrfRef() {
    return vrfRef;
  }

  public void setVrfRef(String vrfRef) {
    this.vrfRef = vrfRef;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Pool pool = (Pool) o;
    return Objects.equals(this._lastModified, pool._lastModified) &&
        Objects.equals(this.aPool, pool.aPool) &&
        Objects.equals(this.abPool, pool.abPool) &&
        Objects.equals(this.abPriority, pool.abPriority) &&
        Objects.equals(this.analyticsPolicy, pool.analyticsPolicy) &&
        Objects.equals(this.analyticsProfileRef, pool.analyticsProfileRef) &&
        Objects.equals(this.apicEpgName, pool.apicEpgName) &&
        Objects.equals(this.applicationPersistenceProfileRef, pool.applicationPersistenceProfileRef) &&
        Objects.equals(this.autoscaleLaunchConfigRef, pool.autoscaleLaunchConfigRef) &&
        Objects.equals(this.autoscaleNetworks, pool.autoscaleNetworks) &&
        Objects.equals(this.autoscalePolicyRef, pool.autoscalePolicyRef) &&
        Objects.equals(this.capacityEstimation, pool.capacityEstimation) &&
        Objects.equals(this.capacityEstimationTtfbThresh, pool.capacityEstimationTtfbThresh) &&
        Objects.equals(this.cloudConfigCksum, pool.cloudConfigCksum) &&
        Objects.equals(this.cloudRef, pool.cloudRef) &&
        Objects.equals(this.connPoolProperties, pool.connPoolProperties) &&
        Objects.equals(this.connectionRampDuration, pool.connectionRampDuration) &&
        Objects.equals(this.createdBy, pool.createdBy) &&
        Objects.equals(this.defaultServerPort, pool.defaultServerPort) &&
        Objects.equals(this.deleteServerOnDnsRefresh, pool.deleteServerOnDnsRefresh) &&
        Objects.equals(this.description, pool.description) &&
        Objects.equals(this.domainName, pool.domainName) &&
        Objects.equals(this.eastWest, pool.eastWest) &&
        Objects.equals(this.enableHttp2, pool.enableHttp2) &&
        Objects.equals(this.enabled, pool.enabled) &&
        Objects.equals(this.externalAutoscaleGroups, pool.externalAutoscaleGroups) &&
        Objects.equals(this.failAction, pool.failAction) &&
        Objects.equals(this.fewestTasksFeedbackDelay, pool.fewestTasksFeedbackDelay) &&
        Objects.equals(this.gracefulDisableTimeout, pool.gracefulDisableTimeout) &&
        Objects.equals(this.gslbSpEnabled, pool.gslbSpEnabled) &&
        Objects.equals(this.healthMonitorRefs, pool.healthMonitorRefs) &&
        Objects.equals(this.hostCheckEnabled, pool.hostCheckEnabled) &&
        Objects.equals(this.ignoreServerPort, pool.ignoreServerPort) &&
        Objects.equals(this.inlineHealthMonitor, pool.inlineHealthMonitor) &&
        Objects.equals(this.ipaddrgroupRef, pool.ipaddrgroupRef) &&
        Objects.equals(this.lbAlgorithm, pool.lbAlgorithm) &&
        Objects.equals(this.lbAlgorithmConsistentHashHdr, pool.lbAlgorithmConsistentHashHdr) &&
        Objects.equals(this.lbAlgorithmCoreNonaffinity, pool.lbAlgorithmCoreNonaffinity) &&
        Objects.equals(this.lbAlgorithmHash, pool.lbAlgorithmHash) &&
        Objects.equals(this.lookupServerByName, pool.lookupServerByName) &&
        Objects.equals(this.maxConcurrentConnectionsPerServer, pool.maxConcurrentConnectionsPerServer) &&
        Objects.equals(this.maxConnRatePerServer, pool.maxConnRatePerServer) &&
        Objects.equals(this.minHealthMonitorsUp, pool.minHealthMonitorsUp) &&
        Objects.equals(this.minServersUp, pool.minServersUp) &&
        Objects.equals(this.name, pool.name) &&
        Objects.equals(this.networks, pool.networks) &&
        Objects.equals(this.nsxSecuritygroup, pool.nsxSecuritygroup) &&
        Objects.equals(this.pkiProfileRef, pool.pkiProfileRef) &&
        Objects.equals(this.placementNetworks, pool.placementNetworks) &&
        Objects.equals(this.prstHdrName, pool.prstHdrName) &&
        Objects.equals(this.requestQueueDepth, pool.requestQueueDepth) &&
        Objects.equals(this.requestQueueEnabled, pool.requestQueueEnabled) &&
        Objects.equals(this.rewriteHostHeaderToServerName, pool.rewriteHostHeaderToServerName) &&
        Objects.equals(this.rewriteHostHeaderToSni, pool.rewriteHostHeaderToSni) &&
        Objects.equals(this.serverAutoScale, pool.serverAutoScale) &&
        Objects.equals(this.serverCount, pool.serverCount) &&
        Objects.equals(this.serverName, pool.serverName) &&
        Objects.equals(this.serverReselect, pool.serverReselect) &&
        Objects.equals(this.serverTimeout, pool.serverTimeout) &&
        Objects.equals(this.servers, pool.servers) &&
        Objects.equals(this.serviceMetadata, pool.serviceMetadata) &&
        Objects.equals(this.sniEnabled, pool.sniEnabled) &&
        Objects.equals(this.sslKeyAndCertificateRef, pool.sslKeyAndCertificateRef) &&
        Objects.equals(this.sslProfileRef, pool.sslProfileRef) &&
        Objects.equals(this.tenantRef, pool.tenantRef) &&
        Objects.equals(this.url, pool.url) &&
        Objects.equals(this.useServicePort, pool.useServicePort) &&
        Objects.equals(this.uuid, pool.uuid) &&
        Objects.equals(this.vrfRef, pool.vrfRef);
  }

  @Override
  public int hashCode() {
    return Objects.hash(_lastModified, aPool, abPool, abPriority, analyticsPolicy, analyticsProfileRef, apicEpgName, applicationPersistenceProfileRef, autoscaleLaunchConfigRef, autoscaleNetworks, autoscalePolicyRef, capacityEstimation, capacityEstimationTtfbThresh, cloudConfigCksum, cloudRef, connPoolProperties, connectionRampDuration, createdBy, defaultServerPort, deleteServerOnDnsRefresh, description, domainName, eastWest, enableHttp2, enabled, externalAutoscaleGroups, failAction, fewestTasksFeedbackDelay, gracefulDisableTimeout, gslbSpEnabled, healthMonitorRefs, hostCheckEnabled, ignoreServerPort, inlineHealthMonitor, ipaddrgroupRef, lbAlgorithm, lbAlgorithmConsistentHashHdr, lbAlgorithmCoreNonaffinity, lbAlgorithmHash, lookupServerByName, maxConcurrentConnectionsPerServer, maxConnRatePerServer, minHealthMonitorsUp, minServersUp, name, networks, nsxSecuritygroup, pkiProfileRef, placementNetworks, prstHdrName, requestQueueDepth, requestQueueEnabled, rewriteHostHeaderToServerName, rewriteHostHeaderToSni, serverAutoScale, serverCount, serverName, serverReselect, serverTimeout, servers, serviceMetadata, sniEnabled, sslKeyAndCertificateRef, sslProfileRef, tenantRef, url, useServicePort, uuid, vrfRef);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Pool {\n");
    
    sb.append("    _lastModified: ").append(toIndentedString(_lastModified)).append("\n");
    sb.append("    aPool: ").append(toIndentedString(aPool)).append("\n");
    sb.append("    abPool: ").append(toIndentedString(abPool)).append("\n");
    sb.append("    abPriority: ").append(toIndentedString(abPriority)).append("\n");
    sb.append("    analyticsPolicy: ").append(toIndentedString(analyticsPolicy)).append("\n");
    sb.append("    analyticsProfileRef: ").append(toIndentedString(analyticsProfileRef)).append("\n");
    sb.append("    apicEpgName: ").append(toIndentedString(apicEpgName)).append("\n");
    sb.append("    applicationPersistenceProfileRef: ").append(toIndentedString(applicationPersistenceProfileRef)).append("\n");
    sb.append("    autoscaleLaunchConfigRef: ").append(toIndentedString(autoscaleLaunchConfigRef)).append("\n");
    sb.append("    autoscaleNetworks: ").append(toIndentedString(autoscaleNetworks)).append("\n");
    sb.append("    autoscalePolicyRef: ").append(toIndentedString(autoscalePolicyRef)).append("\n");
    sb.append("    capacityEstimation: ").append(toIndentedString(capacityEstimation)).append("\n");
    sb.append("    capacityEstimationTtfbThresh: ").append(toIndentedString(capacityEstimationTtfbThresh)).append("\n");
    sb.append("    cloudConfigCksum: ").append(toIndentedString(cloudConfigCksum)).append("\n");
    sb.append("    cloudRef: ").append(toIndentedString(cloudRef)).append("\n");
    sb.append("    connPoolProperties: ").append(toIndentedString(connPoolProperties)).append("\n");
    sb.append("    connectionRampDuration: ").append(toIndentedString(connectionRampDuration)).append("\n");
    sb.append("    createdBy: ").append(toIndentedString(createdBy)).append("\n");
    sb.append("    defaultServerPort: ").append(toIndentedString(defaultServerPort)).append("\n");
    sb.append("    deleteServerOnDnsRefresh: ").append(toIndentedString(deleteServerOnDnsRefresh)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    domainName: ").append(toIndentedString(domainName)).append("\n");
    sb.append("    eastWest: ").append(toIndentedString(eastWest)).append("\n");
    sb.append("    enableHttp2: ").append(toIndentedString(enableHttp2)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    externalAutoscaleGroups: ").append(toIndentedString(externalAutoscaleGroups)).append("\n");
    sb.append("    failAction: ").append(toIndentedString(failAction)).append("\n");
    sb.append("    fewestTasksFeedbackDelay: ").append(toIndentedString(fewestTasksFeedbackDelay)).append("\n");
    sb.append("    gracefulDisableTimeout: ").append(toIndentedString(gracefulDisableTimeout)).append("\n");
    sb.append("    gslbSpEnabled: ").append(toIndentedString(gslbSpEnabled)).append("\n");
    sb.append("    healthMonitorRefs: ").append(toIndentedString(healthMonitorRefs)).append("\n");
    sb.append("    hostCheckEnabled: ").append(toIndentedString(hostCheckEnabled)).append("\n");
    sb.append("    ignoreServerPort: ").append(toIndentedString(ignoreServerPort)).append("\n");
    sb.append("    inlineHealthMonitor: ").append(toIndentedString(inlineHealthMonitor)).append("\n");
    sb.append("    ipaddrgroupRef: ").append(toIndentedString(ipaddrgroupRef)).append("\n");
    sb.append("    lbAlgorithm: ").append(toIndentedString(lbAlgorithm)).append("\n");
    sb.append("    lbAlgorithmConsistentHashHdr: ").append(toIndentedString(lbAlgorithmConsistentHashHdr)).append("\n");
    sb.append("    lbAlgorithmCoreNonaffinity: ").append(toIndentedString(lbAlgorithmCoreNonaffinity)).append("\n");
    sb.append("    lbAlgorithmHash: ").append(toIndentedString(lbAlgorithmHash)).append("\n");
    sb.append("    lookupServerByName: ").append(toIndentedString(lookupServerByName)).append("\n");
    sb.append("    maxConcurrentConnectionsPerServer: ").append(toIndentedString(maxConcurrentConnectionsPerServer)).append("\n");
    sb.append("    maxConnRatePerServer: ").append(toIndentedString(maxConnRatePerServer)).append("\n");
    sb.append("    minHealthMonitorsUp: ").append(toIndentedString(minHealthMonitorsUp)).append("\n");
    sb.append("    minServersUp: ").append(toIndentedString(minServersUp)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    networks: ").append(toIndentedString(networks)).append("\n");
    sb.append("    nsxSecuritygroup: ").append(toIndentedString(nsxSecuritygroup)).append("\n");
    sb.append("    pkiProfileRef: ").append(toIndentedString(pkiProfileRef)).append("\n");
    sb.append("    placementNetworks: ").append(toIndentedString(placementNetworks)).append("\n");
    sb.append("    prstHdrName: ").append(toIndentedString(prstHdrName)).append("\n");
    sb.append("    requestQueueDepth: ").append(toIndentedString(requestQueueDepth)).append("\n");
    sb.append("    requestQueueEnabled: ").append(toIndentedString(requestQueueEnabled)).append("\n");
    sb.append("    rewriteHostHeaderToServerName: ").append(toIndentedString(rewriteHostHeaderToServerName)).append("\n");
    sb.append("    rewriteHostHeaderToSni: ").append(toIndentedString(rewriteHostHeaderToSni)).append("\n");
    sb.append("    serverAutoScale: ").append(toIndentedString(serverAutoScale)).append("\n");
    sb.append("    serverCount: ").append(toIndentedString(serverCount)).append("\n");
    sb.append("    serverName: ").append(toIndentedString(serverName)).append("\n");
    sb.append("    serverReselect: ").append(toIndentedString(serverReselect)).append("\n");
    sb.append("    serverTimeout: ").append(toIndentedString(serverTimeout)).append("\n");
    sb.append("    servers: ").append(toIndentedString(servers)).append("\n");
    sb.append("    serviceMetadata: ").append(toIndentedString(serviceMetadata)).append("\n");
    sb.append("    sniEnabled: ").append(toIndentedString(sniEnabled)).append("\n");
    sb.append("    sslKeyAndCertificateRef: ").append(toIndentedString(sslKeyAndCertificateRef)).append("\n");
    sb.append("    sslProfileRef: ").append(toIndentedString(sslProfileRef)).append("\n");
    sb.append("    tenantRef: ").append(toIndentedString(tenantRef)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    useServicePort: ").append(toIndentedString(useServicePort)).append("\n");
    sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
    sb.append("    vrfRef: ").append(toIndentedString(vrfRef)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
