/*
 * Avi avi_global_spec Object API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 20.1.1
 * Contact: support@avinetworks.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.vmware.avi.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
/**
 * UserAccountProfile
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-03-12T12:27:26.755+05:30[Asia/Kolkata]")
public class UserAccountProfile {
  @JsonProperty("_last_modified")
  private String _lastModified = null;

  @JsonProperty("account_lock_timeout")
  private Integer accountLockTimeout = 30;

  @JsonProperty("credentials_timeout_threshold")
  private Integer credentialsTimeoutThreshold = 180;

  @JsonProperty("max_concurrent_sessions")
  private Integer maxConcurrentSessions = null;

  @JsonProperty("max_login_failure_count")
  private Integer maxLoginFailureCount = 3;

  @JsonProperty("max_password_history_count")
  private Integer maxPasswordHistoryCount = 4;

  @JsonProperty("name")
  private String name = null;

  @JsonProperty("url")
  private String url = null;

  @JsonProperty("uuid")
  private String uuid = null;

   /**
   * UNIX time since epoch in microseconds. Units(MICROSECONDS).
   * @return _lastModified
  **/
  @Schema(description = "UNIX time since epoch in microseconds. Units(MICROSECONDS).")
  public String getLastModified() {
    return _lastModified;
  }

  public UserAccountProfile accountLockTimeout(Integer accountLockTimeout) {
    this.accountLockTimeout = accountLockTimeout;
    return this;
  }

   /**
   * Lock timeout period (in minutes). Default is 30 minutes.
   * @return accountLockTimeout
  **/
  @Schema(description = "Lock timeout period (in minutes). Default is 30 minutes.")
  public Integer getAccountLockTimeout() {
    return accountLockTimeout;
  }

  public void setAccountLockTimeout(Integer accountLockTimeout) {
    this.accountLockTimeout = accountLockTimeout;
  }

  public UserAccountProfile credentialsTimeoutThreshold(Integer credentialsTimeoutThreshold) {
    this.credentialsTimeoutThreshold = credentialsTimeoutThreshold;
    return this;
  }

   /**
   * The time period after which credentials expire. Default is 180 days.
   * @return credentialsTimeoutThreshold
  **/
  @Schema(description = "The time period after which credentials expire. Default is 180 days.")
  public Integer getCredentialsTimeoutThreshold() {
    return credentialsTimeoutThreshold;
  }

  public void setCredentialsTimeoutThreshold(Integer credentialsTimeoutThreshold) {
    this.credentialsTimeoutThreshold = credentialsTimeoutThreshold;
  }

  public UserAccountProfile maxConcurrentSessions(Integer maxConcurrentSessions) {
    this.maxConcurrentSessions = maxConcurrentSessions;
    return this;
  }

   /**
   * Maximum number of concurrent sessions allowed. There are unlimited sessions by default.
   * @return maxConcurrentSessions
  **/
  @Schema(description = "Maximum number of concurrent sessions allowed. There are unlimited sessions by default.")
  public Integer getMaxConcurrentSessions() {
    return maxConcurrentSessions;
  }

  public void setMaxConcurrentSessions(Integer maxConcurrentSessions) {
    this.maxConcurrentSessions = maxConcurrentSessions;
  }

  public UserAccountProfile maxLoginFailureCount(Integer maxLoginFailureCount) {
    this.maxLoginFailureCount = maxLoginFailureCount;
    return this;
  }

   /**
   * Number of login attempts before lockout. Default is 3 attempts.
   * @return maxLoginFailureCount
  **/
  @Schema(description = "Number of login attempts before lockout. Default is 3 attempts.")
  public Integer getMaxLoginFailureCount() {
    return maxLoginFailureCount;
  }

  public void setMaxLoginFailureCount(Integer maxLoginFailureCount) {
    this.maxLoginFailureCount = maxLoginFailureCount;
  }

  public UserAccountProfile maxPasswordHistoryCount(Integer maxPasswordHistoryCount) {
    this.maxPasswordHistoryCount = maxPasswordHistoryCount;
    return this;
  }

   /**
   * Maximum number of passwords to be maintained in the password history. Default is 4 passwords.
   * @return maxPasswordHistoryCount
  **/
  @Schema(description = "Maximum number of passwords to be maintained in the password history. Default is 4 passwords.")
  public Integer getMaxPasswordHistoryCount() {
    return maxPasswordHistoryCount;
  }

  public void setMaxPasswordHistoryCount(Integer maxPasswordHistoryCount) {
    this.maxPasswordHistoryCount = maxPasswordHistoryCount;
  }

  public UserAccountProfile name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Name of the object.
   * @return name
  **/
  @Schema(required = true, description = "Name of the object.")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

   /**
   * url
   * @return url
  **/
  @Schema(description = "url")
  public String getUrl() {
    return url;
  }

  public UserAccountProfile uuid(String uuid) {
    this.uuid = uuid;
    return this;
  }

   /**
   * Unique object identifier of the object.
   * @return uuid
  **/
  @Schema(description = "Unique object identifier of the object.")
  public String getUuid() {
    return uuid;
  }

  public void setUuid(String uuid) {
    this.uuid = uuid;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UserAccountProfile userAccountProfile = (UserAccountProfile) o;
    return Objects.equals(this._lastModified, userAccountProfile._lastModified) &&
        Objects.equals(this.accountLockTimeout, userAccountProfile.accountLockTimeout) &&
        Objects.equals(this.credentialsTimeoutThreshold, userAccountProfile.credentialsTimeoutThreshold) &&
        Objects.equals(this.maxConcurrentSessions, userAccountProfile.maxConcurrentSessions) &&
        Objects.equals(this.maxLoginFailureCount, userAccountProfile.maxLoginFailureCount) &&
        Objects.equals(this.maxPasswordHistoryCount, userAccountProfile.maxPasswordHistoryCount) &&
        Objects.equals(this.name, userAccountProfile.name) &&
        Objects.equals(this.url, userAccountProfile.url) &&
        Objects.equals(this.uuid, userAccountProfile.uuid);
  }

  @Override
  public int hashCode() {
    return Objects.hash(_lastModified, accountLockTimeout, credentialsTimeoutThreshold, maxConcurrentSessions, maxLoginFailureCount, maxPasswordHistoryCount, name, url, uuid);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UserAccountProfile {\n");
    
    sb.append("    _lastModified: ").append(toIndentedString(_lastModified)).append("\n");
    sb.append("    accountLockTimeout: ").append(toIndentedString(accountLockTimeout)).append("\n");
    sb.append("    credentialsTimeoutThreshold: ").append(toIndentedString(credentialsTimeoutThreshold)).append("\n");
    sb.append("    maxConcurrentSessions: ").append(toIndentedString(maxConcurrentSessions)).append("\n");
    sb.append("    maxLoginFailureCount: ").append(toIndentedString(maxLoginFailureCount)).append("\n");
    sb.append("    maxPasswordHistoryCount: ").append(toIndentedString(maxPasswordHistoryCount)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
