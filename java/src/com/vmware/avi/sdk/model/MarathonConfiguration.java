/*
 * Avi avi_global_spec Object API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 20.1.1
 * Contact: support@avinetworks.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.vmware.avi.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.vmware.avi.sdk.model.PortRange;
import io.swagger.v3.oas.annotations.media.Schema;
/**
 * MarathonConfiguration
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-03-12T12:27:26.755+05:30[Asia/Kolkata]")
public class MarathonConfiguration {
  @JsonProperty("framework_tag")
  private String frameworkTag = null;

  @JsonProperty("marathon_password")
  private String marathonPassword = null;

  @JsonProperty("marathon_url")
  private String marathonUrl = "http://leader.mesos:8080";

  @JsonProperty("marathon_username")
  private String marathonUsername = null;

  @JsonProperty("private_port_range")
  private PortRange privatePortRange = null;

  @JsonProperty("public_port_range")
  private PortRange publicPortRange = null;

  @JsonProperty("tenant")
  private String tenant = "admin";

  @JsonProperty("use_token_auth")
  private Boolean useTokenAuth = null;

  @JsonProperty("vs_name_tag_framework")
  private Boolean vsNameTagFramework = null;

  public MarathonConfiguration frameworkTag(String frameworkTag) {
    this.frameworkTag = frameworkTag;
    return this;
  }

   /**
   * Framework tag to be used in Virtualservice name. Default is framework name from Mesos. If this tag is altered atruntime, Virtualservices will be deleted and re-created.
   * @return frameworkTag
  **/
  @Schema(description = "Framework tag to be used in Virtualservice name. Default is framework name from Mesos. If this tag is altered atruntime, Virtualservices will be deleted and re-created.")
  public String getFrameworkTag() {
    return frameworkTag;
  }

  public void setFrameworkTag(String frameworkTag) {
    this.frameworkTag = frameworkTag;
  }

  public MarathonConfiguration marathonPassword(String marathonPassword) {
    this.marathonPassword = marathonPassword;
    return this;
  }

   /**
   * Password for Marathon authentication.
   * @return marathonPassword
  **/
  @Schema(description = "Password for Marathon authentication.")
  public String getMarathonPassword() {
    return marathonPassword;
  }

  public void setMarathonPassword(String marathonPassword) {
    this.marathonPassword = marathonPassword;
  }

  public MarathonConfiguration marathonUrl(String marathonUrl) {
    this.marathonUrl = marathonUrl;
    return this;
  }

   /**
   * Marathon API URL of the form http //host port.
   * @return marathonUrl
  **/
  @Schema(description = "Marathon API URL of the form http //host port.")
  public String getMarathonUrl() {
    return marathonUrl;
  }

  public void setMarathonUrl(String marathonUrl) {
    this.marathonUrl = marathonUrl;
  }

  public MarathonConfiguration marathonUsername(String marathonUsername) {
    this.marathonUsername = marathonUsername;
    return this;
  }

   /**
   * Username for Marathon authentication.
   * @return marathonUsername
  **/
  @Schema(description = "Username for Marathon authentication.")
  public String getMarathonUsername() {
    return marathonUsername;
  }

  public void setMarathonUsername(String marathonUsername) {
    this.marathonUsername = marathonUsername;
  }

  public MarathonConfiguration privatePortRange(PortRange privatePortRange) {
    this.privatePortRange = privatePortRange;
    return this;
  }

   /**
   * Get privatePortRange
   * @return privatePortRange
  **/
  @Schema(description = "")
  public PortRange getPrivatePortRange() {
    return privatePortRange;
  }

  public void setPrivatePortRange(PortRange privatePortRange) {
    this.privatePortRange = privatePortRange;
  }

  public MarathonConfiguration publicPortRange(PortRange publicPortRange) {
    this.publicPortRange = publicPortRange;
    return this;
  }

   /**
   * Get publicPortRange
   * @return publicPortRange
  **/
  @Schema(description = "")
  public PortRange getPublicPortRange() {
    return publicPortRange;
  }

  public void setPublicPortRange(PortRange publicPortRange) {
    this.publicPortRange = publicPortRange;
  }

  public MarathonConfiguration tenant(String tenant) {
    this.tenant = tenant;
    return this;
  }

   /**
   * Tenant to pin this Marathon instance to. If set, a tenant object will be created in Avi bearing this name and all applications created in this marathon will be associated with this tenant regardless of, if any, tenant configuration in marathon label for this application.
   * @return tenant
  **/
  @Schema(description = "Tenant to pin this Marathon instance to. If set, a tenant object will be created in Avi bearing this name and all applications created in this marathon will be associated with this tenant regardless of, if any, tenant configuration in marathon label for this application.")
  public String getTenant() {
    return tenant;
  }

  public void setTenant(String tenant) {
    this.tenant = tenant;
  }

  public MarathonConfiguration useTokenAuth(Boolean useTokenAuth) {
    this.useTokenAuth = useTokenAuth;
    return this;
  }

   /**
   * Use Token based authentication instead of basic authentication. Token is refreshed every 5 minutes.
   * @return useTokenAuth
  **/
  @Schema(description = "Use Token based authentication instead of basic authentication. Token is refreshed every 5 minutes.")
  public Boolean isUseTokenAuth() {
    return useTokenAuth;
  }

  public void setUseTokenAuth(Boolean useTokenAuth) {
    this.useTokenAuth = useTokenAuth;
  }

  public MarathonConfiguration vsNameTagFramework(Boolean vsNameTagFramework) {
    this.vsNameTagFramework = vsNameTagFramework;
    return this;
  }

   /**
   * Tag VS name with framework name or framework_tag. Useful in deployments with multiple frameworks.
   * @return vsNameTagFramework
  **/
  @Schema(description = "Tag VS name with framework name or framework_tag. Useful in deployments with multiple frameworks.")
  public Boolean isVsNameTagFramework() {
    return vsNameTagFramework;
  }

  public void setVsNameTagFramework(Boolean vsNameTagFramework) {
    this.vsNameTagFramework = vsNameTagFramework;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MarathonConfiguration marathonConfiguration = (MarathonConfiguration) o;
    return Objects.equals(this.frameworkTag, marathonConfiguration.frameworkTag) &&
        Objects.equals(this.marathonPassword, marathonConfiguration.marathonPassword) &&
        Objects.equals(this.marathonUrl, marathonConfiguration.marathonUrl) &&
        Objects.equals(this.marathonUsername, marathonConfiguration.marathonUsername) &&
        Objects.equals(this.privatePortRange, marathonConfiguration.privatePortRange) &&
        Objects.equals(this.publicPortRange, marathonConfiguration.publicPortRange) &&
        Objects.equals(this.tenant, marathonConfiguration.tenant) &&
        Objects.equals(this.useTokenAuth, marathonConfiguration.useTokenAuth) &&
        Objects.equals(this.vsNameTagFramework, marathonConfiguration.vsNameTagFramework);
  }

  @Override
  public int hashCode() {
    return Objects.hash(frameworkTag, marathonPassword, marathonUrl, marathonUsername, privatePortRange, publicPortRange, tenant, useTokenAuth, vsNameTagFramework);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MarathonConfiguration {\n");
    
    sb.append("    frameworkTag: ").append(toIndentedString(frameworkTag)).append("\n");
    sb.append("    marathonPassword: ").append(toIndentedString(marathonPassword)).append("\n");
    sb.append("    marathonUrl: ").append(toIndentedString(marathonUrl)).append("\n");
    sb.append("    marathonUsername: ").append(toIndentedString(marathonUsername)).append("\n");
    sb.append("    privatePortRange: ").append(toIndentedString(privatePortRange)).append("\n");
    sb.append("    publicPortRange: ").append(toIndentedString(publicPortRange)).append("\n");
    sb.append("    tenant: ").append(toIndentedString(tenant)).append("\n");
    sb.append("    useTokenAuth: ").append(toIndentedString(useTokenAuth)).append("\n");
    sb.append("    vsNameTagFramework: ").append(toIndentedString(vsNameTagFramework)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
