/*
 * Avi avi_global_spec Object API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 20.1.1
 * Contact: support@avinetworks.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.vmware.avi.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.vmware.avi.sdk.model.OshiftDockerRegistryMetaData;
import io.swagger.v3.oas.annotations.media.Schema;
/**
 * DockerRegistry
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-03-12T12:27:26.755+05:30[Asia/Kolkata]")
public class DockerRegistry {
  @JsonProperty("oshift_registry")
  private OshiftDockerRegistryMetaData oshiftRegistry = null;

  @JsonProperty("password")
  private String password = null;

  @JsonProperty("private")
  private Boolean _private = null;

  @JsonProperty("registry")
  private String registry = "avinetworks/se";

  @JsonProperty("se_repository_push")
  private Boolean seRepositoryPush = null;

  @JsonProperty("username")
  private String username = null;

  public DockerRegistry oshiftRegistry(OshiftDockerRegistryMetaData oshiftRegistry) {
    this.oshiftRegistry = oshiftRegistry;
    return this;
  }

   /**
   * Get oshiftRegistry
   * @return oshiftRegistry
  **/
  @Schema(description = "")
  public OshiftDockerRegistryMetaData getOshiftRegistry() {
    return oshiftRegistry;
  }

  public void setOshiftRegistry(OshiftDockerRegistryMetaData oshiftRegistry) {
    this.oshiftRegistry = oshiftRegistry;
  }

  public DockerRegistry password(String password) {
    this.password = password;
    return this;
  }

   /**
   * Password for docker registry. Authorized &#x27;regular user&#x27; password if registry is Openshift integrated registry.
   * @return password
  **/
  @Schema(description = "Password for docker registry. Authorized 'regular user' password if registry is Openshift integrated registry.")
  public String getPassword() {
    return password;
  }

  public void setPassword(String password) {
    this.password = password;
  }

  public DockerRegistry _private(Boolean _private) {
    this._private = _private;
    return this;
  }

   /**
   * Set if docker registry is private. Avi controller will not attempt to push SE image to the registry, unless se_repository_push is set.
   * @return _private
  **/
  @Schema(description = "Set if docker registry is private. Avi controller will not attempt to push SE image to the registry, unless se_repository_push is set.")
  public Boolean isPrivate() {
    return _private;
  }

  public void setPrivate(Boolean _private) {
    this._private = _private;
  }

  public DockerRegistry registry(String registry) {
    this.registry = registry;
    return this;
  }

   /**
   * Avi ServiceEngine repository name. For private registry, it&#x27;s registry port/repository, for public registry, it&#x27;s registry/repository, for openshift registry, it&#x27;s registry port/namespace/repo.
   * @return registry
  **/
  @Schema(description = "Avi ServiceEngine repository name. For private registry, it's registry port/repository, for public registry, it's registry/repository, for openshift registry, it's registry port/namespace/repo.")
  public String getRegistry() {
    return registry;
  }

  public void setRegistry(String registry) {
    this.registry = registry;
  }

  public DockerRegistry seRepositoryPush(Boolean seRepositoryPush) {
    this.seRepositoryPush = seRepositoryPush;
    return this;
  }

   /**
   * Avi Controller will push ServiceEngine image to docker repository. Field deprecated in 18.2.6.
   * @return seRepositoryPush
  **/
  @Schema(description = "Avi Controller will push ServiceEngine image to docker repository. Field deprecated in 18.2.6.")
  public Boolean isSeRepositoryPush() {
    return seRepositoryPush;
  }

  public void setSeRepositoryPush(Boolean seRepositoryPush) {
    this.seRepositoryPush = seRepositoryPush;
  }

  public DockerRegistry username(String username) {
    this.username = username;
    return this;
  }

   /**
   * Username for docker registry. Authorized &#x27;regular user&#x27; if registry is Openshift integrated registry.
   * @return username
  **/
  @Schema(description = "Username for docker registry. Authorized 'regular user' if registry is Openshift integrated registry.")
  public String getUsername() {
    return username;
  }

  public void setUsername(String username) {
    this.username = username;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DockerRegistry dockerRegistry = (DockerRegistry) o;
    return Objects.equals(this.oshiftRegistry, dockerRegistry.oshiftRegistry) &&
        Objects.equals(this.password, dockerRegistry.password) &&
        Objects.equals(this._private, dockerRegistry._private) &&
        Objects.equals(this.registry, dockerRegistry.registry) &&
        Objects.equals(this.seRepositoryPush, dockerRegistry.seRepositoryPush) &&
        Objects.equals(this.username, dockerRegistry.username);
  }

  @Override
  public int hashCode() {
    return Objects.hash(oshiftRegistry, password, _private, registry, seRepositoryPush, username);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DockerRegistry {\n");
    
    sb.append("    oshiftRegistry: ").append(toIndentedString(oshiftRegistry)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    _private: ").append(toIndentedString(_private)).append("\n");
    sb.append("    registry: ").append(toIndentedString(registry)).append("\n");
    sb.append("    seRepositoryPush: ").append(toIndentedString(seRepositoryPush)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
