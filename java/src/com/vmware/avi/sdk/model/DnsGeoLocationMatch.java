/*
 * Avi avi_global_spec Object API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 20.1.1
 * Contact: support@avinetworks.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.vmware.avi.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
/**
 * DnsGeoLocationMatch
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-03-12T12:27:26.755+05:30[Asia/Kolkata]")
public class DnsGeoLocationMatch {
  @JsonProperty("geolocation_name")
  private String geolocationName = null;

  @JsonProperty("geolocation_tag")
  private String geolocationTag = null;

  @JsonProperty("match_criteria")
  private String matchCriteria = null;

  @JsonProperty("use_edns_client_subnet_ip")
  private Boolean useEdnsClientSubnetIp = true;

  public DnsGeoLocationMatch geolocationName(String geolocationName) {
    this.geolocationName = geolocationName;
    return this;
  }

   /**
   * Geographical location of the client IP to be used in the match. This location is of the format Country/State/City e.g. US/CA/Santa Clara. Field introduced in 17.1.5.
   * @return geolocationName
  **/
  @Schema(description = "Geographical location of the client IP to be used in the match. This location is of the format Country/State/City e.g. US/CA/Santa Clara. Field introduced in 17.1.5.")
  public String getGeolocationName() {
    return geolocationName;
  }

  public void setGeolocationName(String geolocationName) {
    this.geolocationName = geolocationName;
  }

  public DnsGeoLocationMatch geolocationTag(String geolocationTag) {
    this.geolocationTag = geolocationTag;
    return this;
  }

   /**
   * Geolocation tag for the client IP. This could be any string value for the client IP, e.g. client IPs from US East Coast geolocation would be tagged as &#x27;East Coast&#x27;. Field introduced in 17.1.5.
   * @return geolocationTag
  **/
  @Schema(description = "Geolocation tag for the client IP. This could be any string value for the client IP, e.g. client IPs from US East Coast geolocation would be tagged as 'East Coast'. Field introduced in 17.1.5.")
  public String getGeolocationTag() {
    return geolocationTag;
  }

  public void setGeolocationTag(String geolocationTag) {
    this.geolocationTag = geolocationTag;
  }

  public DnsGeoLocationMatch matchCriteria(String matchCriteria) {
    this.matchCriteria = matchCriteria;
    return this;
  }

   /**
   * Criterion to use for matching the client IP&#x27;s geographical location. Enum options - IS_IN, IS_NOT_IN. Field introduced in 17.1.5.
   * @return matchCriteria
  **/
  @Schema(required = true, description = "Criterion to use for matching the client IP's geographical location. Enum options - IS_IN, IS_NOT_IN. Field introduced in 17.1.5.")
  public String getMatchCriteria() {
    return matchCriteria;
  }

  public void setMatchCriteria(String matchCriteria) {
    this.matchCriteria = matchCriteria;
  }

  public DnsGeoLocationMatch useEdnsClientSubnetIp(Boolean useEdnsClientSubnetIp) {
    this.useEdnsClientSubnetIp = useEdnsClientSubnetIp;
    return this;
  }

   /**
   * Use the IP address from the EDNS client subnet option, if available, to derive geo location of the DNS query. Field introduced in 17.1.5.
   * @return useEdnsClientSubnetIp
  **/
  @Schema(description = "Use the IP address from the EDNS client subnet option, if available, to derive geo location of the DNS query. Field introduced in 17.1.5.")
  public Boolean isUseEdnsClientSubnetIp() {
    return useEdnsClientSubnetIp;
  }

  public void setUseEdnsClientSubnetIp(Boolean useEdnsClientSubnetIp) {
    this.useEdnsClientSubnetIp = useEdnsClientSubnetIp;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DnsGeoLocationMatch dnsGeoLocationMatch = (DnsGeoLocationMatch) o;
    return Objects.equals(this.geolocationName, dnsGeoLocationMatch.geolocationName) &&
        Objects.equals(this.geolocationTag, dnsGeoLocationMatch.geolocationTag) &&
        Objects.equals(this.matchCriteria, dnsGeoLocationMatch.matchCriteria) &&
        Objects.equals(this.useEdnsClientSubnetIp, dnsGeoLocationMatch.useEdnsClientSubnetIp);
  }

  @Override
  public int hashCode() {
    return Objects.hash(geolocationName, geolocationTag, matchCriteria, useEdnsClientSubnetIp);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DnsGeoLocationMatch {\n");
    
    sb.append("    geolocationName: ").append(toIndentedString(geolocationName)).append("\n");
    sb.append("    geolocationTag: ").append(toIndentedString(geolocationTag)).append("\n");
    sb.append("    matchCriteria: ").append(toIndentedString(matchCriteria)).append("\n");
    sb.append("    useEdnsClientSubnetIp: ").append(toIndentedString(useEdnsClientSubnetIp)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
