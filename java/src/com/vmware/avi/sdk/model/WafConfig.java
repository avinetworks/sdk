/*
 * Avi avi_global_spec Object API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 20.1.1
 * Contact: support@avinetworks.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.vmware.avi.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.vmware.avi.sdk.model.AppLearningConfidenceOverride;
import com.vmware.avi.sdk.model.AppLearningParams;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;
/**
 * WafConfig
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-03-12T12:27:26.755+05:30[Asia/Kolkata]")
public class WafConfig {
  @JsonProperty("allowed_http_versions")
  private List<String> allowedHttpVersions = null;

  @JsonProperty("allowed_methods")
  private List<String> allowedMethods = null;

  @JsonProperty("allowed_request_content_types")
  private List<String> allowedRequestContentTypes = null;

  @JsonProperty("argument_separator")
  private String argumentSeparator = "&";

  @JsonProperty("buffer_response_body_for_inspection")
  private Boolean bufferResponseBodyForInspection = null;

  @JsonProperty("client_file_upload_max_body_size")
  private Integer clientFileUploadMaxBodySize = null;

  @JsonProperty("client_nonfile_upload_max_body_size")
  private Integer clientNonfileUploadMaxBodySize = null;

  @JsonProperty("client_request_max_body_size")
  private Integer clientRequestMaxBodySize = 32;

  @JsonProperty("confidence_override")
  private AppLearningConfidenceOverride confidenceOverride = null;

  @JsonProperty("cookie_format_version")
  private Integer cookieFormatVersion = null;

  @JsonProperty("enable_auto_rule_updates")
  private Boolean enableAutoRuleUpdates = true;

  @JsonProperty("enable_regex_learning")
  private Boolean enableRegexLearning = null;

  @JsonProperty("ignore_incomplete_request_body_error")
  private Boolean ignoreIncompleteRequestBodyError = true;

  @JsonProperty("learning_params")
  private AppLearningParams learningParams = null;

  @JsonProperty("max_execution_time")
  private Integer maxExecutionTime = 50;

  @JsonProperty("min_confidence")
  private String minConfidence = "CONFIDENCE_VERY_HIGH";

  @JsonProperty("regex_match_limit")
  private Integer regexMatchLimit = 30000;

  @JsonProperty("regex_recursion_limit")
  private Integer regexRecursionLimit = 10000;

  @JsonProperty("request_body_default_action")
  private String requestBodyDefaultAction = "phase:2,deny,status:403,log,auditlog";

  @JsonProperty("request_hdr_default_action")
  private String requestHdrDefaultAction = "phase:1,deny,status:403,log,auditlog";

  @JsonProperty("response_body_default_action")
  private String responseBodyDefaultAction = "phase:4,deny,status:403,log,auditlog";

  @JsonProperty("response_hdr_default_action")
  private String responseHdrDefaultAction = "phase:3,deny,status:403,log,auditlog";

  @JsonProperty("restricted_extensions")
  private List<String> restrictedExtensions = null;

  @JsonProperty("restricted_headers")
  private List<String> restrictedHeaders = null;

  @JsonProperty("server_response_max_body_size")
  private Integer serverResponseMaxBodySize = 128;

  @JsonProperty("static_extensions")
  private List<String> staticExtensions = null;

  @JsonProperty("status_code_for_rejected_requests")
  private String statusCodeForRejectedRequests = "HTTP_RESPONSE_CODE_403";

  @JsonProperty("xml_xxe_protection")
  private Boolean xmlXxeProtection = true;

  public WafConfig allowedHttpVersions(List<String> allowedHttpVersions) {
    this.allowedHttpVersions = allowedHttpVersions;
    return this;
  }

  public WafConfig addAllowedHttpVersionsItem(String allowedHttpVersionsItem) {
    if (this.allowedHttpVersions == null) {
      this.allowedHttpVersions = new ArrayList<String>();
    }
    this.allowedHttpVersions.add(allowedHttpVersionsItem);
    return this;
  }

   /**
   * WAF allowed HTTP Versions. Enum options - ZERO_NINE, ONE_ZERO, ONE_ONE, TWO_ZERO. Field introduced in 17.2.1.
   * @return allowedHttpVersions
  **/
  @Schema(description = "WAF allowed HTTP Versions. Enum options - ZERO_NINE, ONE_ZERO, ONE_ONE, TWO_ZERO. Field introduced in 17.2.1.")
  public List<String> getAllowedHttpVersions() {
    return allowedHttpVersions;
  }

  public void setAllowedHttpVersions(List<String> allowedHttpVersions) {
    this.allowedHttpVersions = allowedHttpVersions;
  }

  public WafConfig allowedMethods(List<String> allowedMethods) {
    this.allowedMethods = allowedMethods;
    return this;
  }

  public WafConfig addAllowedMethodsItem(String allowedMethodsItem) {
    if (this.allowedMethods == null) {
      this.allowedMethods = new ArrayList<String>();
    }
    this.allowedMethods.add(allowedMethodsItem);
    return this;
  }

   /**
   * WAF allowed HTTP methods. Enum options - HTTP_METHOD_GET, HTTP_METHOD_HEAD, HTTP_METHOD_PUT, HTTP_METHOD_DELETE, HTTP_METHOD_POST, HTTP_METHOD_OPTIONS, HTTP_METHOD_TRACE, HTTP_METHOD_CONNECT, HTTP_METHOD_PATCH, HTTP_METHOD_PROPFIND, HTTP_METHOD_PROPPATCH, HTTP_METHOD_MKCOL, HTTP_METHOD_COPY, HTTP_METHOD_MOVE, HTTP_METHOD_LOCK, HTTP_METHOD_UNLOCK. Field introduced in 17.2.1.
   * @return allowedMethods
  **/
  @Schema(description = "WAF allowed HTTP methods. Enum options - HTTP_METHOD_GET, HTTP_METHOD_HEAD, HTTP_METHOD_PUT, HTTP_METHOD_DELETE, HTTP_METHOD_POST, HTTP_METHOD_OPTIONS, HTTP_METHOD_TRACE, HTTP_METHOD_CONNECT, HTTP_METHOD_PATCH, HTTP_METHOD_PROPFIND, HTTP_METHOD_PROPPATCH, HTTP_METHOD_MKCOL, HTTP_METHOD_COPY, HTTP_METHOD_MOVE, HTTP_METHOD_LOCK, HTTP_METHOD_UNLOCK. Field introduced in 17.2.1.")
  public List<String> getAllowedMethods() {
    return allowedMethods;
  }

  public void setAllowedMethods(List<String> allowedMethods) {
    this.allowedMethods = allowedMethods;
  }

  public WafConfig allowedRequestContentTypes(List<String> allowedRequestContentTypes) {
    this.allowedRequestContentTypes = allowedRequestContentTypes;
    return this;
  }

  public WafConfig addAllowedRequestContentTypesItem(String allowedRequestContentTypesItem) {
    if (this.allowedRequestContentTypes == null) {
      this.allowedRequestContentTypes = new ArrayList<String>();
    }
    this.allowedRequestContentTypes.add(allowedRequestContentTypesItem);
    return this;
  }

   /**
   * WAF allowed Content Types. Field introduced in 17.2.1.
   * @return allowedRequestContentTypes
  **/
  @Schema(description = "WAF allowed Content Types. Field introduced in 17.2.1.")
  public List<String> getAllowedRequestContentTypes() {
    return allowedRequestContentTypes;
  }

  public void setAllowedRequestContentTypes(List<String> allowedRequestContentTypes) {
    this.allowedRequestContentTypes = allowedRequestContentTypes;
  }

  public WafConfig argumentSeparator(String argumentSeparator) {
    this.argumentSeparator = argumentSeparator;
    return this;
  }

   /**
   * Argument seperator. Field introduced in 17.2.1.
   * @return argumentSeparator
  **/
  @Schema(description = "Argument seperator. Field introduced in 17.2.1.")
  public String getArgumentSeparator() {
    return argumentSeparator;
  }

  public void setArgumentSeparator(String argumentSeparator) {
    this.argumentSeparator = argumentSeparator;
  }

  public WafConfig bufferResponseBodyForInspection(Boolean bufferResponseBodyForInspection) {
    this.bufferResponseBodyForInspection = bufferResponseBodyForInspection;
    return this;
  }

   /**
   * Enable to buffer response body for inspection. Field deprecated in 18.2.2. Field introduced in 17.2.3.
   * @return bufferResponseBodyForInspection
  **/
  @Schema(description = "Enable to buffer response body for inspection. Field deprecated in 18.2.2. Field introduced in 17.2.3.")
  public Boolean isBufferResponseBodyForInspection() {
    return bufferResponseBodyForInspection;
  }

  public void setBufferResponseBodyForInspection(Boolean bufferResponseBodyForInspection) {
    this.bufferResponseBodyForInspection = bufferResponseBodyForInspection;
  }

  public WafConfig clientFileUploadMaxBodySize(Integer clientFileUploadMaxBodySize) {
    this.clientFileUploadMaxBodySize = clientFileUploadMaxBodySize;
    return this;
  }

   /**
   * Maximum size for the client request body for file uploads. Allowed values are 1-32768. Field deprecated in 18.1.5. Field introduced in 17.2.1.
   * @return clientFileUploadMaxBodySize
  **/
  @Schema(description = "Maximum size for the client request body for file uploads. Allowed values are 1-32768. Field deprecated in 18.1.5. Field introduced in 17.2.1.")
  public Integer getClientFileUploadMaxBodySize() {
    return clientFileUploadMaxBodySize;
  }

  public void setClientFileUploadMaxBodySize(Integer clientFileUploadMaxBodySize) {
    this.clientFileUploadMaxBodySize = clientFileUploadMaxBodySize;
  }

  public WafConfig clientNonfileUploadMaxBodySize(Integer clientNonfileUploadMaxBodySize) {
    this.clientNonfileUploadMaxBodySize = clientNonfileUploadMaxBodySize;
    return this;
  }

   /**
   * Maximum size for the client request body for non-file uploads. Allowed values are 1-32768. Field deprecated in 18.1.5. Field introduced in 17.2.1.
   * @return clientNonfileUploadMaxBodySize
  **/
  @Schema(description = "Maximum size for the client request body for non-file uploads. Allowed values are 1-32768. Field deprecated in 18.1.5. Field introduced in 17.2.1.")
  public Integer getClientNonfileUploadMaxBodySize() {
    return clientNonfileUploadMaxBodySize;
  }

  public void setClientNonfileUploadMaxBodySize(Integer clientNonfileUploadMaxBodySize) {
    this.clientNonfileUploadMaxBodySize = clientNonfileUploadMaxBodySize;
  }

  public WafConfig clientRequestMaxBodySize(Integer clientRequestMaxBodySize) {
    this.clientRequestMaxBodySize = clientRequestMaxBodySize;
    return this;
  }

   /**
   * Maximum size for the client request body scanned by WAF. Allowed values are 1-32768. Field introduced in 18.1.5, 18.2.1.
   * @return clientRequestMaxBodySize
  **/
  @Schema(description = "Maximum size for the client request body scanned by WAF. Allowed values are 1-32768. Field introduced in 18.1.5, 18.2.1.")
  public Integer getClientRequestMaxBodySize() {
    return clientRequestMaxBodySize;
  }

  public void setClientRequestMaxBodySize(Integer clientRequestMaxBodySize) {
    this.clientRequestMaxBodySize = clientRequestMaxBodySize;
  }

  public WafConfig confidenceOverride(AppLearningConfidenceOverride confidenceOverride) {
    this.confidenceOverride = confidenceOverride;
    return this;
  }

   /**
   * Get confidenceOverride
   * @return confidenceOverride
  **/
  @Schema(description = "")
  public AppLearningConfidenceOverride getConfidenceOverride() {
    return confidenceOverride;
  }

  public void setConfidenceOverride(AppLearningConfidenceOverride confidenceOverride) {
    this.confidenceOverride = confidenceOverride;
  }

  public WafConfig cookieFormatVersion(Integer cookieFormatVersion) {
    this.cookieFormatVersion = cookieFormatVersion;
    return this;
  }

   /**
   * 0  For Netscape Cookies. 1  For version 1 cookies. Allowed values are 0-1. Field introduced in 17.2.1.
   * @return cookieFormatVersion
  **/
  @Schema(description = "0  For Netscape Cookies. 1  For version 1 cookies. Allowed values are 0-1. Field introduced in 17.2.1.")
  public Integer getCookieFormatVersion() {
    return cookieFormatVersion;
  }

  public void setCookieFormatVersion(Integer cookieFormatVersion) {
    this.cookieFormatVersion = cookieFormatVersion;
  }

  public WafConfig enableAutoRuleUpdates(Boolean enableAutoRuleUpdates) {
    this.enableAutoRuleUpdates = enableAutoRuleUpdates;
    return this;
  }

   /**
   * Enable Application Learning based rule updates on the WAF Profile. Rules will be programmed in dedicated WAF learning group. Field introduced in 18.2.3.
   * @return enableAutoRuleUpdates
  **/
  @Schema(description = "Enable Application Learning based rule updates on the WAF Profile. Rules will be programmed in dedicated WAF learning group. Field introduced in 18.2.3.")
  public Boolean isEnableAutoRuleUpdates() {
    return enableAutoRuleUpdates;
  }

  public void setEnableAutoRuleUpdates(Boolean enableAutoRuleUpdates) {
    this.enableAutoRuleUpdates = enableAutoRuleUpdates;
  }

  public WafConfig enableRegexLearning(Boolean enableRegexLearning) {
    this.enableRegexLearning = enableRegexLearning;
    return this;
  }

   /**
   * Enable dynamic regex generation for positive security model rules. Field introduced in 20.1.1.
   * @return enableRegexLearning
  **/
  @Schema(description = "Enable dynamic regex generation for positive security model rules. Field introduced in 20.1.1.")
  public Boolean isEnableRegexLearning() {
    return enableRegexLearning;
  }

  public void setEnableRegexLearning(Boolean enableRegexLearning) {
    this.enableRegexLearning = enableRegexLearning;
  }

  public WafConfig ignoreIncompleteRequestBodyError(Boolean ignoreIncompleteRequestBodyError) {
    this.ignoreIncompleteRequestBodyError = ignoreIncompleteRequestBodyError;
    return this;
  }

   /**
   * Ignore request body parsing errors due to partial scanning. Field introduced in 18.1.5, 18.2.1.
   * @return ignoreIncompleteRequestBodyError
  **/
  @Schema(description = "Ignore request body parsing errors due to partial scanning. Field introduced in 18.1.5, 18.2.1.")
  public Boolean isIgnoreIncompleteRequestBodyError() {
    return ignoreIncompleteRequestBodyError;
  }

  public void setIgnoreIncompleteRequestBodyError(Boolean ignoreIncompleteRequestBodyError) {
    this.ignoreIncompleteRequestBodyError = ignoreIncompleteRequestBodyError;
  }

  public WafConfig learningParams(AppLearningParams learningParams) {
    this.learningParams = learningParams;
    return this;
  }

   /**
   * Get learningParams
   * @return learningParams
  **/
  @Schema(description = "")
  public AppLearningParams getLearningParams() {
    return learningParams;
  }

  public void setLearningParams(AppLearningParams learningParams) {
    this.learningParams = learningParams;
  }

  public WafConfig maxExecutionTime(Integer maxExecutionTime) {
    this.maxExecutionTime = maxExecutionTime;
    return this;
  }

   /**
   * The maximum period of time WAF processing is allowed to take for a single request. A value of 0 (zero) means no limit and should not be chosen in production deployments. It is only used for exceptional situations where crashes of se_dp processes are acceptable. The behavior of the system if this time is exceeded depends on two other configuration settings, the WAF policy mode and the WAF failure mode. In WAF policy mode &#x27;Detection&#x27;, the request is allowed and flagged for both failure mode &#x27;Closed&#x27; and &#x27;Open&#x27;. In enforcement node, &#x27;Closed&#x27; means the request is rejected, &#x27;Open&#x27; means the request is allowed and flagged. Irrespective of these settings, no subsequent WAF rules of this or other phases will be executed once the maximum execution time has been exceeded. Allowed values are 0-5000. Field introduced in 17.2.12, 18.1.2.
   * @return maxExecutionTime
  **/
  @Schema(description = "The maximum period of time WAF processing is allowed to take for a single request. A value of 0 (zero) means no limit and should not be chosen in production deployments. It is only used for exceptional situations where crashes of se_dp processes are acceptable. The behavior of the system if this time is exceeded depends on two other configuration settings, the WAF policy mode and the WAF failure mode. In WAF policy mode 'Detection', the request is allowed and flagged for both failure mode 'Closed' and 'Open'. In enforcement node, 'Closed' means the request is rejected, 'Open' means the request is allowed and flagged. Irrespective of these settings, no subsequent WAF rules of this or other phases will be executed once the maximum execution time has been exceeded. Allowed values are 0-5000. Field introduced in 17.2.12, 18.1.2.")
  public Integer getMaxExecutionTime() {
    return maxExecutionTime;
  }

  public void setMaxExecutionTime(Integer maxExecutionTime) {
    this.maxExecutionTime = maxExecutionTime;
  }

  public WafConfig minConfidence(String minConfidence) {
    this.minConfidence = minConfidence;
    return this;
  }

   /**
   * Minimum confidence label required for auto rule updates. Enum options - CONFIDENCE_VERY_HIGH, CONFIDENCE_HIGH, CONFIDENCE_PROBABLE, CONFIDENCE_LOW, CONFIDENCE_NONE. Field introduced in 18.2.3.
   * @return minConfidence
  **/
  @Schema(description = "Minimum confidence label required for auto rule updates. Enum options - CONFIDENCE_VERY_HIGH, CONFIDENCE_HIGH, CONFIDENCE_PROBABLE, CONFIDENCE_LOW, CONFIDENCE_NONE. Field introduced in 18.2.3.")
  public String getMinConfidence() {
    return minConfidence;
  }

  public void setMinConfidence(String minConfidence) {
    this.minConfidence = minConfidence;
  }

  public WafConfig regexMatchLimit(Integer regexMatchLimit) {
    this.regexMatchLimit = regexMatchLimit;
    return this;
  }

   /**
   * Limit CPU utilization for each regular expression match when processing rules. Field introduced in 17.2.5.
   * @return regexMatchLimit
  **/
  @Schema(description = "Limit CPU utilization for each regular expression match when processing rules. Field introduced in 17.2.5.")
  public Integer getRegexMatchLimit() {
    return regexMatchLimit;
  }

  public void setRegexMatchLimit(Integer regexMatchLimit) {
    this.regexMatchLimit = regexMatchLimit;
  }

  public WafConfig regexRecursionLimit(Integer regexRecursionLimit) {
    this.regexRecursionLimit = regexRecursionLimit;
    return this;
  }

   /**
   * Limit depth of recursion for each regular expression match when processing rules. Field introduced in 20.1.1.
   * @return regexRecursionLimit
  **/
  @Schema(description = "Limit depth of recursion for each regular expression match when processing rules. Field introduced in 20.1.1.")
  public Integer getRegexRecursionLimit() {
    return regexRecursionLimit;
  }

  public void setRegexRecursionLimit(Integer regexRecursionLimit) {
    this.regexRecursionLimit = regexRecursionLimit;
  }

  public WafConfig requestBodyDefaultAction(String requestBodyDefaultAction) {
    this.requestBodyDefaultAction = requestBodyDefaultAction;
    return this;
  }

   /**
   * WAF default action for Request Body Phase. Field introduced in 17.2.1.
   * @return requestBodyDefaultAction
  **/
  @Schema(required = true, description = "WAF default action for Request Body Phase. Field introduced in 17.2.1.")
  public String getRequestBodyDefaultAction() {
    return requestBodyDefaultAction;
  }

  public void setRequestBodyDefaultAction(String requestBodyDefaultAction) {
    this.requestBodyDefaultAction = requestBodyDefaultAction;
  }

  public WafConfig requestHdrDefaultAction(String requestHdrDefaultAction) {
    this.requestHdrDefaultAction = requestHdrDefaultAction;
    return this;
  }

   /**
   * WAF default action for Request Header Phase. Field introduced in 17.2.1.
   * @return requestHdrDefaultAction
  **/
  @Schema(required = true, description = "WAF default action for Request Header Phase. Field introduced in 17.2.1.")
  public String getRequestHdrDefaultAction() {
    return requestHdrDefaultAction;
  }

  public void setRequestHdrDefaultAction(String requestHdrDefaultAction) {
    this.requestHdrDefaultAction = requestHdrDefaultAction;
  }

  public WafConfig responseBodyDefaultAction(String responseBodyDefaultAction) {
    this.responseBodyDefaultAction = responseBodyDefaultAction;
    return this;
  }

   /**
   * WAF default action for Response Body Phase. Field introduced in 17.2.1.
   * @return responseBodyDefaultAction
  **/
  @Schema(required = true, description = "WAF default action for Response Body Phase. Field introduced in 17.2.1.")
  public String getResponseBodyDefaultAction() {
    return responseBodyDefaultAction;
  }

  public void setResponseBodyDefaultAction(String responseBodyDefaultAction) {
    this.responseBodyDefaultAction = responseBodyDefaultAction;
  }

  public WafConfig responseHdrDefaultAction(String responseHdrDefaultAction) {
    this.responseHdrDefaultAction = responseHdrDefaultAction;
    return this;
  }

   /**
   * WAF default action for Response Header Phase. Field introduced in 17.2.1.
   * @return responseHdrDefaultAction
  **/
  @Schema(required = true, description = "WAF default action for Response Header Phase. Field introduced in 17.2.1.")
  public String getResponseHdrDefaultAction() {
    return responseHdrDefaultAction;
  }

  public void setResponseHdrDefaultAction(String responseHdrDefaultAction) {
    this.responseHdrDefaultAction = responseHdrDefaultAction;
  }

  public WafConfig restrictedExtensions(List<String> restrictedExtensions) {
    this.restrictedExtensions = restrictedExtensions;
    return this;
  }

  public WafConfig addRestrictedExtensionsItem(String restrictedExtensionsItem) {
    if (this.restrictedExtensions == null) {
      this.restrictedExtensions = new ArrayList<String>();
    }
    this.restrictedExtensions.add(restrictedExtensionsItem);
    return this;
  }

   /**
   * WAF Restricted File Extensions. Field introduced in 17.2.1.
   * @return restrictedExtensions
  **/
  @Schema(description = "WAF Restricted File Extensions. Field introduced in 17.2.1.")
  public List<String> getRestrictedExtensions() {
    return restrictedExtensions;
  }

  public void setRestrictedExtensions(List<String> restrictedExtensions) {
    this.restrictedExtensions = restrictedExtensions;
  }

  public WafConfig restrictedHeaders(List<String> restrictedHeaders) {
    this.restrictedHeaders = restrictedHeaders;
    return this;
  }

  public WafConfig addRestrictedHeadersItem(String restrictedHeadersItem) {
    if (this.restrictedHeaders == null) {
      this.restrictedHeaders = new ArrayList<String>();
    }
    this.restrictedHeaders.add(restrictedHeadersItem);
    return this;
  }

   /**
   * WAF Restricted HTTP Headers. Field introduced in 17.2.1.
   * @return restrictedHeaders
  **/
  @Schema(description = "WAF Restricted HTTP Headers. Field introduced in 17.2.1.")
  public List<String> getRestrictedHeaders() {
    return restrictedHeaders;
  }

  public void setRestrictedHeaders(List<String> restrictedHeaders) {
    this.restrictedHeaders = restrictedHeaders;
  }

  public WafConfig serverResponseMaxBodySize(Integer serverResponseMaxBodySize) {
    this.serverResponseMaxBodySize = serverResponseMaxBodySize;
    return this;
  }

   /**
   * Maximum size for response body scanned by WAF. Allowed values are 1-32768. Field introduced in 17.2.1.
   * @return serverResponseMaxBodySize
  **/
  @Schema(description = "Maximum size for response body scanned by WAF. Allowed values are 1-32768. Field introduced in 17.2.1.")
  public Integer getServerResponseMaxBodySize() {
    return serverResponseMaxBodySize;
  }

  public void setServerResponseMaxBodySize(Integer serverResponseMaxBodySize) {
    this.serverResponseMaxBodySize = serverResponseMaxBodySize;
  }

  public WafConfig staticExtensions(List<String> staticExtensions) {
    this.staticExtensions = staticExtensions;
    return this;
  }

  public WafConfig addStaticExtensionsItem(String staticExtensionsItem) {
    if (this.staticExtensions == null) {
      this.staticExtensions = new ArrayList<String>();
    }
    this.staticExtensions.add(staticExtensionsItem);
    return this;
  }

   /**
   * WAF Static File Extensions. GET and HEAD requests with no query args and one of these extensions are whitelisted and not checked by the ruleset. Field introduced in 17.2.5.
   * @return staticExtensions
  **/
  @Schema(description = "WAF Static File Extensions. GET and HEAD requests with no query args and one of these extensions are whitelisted and not checked by the ruleset. Field introduced in 17.2.5.")
  public List<String> getStaticExtensions() {
    return staticExtensions;
  }

  public void setStaticExtensions(List<String> staticExtensions) {
    this.staticExtensions = staticExtensions;
  }

  public WafConfig statusCodeForRejectedRequests(String statusCodeForRejectedRequests) {
    this.statusCodeForRejectedRequests = statusCodeForRejectedRequests;
    return this;
  }

   /**
   * HTTP status code used by WAF Positive Security Model when rejecting a request. Enum options - HTTP_RESPONSE_CODE_0, HTTP_RESPONSE_CODE_100, HTTP_RESPONSE_CODE_101, HTTP_RESPONSE_CODE_200, HTTP_RESPONSE_CODE_201, HTTP_RESPONSE_CODE_202, HTTP_RESPONSE_CODE_203, HTTP_RESPONSE_CODE_204, HTTP_RESPONSE_CODE_205, HTTP_RESPONSE_CODE_206, HTTP_RESPONSE_CODE_300, HTTP_RESPONSE_CODE_301, HTTP_RESPONSE_CODE_302, HTTP_RESPONSE_CODE_303, HTTP_RESPONSE_CODE_304, HTTP_RESPONSE_CODE_305, HTTP_RESPONSE_CODE_307, HTTP_RESPONSE_CODE_400, HTTP_RESPONSE_CODE_401, HTTP_RESPONSE_CODE_402, HTTP_RESPONSE_CODE_403, HTTP_RESPONSE_CODE_404, HTTP_RESPONSE_CODE_405, HTTP_RESPONSE_CODE_406, HTTP_RESPONSE_CODE_407, HTTP_RESPONSE_CODE_408, HTTP_RESPONSE_CODE_409, HTTP_RESPONSE_CODE_410, HTTP_RESPONSE_CODE_411, HTTP_RESPONSE_CODE_412, HTTP_RESPONSE_CODE_413, HTTP_RESPONSE_CODE_414, HTTP_RESPONSE_CODE_415, HTTP_RESPONSE_CODE_416, HTTP_RESPONSE_CODE_417, HTTP_RESPONSE_CODE_426, HTTP_RESPONSE_CODE_470, HTTP_RESPONSE_CODE_475, HTTP_RESPONSE_CODE_500, HTTP_RESPONSE_CODE_501, HTTP_RESPONSE_CODE_502, HTTP_RESPONSE_CODE_503, HTTP_RESPONSE_CODE_504, HTTP_RESPONSE_CODE_505. Field introduced in 18.2.3.
   * @return statusCodeForRejectedRequests
  **/
  @Schema(description = "HTTP status code used by WAF Positive Security Model when rejecting a request. Enum options - HTTP_RESPONSE_CODE_0, HTTP_RESPONSE_CODE_100, HTTP_RESPONSE_CODE_101, HTTP_RESPONSE_CODE_200, HTTP_RESPONSE_CODE_201, HTTP_RESPONSE_CODE_202, HTTP_RESPONSE_CODE_203, HTTP_RESPONSE_CODE_204, HTTP_RESPONSE_CODE_205, HTTP_RESPONSE_CODE_206, HTTP_RESPONSE_CODE_300, HTTP_RESPONSE_CODE_301, HTTP_RESPONSE_CODE_302, HTTP_RESPONSE_CODE_303, HTTP_RESPONSE_CODE_304, HTTP_RESPONSE_CODE_305, HTTP_RESPONSE_CODE_307, HTTP_RESPONSE_CODE_400, HTTP_RESPONSE_CODE_401, HTTP_RESPONSE_CODE_402, HTTP_RESPONSE_CODE_403, HTTP_RESPONSE_CODE_404, HTTP_RESPONSE_CODE_405, HTTP_RESPONSE_CODE_406, HTTP_RESPONSE_CODE_407, HTTP_RESPONSE_CODE_408, HTTP_RESPONSE_CODE_409, HTTP_RESPONSE_CODE_410, HTTP_RESPONSE_CODE_411, HTTP_RESPONSE_CODE_412, HTTP_RESPONSE_CODE_413, HTTP_RESPONSE_CODE_414, HTTP_RESPONSE_CODE_415, HTTP_RESPONSE_CODE_416, HTTP_RESPONSE_CODE_417, HTTP_RESPONSE_CODE_426, HTTP_RESPONSE_CODE_470, HTTP_RESPONSE_CODE_475, HTTP_RESPONSE_CODE_500, HTTP_RESPONSE_CODE_501, HTTP_RESPONSE_CODE_502, HTTP_RESPONSE_CODE_503, HTTP_RESPONSE_CODE_504, HTTP_RESPONSE_CODE_505. Field introduced in 18.2.3.")
  public String getStatusCodeForRejectedRequests() {
    return statusCodeForRejectedRequests;
  }

  public void setStatusCodeForRejectedRequests(String statusCodeForRejectedRequests) {
    this.statusCodeForRejectedRequests = statusCodeForRejectedRequests;
  }

  public WafConfig xmlXxeProtection(Boolean xmlXxeProtection) {
    this.xmlXxeProtection = xmlXxeProtection;
    return this;
  }

   /**
   * Block or flag XML requests referring to External Entities. Field introduced in 20.1.1.
   * @return xmlXxeProtection
  **/
  @Schema(description = "Block or flag XML requests referring to External Entities. Field introduced in 20.1.1.")
  public Boolean isXmlXxeProtection() {
    return xmlXxeProtection;
  }

  public void setXmlXxeProtection(Boolean xmlXxeProtection) {
    this.xmlXxeProtection = xmlXxeProtection;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WafConfig wafConfig = (WafConfig) o;
    return Objects.equals(this.allowedHttpVersions, wafConfig.allowedHttpVersions) &&
        Objects.equals(this.allowedMethods, wafConfig.allowedMethods) &&
        Objects.equals(this.allowedRequestContentTypes, wafConfig.allowedRequestContentTypes) &&
        Objects.equals(this.argumentSeparator, wafConfig.argumentSeparator) &&
        Objects.equals(this.bufferResponseBodyForInspection, wafConfig.bufferResponseBodyForInspection) &&
        Objects.equals(this.clientFileUploadMaxBodySize, wafConfig.clientFileUploadMaxBodySize) &&
        Objects.equals(this.clientNonfileUploadMaxBodySize, wafConfig.clientNonfileUploadMaxBodySize) &&
        Objects.equals(this.clientRequestMaxBodySize, wafConfig.clientRequestMaxBodySize) &&
        Objects.equals(this.confidenceOverride, wafConfig.confidenceOverride) &&
        Objects.equals(this.cookieFormatVersion, wafConfig.cookieFormatVersion) &&
        Objects.equals(this.enableAutoRuleUpdates, wafConfig.enableAutoRuleUpdates) &&
        Objects.equals(this.enableRegexLearning, wafConfig.enableRegexLearning) &&
        Objects.equals(this.ignoreIncompleteRequestBodyError, wafConfig.ignoreIncompleteRequestBodyError) &&
        Objects.equals(this.learningParams, wafConfig.learningParams) &&
        Objects.equals(this.maxExecutionTime, wafConfig.maxExecutionTime) &&
        Objects.equals(this.minConfidence, wafConfig.minConfidence) &&
        Objects.equals(this.regexMatchLimit, wafConfig.regexMatchLimit) &&
        Objects.equals(this.regexRecursionLimit, wafConfig.regexRecursionLimit) &&
        Objects.equals(this.requestBodyDefaultAction, wafConfig.requestBodyDefaultAction) &&
        Objects.equals(this.requestHdrDefaultAction, wafConfig.requestHdrDefaultAction) &&
        Objects.equals(this.responseBodyDefaultAction, wafConfig.responseBodyDefaultAction) &&
        Objects.equals(this.responseHdrDefaultAction, wafConfig.responseHdrDefaultAction) &&
        Objects.equals(this.restrictedExtensions, wafConfig.restrictedExtensions) &&
        Objects.equals(this.restrictedHeaders, wafConfig.restrictedHeaders) &&
        Objects.equals(this.serverResponseMaxBodySize, wafConfig.serverResponseMaxBodySize) &&
        Objects.equals(this.staticExtensions, wafConfig.staticExtensions) &&
        Objects.equals(this.statusCodeForRejectedRequests, wafConfig.statusCodeForRejectedRequests) &&
        Objects.equals(this.xmlXxeProtection, wafConfig.xmlXxeProtection);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowedHttpVersions, allowedMethods, allowedRequestContentTypes, argumentSeparator, bufferResponseBodyForInspection, clientFileUploadMaxBodySize, clientNonfileUploadMaxBodySize, clientRequestMaxBodySize, confidenceOverride, cookieFormatVersion, enableAutoRuleUpdates, enableRegexLearning, ignoreIncompleteRequestBodyError, learningParams, maxExecutionTime, minConfidence, regexMatchLimit, regexRecursionLimit, requestBodyDefaultAction, requestHdrDefaultAction, responseBodyDefaultAction, responseHdrDefaultAction, restrictedExtensions, restrictedHeaders, serverResponseMaxBodySize, staticExtensions, statusCodeForRejectedRequests, xmlXxeProtection);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WafConfig {\n");
    
    sb.append("    allowedHttpVersions: ").append(toIndentedString(allowedHttpVersions)).append("\n");
    sb.append("    allowedMethods: ").append(toIndentedString(allowedMethods)).append("\n");
    sb.append("    allowedRequestContentTypes: ").append(toIndentedString(allowedRequestContentTypes)).append("\n");
    sb.append("    argumentSeparator: ").append(toIndentedString(argumentSeparator)).append("\n");
    sb.append("    bufferResponseBodyForInspection: ").append(toIndentedString(bufferResponseBodyForInspection)).append("\n");
    sb.append("    clientFileUploadMaxBodySize: ").append(toIndentedString(clientFileUploadMaxBodySize)).append("\n");
    sb.append("    clientNonfileUploadMaxBodySize: ").append(toIndentedString(clientNonfileUploadMaxBodySize)).append("\n");
    sb.append("    clientRequestMaxBodySize: ").append(toIndentedString(clientRequestMaxBodySize)).append("\n");
    sb.append("    confidenceOverride: ").append(toIndentedString(confidenceOverride)).append("\n");
    sb.append("    cookieFormatVersion: ").append(toIndentedString(cookieFormatVersion)).append("\n");
    sb.append("    enableAutoRuleUpdates: ").append(toIndentedString(enableAutoRuleUpdates)).append("\n");
    sb.append("    enableRegexLearning: ").append(toIndentedString(enableRegexLearning)).append("\n");
    sb.append("    ignoreIncompleteRequestBodyError: ").append(toIndentedString(ignoreIncompleteRequestBodyError)).append("\n");
    sb.append("    learningParams: ").append(toIndentedString(learningParams)).append("\n");
    sb.append("    maxExecutionTime: ").append(toIndentedString(maxExecutionTime)).append("\n");
    sb.append("    minConfidence: ").append(toIndentedString(minConfidence)).append("\n");
    sb.append("    regexMatchLimit: ").append(toIndentedString(regexMatchLimit)).append("\n");
    sb.append("    regexRecursionLimit: ").append(toIndentedString(regexRecursionLimit)).append("\n");
    sb.append("    requestBodyDefaultAction: ").append(toIndentedString(requestBodyDefaultAction)).append("\n");
    sb.append("    requestHdrDefaultAction: ").append(toIndentedString(requestHdrDefaultAction)).append("\n");
    sb.append("    responseBodyDefaultAction: ").append(toIndentedString(responseBodyDefaultAction)).append("\n");
    sb.append("    responseHdrDefaultAction: ").append(toIndentedString(responseHdrDefaultAction)).append("\n");
    sb.append("    restrictedExtensions: ").append(toIndentedString(restrictedExtensions)).append("\n");
    sb.append("    restrictedHeaders: ").append(toIndentedString(restrictedHeaders)).append("\n");
    sb.append("    serverResponseMaxBodySize: ").append(toIndentedString(serverResponseMaxBodySize)).append("\n");
    sb.append("    staticExtensions: ").append(toIndentedString(staticExtensions)).append("\n");
    sb.append("    statusCodeForRejectedRequests: ").append(toIndentedString(statusCodeForRejectedRequests)).append("\n");
    sb.append("    xmlXxeProtection: ").append(toIndentedString(xmlXxeProtection)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
