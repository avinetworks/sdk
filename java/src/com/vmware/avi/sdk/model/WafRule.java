/*
 * Avi avi_global_spec Object API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 20.1.1
 * Contact: support@avinetworks.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.vmware.avi.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.vmware.avi.sdk.model.WafExcludeListEntry;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;
/**
 * WafRule
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-03-12T12:27:26.755+05:30[Asia/Kolkata]")
public class WafRule {
  @JsonProperty("enable")
  private Boolean enable = true;

  @JsonProperty("exclude_list")
  private List<WafExcludeListEntry> excludeList = null;

  @JsonProperty("force_detection")
  private Boolean forceDetection = null;

  @JsonProperty("index")
  private Integer index = null;

  @JsonProperty("is_sensitive")
  private Boolean isSensitive = null;

  @JsonProperty("mode")
  private String mode = null;

  @JsonProperty("name")
  private String name = null;

  @JsonProperty("phase")
  private String phase = null;

  @JsonProperty("rule")
  private String rule = null;

  @JsonProperty("rule_id")
  private String ruleId = null;

  @JsonProperty("tags")
  private List<String> tags = null;

  public WafRule enable(Boolean enable) {
    this.enable = enable;
    return this;
  }

   /**
   * Enable or disable WAF Rule Group. Field introduced in 17.2.1.
   * @return enable
  **/
  @Schema(required = true, description = "Enable or disable WAF Rule Group. Field introduced in 17.2.1.")
  public Boolean isEnable() {
    return enable;
  }

  public void setEnable(Boolean enable) {
    this.enable = enable;
  }

  public WafRule excludeList(List<WafExcludeListEntry> excludeList) {
    this.excludeList = excludeList;
    return this;
  }

  public WafRule addExcludeListItem(WafExcludeListEntry excludeListItem) {
    if (this.excludeList == null) {
      this.excludeList = new ArrayList<WafExcludeListEntry>();
    }
    this.excludeList.add(excludeListItem);
    return this;
  }

   /**
   * Exclude list for the WAF rule. The fields in the exclude list entry are logically and&#x27;ed to deduce the exclusion criteria. If there are multiple excludelist entries, it will be &#x27;logical or&#x27; of them. Field introduced in 17.2.3.
   * @return excludeList
  **/
  @Schema(description = "Exclude list for the WAF rule. The fields in the exclude list entry are logically and'ed to deduce the exclusion criteria. If there are multiple excludelist entries, it will be 'logical or' of them. Field introduced in 17.2.3.")
  public List<WafExcludeListEntry> getExcludeList() {
    return excludeList;
  }

  public void setExcludeList(List<WafExcludeListEntry> excludeList) {
    this.excludeList = excludeList;
  }

  public WafRule forceDetection(Boolean forceDetection) {
    this.forceDetection = forceDetection;
    return this;
  }

   /**
   * When set to &#x27;true&#x27;, this rule will not cause &#x27;deny&#x27; or &#x27;redirect&#x27; actions to run, even if WAF Policy is set to enforcement mode. The behavior would be as if this rule operated in detection mode regardless of WAF Policy setting. Field deprecated in 18.1.5. Field introduced in 18.1.4.
   * @return forceDetection
  **/
  @Schema(description = "When set to 'true', this rule will not cause 'deny' or 'redirect' actions to run, even if WAF Policy is set to enforcement mode. The behavior would be as if this rule operated in detection mode regardless of WAF Policy setting. Field deprecated in 18.1.5. Field introduced in 18.1.4.")
  public Boolean isForceDetection() {
    return forceDetection;
  }

  public void setForceDetection(Boolean forceDetection) {
    this.forceDetection = forceDetection;
  }

  public WafRule index(Integer index) {
    this.index = index;
    return this;
  }

   /**
   *  Field introduced in 17.2.1.
   * @return index
  **/
  @Schema(required = true, description = " Field introduced in 17.2.1.")
  public Integer getIndex() {
    return index;
  }

  public void setIndex(Integer index) {
    this.index = index;
  }

  public WafRule isSensitive(Boolean isSensitive) {
    this.isSensitive = isSensitive;
    return this;
  }

   /**
   * The rule field is sensitive and will not be displayed. Field introduced in 20.1.1.
   * @return isSensitive
  **/
  @Schema(description = "The rule field is sensitive and will not be displayed. Field introduced in 20.1.1.")
  public Boolean isIsSensitive() {
    return isSensitive;
  }

  public void setIsSensitive(Boolean isSensitive) {
    this.isSensitive = isSensitive;
  }

  public WafRule mode(String mode) {
    this.mode = mode;
    return this;
  }

   /**
   * WAF Rule mode. This can be detection or enforcement. If this is not set, the Policy mode is used. This only takes effect if the policy allows delegation. Enum options - WAF_MODE_DETECTION_ONLY, WAF_MODE_ENFORCEMENT. Field introduced in 18.1.5, 18.2.1.
   * @return mode
  **/
  @Schema(description = "WAF Rule mode. This can be detection or enforcement. If this is not set, the Policy mode is used. This only takes effect if the policy allows delegation. Enum options - WAF_MODE_DETECTION_ONLY, WAF_MODE_ENFORCEMENT. Field introduced in 18.1.5, 18.2.1.")
  public String getMode() {
    return mode;
  }

  public void setMode(String mode) {
    this.mode = mode;
  }

  public WafRule name(String name) {
    this.name = name;
    return this;
  }

   /**
   * User-friendly optional name for a rule. Field introduced in 17.2.1.
   * @return name
  **/
  @Schema(description = "User-friendly optional name for a rule. Field introduced in 17.2.1.")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

   /**
   * The execution phase where this rule will be executed. Enum options - WAF_PHASE_CONNECTION, WAF_PHASE_REQUEST_HEADER, WAF_PHASE_REQUEST_BODY, WAF_PHASE_RESPONSE_HEADER, WAF_PHASE_RESPONSE_BODY, WAF_PHASE_LOGGING. Field introduced in 20.1.1.
   * @return phase
  **/
  @Schema(description = "The execution phase where this rule will be executed. Enum options - WAF_PHASE_CONNECTION, WAF_PHASE_REQUEST_HEADER, WAF_PHASE_REQUEST_BODY, WAF_PHASE_RESPONSE_HEADER, WAF_PHASE_RESPONSE_BODY, WAF_PHASE_LOGGING. Field introduced in 20.1.1.")
  public String getPhase() {
    return phase;
  }

  public WafRule rule(String rule) {
    this.rule = rule;
    return this;
  }

   /**
   * Rule as per Modsec language. Field introduced in 17.2.1.
   * @return rule
  **/
  @Schema(required = true, description = "Rule as per Modsec language. Field introduced in 17.2.1.")
  public String getRule() {
    return rule;
  }

  public void setRule(String rule) {
    this.rule = rule;
  }

  public WafRule ruleId(String ruleId) {
    this.ruleId = ruleId;
    return this;
  }

   /**
   * Identifier (id) for a rule per Modsec language. All SecRule and SecAction directives require an id. It is extracted from the id action in a ModSec rule. Rules within a single WAF Policy are required to have unique rule_ids. Field introduced in 17.2.2.
   * @return ruleId
  **/
  @Schema(description = "Identifier (id) for a rule per Modsec language. All SecRule and SecAction directives require an id. It is extracted from the id action in a ModSec rule. Rules within a single WAF Policy are required to have unique rule_ids. Field introduced in 17.2.2.")
  public String getRuleId() {
    return ruleId;
  }

  public void setRuleId(String ruleId) {
    this.ruleId = ruleId;
  }

  public WafRule tags(List<String> tags) {
    this.tags = tags;
    return this;
  }

  public WafRule addTagsItem(String tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<String>();
    }
    this.tags.add(tagsItem);
    return this;
  }

   /**
   * Tags for WAF rule as per Modsec language. They are extracted from the tag action in a ModSec rule. Field introduced in 18.1.3.
   * @return tags
  **/
  @Schema(description = "Tags for WAF rule as per Modsec language. They are extracted from the tag action in a ModSec rule. Field introduced in 18.1.3.")
  public List<String> getTags() {
    return tags;
  }

  public void setTags(List<String> tags) {
    this.tags = tags;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WafRule wafRule = (WafRule) o;
    return Objects.equals(this.enable, wafRule.enable) &&
        Objects.equals(this.excludeList, wafRule.excludeList) &&
        Objects.equals(this.forceDetection, wafRule.forceDetection) &&
        Objects.equals(this.index, wafRule.index) &&
        Objects.equals(this.isSensitive, wafRule.isSensitive) &&
        Objects.equals(this.mode, wafRule.mode) &&
        Objects.equals(this.name, wafRule.name) &&
        Objects.equals(this.phase, wafRule.phase) &&
        Objects.equals(this.rule, wafRule.rule) &&
        Objects.equals(this.ruleId, wafRule.ruleId) &&
        Objects.equals(this.tags, wafRule.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(enable, excludeList, forceDetection, index, isSensitive, mode, name, phase, rule, ruleId, tags);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WafRule {\n");
    
    sb.append("    enable: ").append(toIndentedString(enable)).append("\n");
    sb.append("    excludeList: ").append(toIndentedString(excludeList)).append("\n");
    sb.append("    forceDetection: ").append(toIndentedString(forceDetection)).append("\n");
    sb.append("    index: ").append(toIndentedString(index)).append("\n");
    sb.append("    isSensitive: ").append(toIndentedString(isSensitive)).append("\n");
    sb.append("    mode: ").append(toIndentedString(mode)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    phase: ").append(toIndentedString(phase)).append("\n");
    sb.append("    rule: ").append(toIndentedString(rule)).append("\n");
    sb.append("    ruleId: ").append(toIndentedString(ruleId)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
