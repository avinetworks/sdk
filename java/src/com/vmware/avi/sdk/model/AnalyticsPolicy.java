/*
 * Avi avi_global_spec Object API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 20.1.1
 * Contact: support@avinetworks.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.vmware.avi.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.vmware.avi.sdk.model.ClientInsightsSampling;
import com.vmware.avi.sdk.model.ClientLogFilter;
import com.vmware.avi.sdk.model.FullClientLogs;
import com.vmware.avi.sdk.model.MetricsRealTimeUpdate;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;
/**
 * AnalyticsPolicy
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-03-12T12:27:26.755+05:30[Asia/Kolkata]")
public class AnalyticsPolicy {
  @JsonProperty("all_headers")
  private Boolean allHeaders = null;

  @JsonProperty("client_insights")
  private String clientInsights = "NO_INSIGHTS";

  @JsonProperty("client_insights_sampling")
  private ClientInsightsSampling clientInsightsSampling = null;

  @JsonProperty("client_log_filters")
  private List<ClientLogFilter> clientLogFilters = null;

  @JsonProperty("enabled")
  private Boolean enabled = null;

  @JsonProperty("full_client_logs")
  private FullClientLogs fullClientLogs = null;

  @JsonProperty("metrics_realtime_update")
  private MetricsRealTimeUpdate metricsRealtimeUpdate = null;

  @JsonProperty("significant_log_throttle")
  private Integer significantLogThrottle = 10;

  @JsonProperty("udf_log_throttle")
  private Integer udfLogThrottle = 10;

  public AnalyticsPolicy allHeaders(Boolean allHeaders) {
    this.allHeaders = allHeaders;
    return this;
  }

   /**
   * Log all headers. Field introduced in 18.1.4, 18.2.1.
   * @return allHeaders
  **/
  @Schema(description = "Log all headers. Field introduced in 18.1.4, 18.2.1.")
  public Boolean isAllHeaders() {
    return allHeaders;
  }

  public void setAllHeaders(Boolean allHeaders) {
    this.allHeaders = allHeaders;
  }

  public AnalyticsPolicy clientInsights(String clientInsights) {
    this.clientInsights = clientInsights;
    return this;
  }

   /**
   * Gain insights from sampled client to server HTTP requests and responses. Enum options - NO_INSIGHTS, PASSIVE, ACTIVE.
   * @return clientInsights
  **/
  @Schema(description = "Gain insights from sampled client to server HTTP requests and responses. Enum options - NO_INSIGHTS, PASSIVE, ACTIVE.")
  public String getClientInsights() {
    return clientInsights;
  }

  public void setClientInsights(String clientInsights) {
    this.clientInsights = clientInsights;
  }

  public AnalyticsPolicy clientInsightsSampling(ClientInsightsSampling clientInsightsSampling) {
    this.clientInsightsSampling = clientInsightsSampling;
    return this;
  }

   /**
   * Get clientInsightsSampling
   * @return clientInsightsSampling
  **/
  @Schema(description = "")
  public ClientInsightsSampling getClientInsightsSampling() {
    return clientInsightsSampling;
  }

  public void setClientInsightsSampling(ClientInsightsSampling clientInsightsSampling) {
    this.clientInsightsSampling = clientInsightsSampling;
  }

  public AnalyticsPolicy clientLogFilters(List<ClientLogFilter> clientLogFilters) {
    this.clientLogFilters = clientLogFilters;
    return this;
  }

  public AnalyticsPolicy addClientLogFiltersItem(ClientLogFilter clientLogFiltersItem) {
    if (this.clientLogFilters == null) {
      this.clientLogFilters = new ArrayList<ClientLogFilter>();
    }
    this.clientLogFilters.add(clientLogFiltersItem);
    return this;
  }

   /**
   * Placeholder for description of property client_log_filters of obj type AnalyticsPolicy field type str  type object
   * @return clientLogFilters
  **/
  @Schema(description = "Placeholder for description of property client_log_filters of obj type AnalyticsPolicy field type str  type object")
  public List<ClientLogFilter> getClientLogFilters() {
    return clientLogFilters;
  }

  public void setClientLogFilters(List<ClientLogFilter> clientLogFilters) {
    this.clientLogFilters = clientLogFilters;
  }

  public AnalyticsPolicy enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

   /**
   * [DEPRECATED] Disable Analytics on this VirtualService. This will disable the collection of both metrics and logs. Please use following fields in AnalytcsProfile to control this behavior instead. disable_vs_analytics (for VirtualServices metrics), disable_server_analytics (for Pool metrics) and client_log_config (for logs). Field deprecated in 18.2.1. Field introduced in 17.2.4.
   * @return enabled
  **/
  @Schema(description = "[DEPRECATED] Disable Analytics on this VirtualService. This will disable the collection of both metrics and logs. Please use following fields in AnalytcsProfile to control this behavior instead. disable_vs_analytics (for VirtualServices metrics), disable_server_analytics (for Pool metrics) and client_log_config (for logs). Field deprecated in 18.2.1. Field introduced in 17.2.4.")
  public Boolean isEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }

  public AnalyticsPolicy fullClientLogs(FullClientLogs fullClientLogs) {
    this.fullClientLogs = fullClientLogs;
    return this;
  }

   /**
   * Get fullClientLogs
   * @return fullClientLogs
  **/
  @Schema(description = "")
  public FullClientLogs getFullClientLogs() {
    return fullClientLogs;
  }

  public void setFullClientLogs(FullClientLogs fullClientLogs) {
    this.fullClientLogs = fullClientLogs;
  }

  public AnalyticsPolicy metricsRealtimeUpdate(MetricsRealTimeUpdate metricsRealtimeUpdate) {
    this.metricsRealtimeUpdate = metricsRealtimeUpdate;
    return this;
  }

   /**
   * Get metricsRealtimeUpdate
   * @return metricsRealtimeUpdate
  **/
  @Schema(description = "")
  public MetricsRealTimeUpdate getMetricsRealtimeUpdate() {
    return metricsRealtimeUpdate;
  }

  public void setMetricsRealtimeUpdate(MetricsRealTimeUpdate metricsRealtimeUpdate) {
    this.metricsRealtimeUpdate = metricsRealtimeUpdate;
  }

  public AnalyticsPolicy significantLogThrottle(Integer significantLogThrottle) {
    this.significantLogThrottle = significantLogThrottle;
    return this;
  }

   /**
   * This setting limits the number of significant logs generated per second for this VS on each SE. Default is 10 logs per second. Set it to zero (0) to disable throttling. Field introduced in 17.1.3.
   * @return significantLogThrottle
  **/
  @Schema(description = "This setting limits the number of significant logs generated per second for this VS on each SE. Default is 10 logs per second. Set it to zero (0) to disable throttling. Field introduced in 17.1.3.")
  public Integer getSignificantLogThrottle() {
    return significantLogThrottle;
  }

  public void setSignificantLogThrottle(Integer significantLogThrottle) {
    this.significantLogThrottle = significantLogThrottle;
  }

  public AnalyticsPolicy udfLogThrottle(Integer udfLogThrottle) {
    this.udfLogThrottle = udfLogThrottle;
    return this;
  }

   /**
   * This setting limits the total number of UDF logs generated per second for this VS on each SE. UDF logs are generated due to the configured client log filters or the rules with logging enabled. Default is 10 logs per second. Set it to zero (0) to disable throttling. Field introduced in 17.1.3.
   * @return udfLogThrottle
  **/
  @Schema(description = "This setting limits the total number of UDF logs generated per second for this VS on each SE. UDF logs are generated due to the configured client log filters or the rules with logging enabled. Default is 10 logs per second. Set it to zero (0) to disable throttling. Field introduced in 17.1.3.")
  public Integer getUdfLogThrottle() {
    return udfLogThrottle;
  }

  public void setUdfLogThrottle(Integer udfLogThrottle) {
    this.udfLogThrottle = udfLogThrottle;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AnalyticsPolicy analyticsPolicy = (AnalyticsPolicy) o;
    return Objects.equals(this.allHeaders, analyticsPolicy.allHeaders) &&
        Objects.equals(this.clientInsights, analyticsPolicy.clientInsights) &&
        Objects.equals(this.clientInsightsSampling, analyticsPolicy.clientInsightsSampling) &&
        Objects.equals(this.clientLogFilters, analyticsPolicy.clientLogFilters) &&
        Objects.equals(this.enabled, analyticsPolicy.enabled) &&
        Objects.equals(this.fullClientLogs, analyticsPolicy.fullClientLogs) &&
        Objects.equals(this.metricsRealtimeUpdate, analyticsPolicy.metricsRealtimeUpdate) &&
        Objects.equals(this.significantLogThrottle, analyticsPolicy.significantLogThrottle) &&
        Objects.equals(this.udfLogThrottle, analyticsPolicy.udfLogThrottle);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allHeaders, clientInsights, clientInsightsSampling, clientLogFilters, enabled, fullClientLogs, metricsRealtimeUpdate, significantLogThrottle, udfLogThrottle);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AnalyticsPolicy {\n");
    
    sb.append("    allHeaders: ").append(toIndentedString(allHeaders)).append("\n");
    sb.append("    clientInsights: ").append(toIndentedString(clientInsights)).append("\n");
    sb.append("    clientInsightsSampling: ").append(toIndentedString(clientInsightsSampling)).append("\n");
    sb.append("    clientLogFilters: ").append(toIndentedString(clientLogFilters)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    fullClientLogs: ").append(toIndentedString(fullClientLogs)).append("\n");
    sb.append("    metricsRealtimeUpdate: ").append(toIndentedString(metricsRealtimeUpdate)).append("\n");
    sb.append("    significantLogThrottle: ").append(toIndentedString(significantLogThrottle)).append("\n");
    sb.append("    udfLogThrottle: ").append(toIndentedString(udfLogThrottle)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
