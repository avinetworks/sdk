/*
 * Avi avi_global_spec Object API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 20.1.1
 * Contact: support@avinetworks.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.vmware.avi.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.vmware.avi.sdk.model.SeAgentStateCacheProperties;
import io.swagger.v3.oas.annotations.media.Schema;
/**
 * SeAgentProperties
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-03-12T12:27:26.755+05:30[Asia/Kolkata]")
public class SeAgentProperties {
  @JsonProperty("controller_echo_miss_aggressive_limit")
  private Integer controllerEchoMissAggressiveLimit = 2;

  @JsonProperty("controller_echo_miss_limit")
  private Integer controllerEchoMissLimit = 4;

  @JsonProperty("controller_echo_rpc_aggressive_timeout")
  private Integer controllerEchoRpcAggressiveTimeout = 2000;

  @JsonProperty("controller_echo_rpc_timeout")
  private Integer controllerEchoRpcTimeout = 2000;

  @JsonProperty("controller_heartbeat_miss_limit")
  private Integer controllerHeartbeatMissLimit = 6;

  @JsonProperty("controller_heartbeat_timeout_sec")
  private Integer controllerHeartbeatTimeoutSec = 12;

  @JsonProperty("controller_registration_timeout_sec")
  private Integer controllerRegistrationTimeoutSec = 30;

  @JsonProperty("controller_rpc_timeout")
  private Integer controllerRpcTimeout = 10;

  @JsonProperty("cpustats_interval")
  private Integer cpustatsInterval = 5;

  @JsonProperty("ctrl_reg_pending_max_wait_time")
  private Integer ctrlRegPendingMaxWaitTime = 150;

  @JsonProperty("debug_mode")
  private Boolean debugMode = null;

  @JsonProperty("dp_aggressive_deq_interval_msec")
  private Integer dpAggressiveDeqIntervalMsec = 1;

  @JsonProperty("dp_aggressive_enq_interval_msec")
  private Integer dpAggressiveEnqIntervalMsec = 1;

  @JsonProperty("dp_batch_size")
  private Integer dpBatchSize = 100;

  @JsonProperty("dp_deq_interval_msec")
  private Integer dpDeqIntervalMsec = 20;

  @JsonProperty("dp_enq_interval_msec")
  private Integer dpEnqIntervalMsec = 20;

  @JsonProperty("dp_max_wait_rsp_time_sec")
  private Integer dpMaxWaitRspTimeSec = 60;

  @JsonProperty("dp_reg_pending_max_wait_time")
  private Integer dpRegPendingMaxWaitTime = 75;

  @JsonProperty("headless_timeout_sec")
  private Integer headlessTimeoutSec = null;

  @JsonProperty("ignore_docker_mac_change")
  private Boolean ignoreDockerMacChange = true;

  @JsonProperty("ns_helper_deq_interval_msec")
  private Integer nsHelperDeqIntervalMsec = 20;

  @JsonProperty("sdb_flush_interval")
  private Integer sdbFlushInterval = 100;

  @JsonProperty("sdb_pipeline_size")
  private Integer sdbPipelineSize = 100;

  @JsonProperty("sdb_scan_count")
  private Integer sdbScanCount = 1000;

  @JsonProperty("se_grp_change_disruptive")
  private Boolean seGrpChangeDisruptive = true;

  @JsonProperty("seagent_statecache_properties")
  private SeAgentStateCacheProperties seagentStatecacheProperties = null;

  @JsonProperty("send_se_ready_timeout")
  private Integer sendSeReadyTimeout = 300;

  @JsonProperty("states_flush_interval")
  private Integer statesFlushInterval = 100;

  @JsonProperty("vnic_dhcp_ip_check_interval")
  private Integer vnicDhcpIpCheckInterval = 6;

  @JsonProperty("vnic_dhcp_ip_max_retries")
  private Integer vnicDhcpIpMaxRetries = 10;

  @JsonProperty("vnic_ip_delete_interval")
  private Integer vnicIpDeleteInterval = 5;

  @JsonProperty("vnic_probe_interval")
  private Integer vnicProbeInterval = 5;

  @JsonProperty("vnic_rpc_retry_interval")
  private Integer vnicRpcRetryInterval = 5;

  @JsonProperty("vnicdb_cmd_history_size")
  private Integer vnicdbCmdHistorySize = 256;

  public SeAgentProperties controllerEchoMissAggressiveLimit(Integer controllerEchoMissAggressiveLimit) {
    this.controllerEchoMissAggressiveLimit = controllerEchoMissAggressiveLimit;
    return this;
  }

   /**
   * Aggressive Count of HB misses for se health check failure. Allowed values are 1-1000.
   * @return controllerEchoMissAggressiveLimit
  **/
  @Schema(description = "Aggressive Count of HB misses for se health check failure. Allowed values are 1-1000.")
  public Integer getControllerEchoMissAggressiveLimit() {
    return controllerEchoMissAggressiveLimit;
  }

  public void setControllerEchoMissAggressiveLimit(Integer controllerEchoMissAggressiveLimit) {
    this.controllerEchoMissAggressiveLimit = controllerEchoMissAggressiveLimit;
  }

  public SeAgentProperties controllerEchoMissLimit(Integer controllerEchoMissLimit) {
    this.controllerEchoMissLimit = controllerEchoMissLimit;
    return this;
  }

   /**
   * Count of HB misses for se health check failure. Allowed values are 1-1000.
   * @return controllerEchoMissLimit
  **/
  @Schema(description = "Count of HB misses for se health check failure. Allowed values are 1-1000.")
  public Integer getControllerEchoMissLimit() {
    return controllerEchoMissLimit;
  }

  public void setControllerEchoMissLimit(Integer controllerEchoMissLimit) {
    this.controllerEchoMissLimit = controllerEchoMissLimit;
  }

  public SeAgentProperties controllerEchoRpcAggressiveTimeout(Integer controllerEchoRpcAggressiveTimeout) {
    this.controllerEchoRpcAggressiveTimeout = controllerEchoRpcAggressiveTimeout;
    return this;
  }

   /**
   * Aggressive Timeout used for se health check.
   * @return controllerEchoRpcAggressiveTimeout
  **/
  @Schema(description = "Aggressive Timeout used for se health check.")
  public Integer getControllerEchoRpcAggressiveTimeout() {
    return controllerEchoRpcAggressiveTimeout;
  }

  public void setControllerEchoRpcAggressiveTimeout(Integer controllerEchoRpcAggressiveTimeout) {
    this.controllerEchoRpcAggressiveTimeout = controllerEchoRpcAggressiveTimeout;
  }

  public SeAgentProperties controllerEchoRpcTimeout(Integer controllerEchoRpcTimeout) {
    this.controllerEchoRpcTimeout = controllerEchoRpcTimeout;
    return this;
  }

   /**
   * Timeout used for se health check.
   * @return controllerEchoRpcTimeout
  **/
  @Schema(description = "Timeout used for se health check.")
  public Integer getControllerEchoRpcTimeout() {
    return controllerEchoRpcTimeout;
  }

  public void setControllerEchoRpcTimeout(Integer controllerEchoRpcTimeout) {
    this.controllerEchoRpcTimeout = controllerEchoRpcTimeout;
  }

  public SeAgentProperties controllerHeartbeatMissLimit(Integer controllerHeartbeatMissLimit) {
    this.controllerHeartbeatMissLimit = controllerHeartbeatMissLimit;
    return this;
  }

   /**
   *  Allowed values are 1-20.
   * @return controllerHeartbeatMissLimit
  **/
  @Schema(description = " Allowed values are 1-20.")
  public Integer getControllerHeartbeatMissLimit() {
    return controllerHeartbeatMissLimit;
  }

  public void setControllerHeartbeatMissLimit(Integer controllerHeartbeatMissLimit) {
    this.controllerHeartbeatMissLimit = controllerHeartbeatMissLimit;
  }

  public SeAgentProperties controllerHeartbeatTimeoutSec(Integer controllerHeartbeatTimeoutSec) {
    this.controllerHeartbeatTimeoutSec = controllerHeartbeatTimeoutSec;
    return this;
  }

   /**
   *  Allowed values are 1-60.
   * @return controllerHeartbeatTimeoutSec
  **/
  @Schema(description = " Allowed values are 1-60.")
  public Integer getControllerHeartbeatTimeoutSec() {
    return controllerHeartbeatTimeoutSec;
  }

  public void setControllerHeartbeatTimeoutSec(Integer controllerHeartbeatTimeoutSec) {
    this.controllerHeartbeatTimeoutSec = controllerHeartbeatTimeoutSec;
  }

  public SeAgentProperties controllerRegistrationTimeoutSec(Integer controllerRegistrationTimeoutSec) {
    this.controllerRegistrationTimeoutSec = controllerRegistrationTimeoutSec;
    return this;
  }

   /**
   * Number of controller_registration_timeout_sec.
   * @return controllerRegistrationTimeoutSec
  **/
  @Schema(description = "Number of controller_registration_timeout_sec.")
  public Integer getControllerRegistrationTimeoutSec() {
    return controllerRegistrationTimeoutSec;
  }

  public void setControllerRegistrationTimeoutSec(Integer controllerRegistrationTimeoutSec) {
    this.controllerRegistrationTimeoutSec = controllerRegistrationTimeoutSec;
  }

  public SeAgentProperties controllerRpcTimeout(Integer controllerRpcTimeout) {
    this.controllerRpcTimeout = controllerRpcTimeout;
    return this;
  }

   /**
   * Number of controller_rpc_timeout.
   * @return controllerRpcTimeout
  **/
  @Schema(description = "Number of controller_rpc_timeout.")
  public Integer getControllerRpcTimeout() {
    return controllerRpcTimeout;
  }

  public void setControllerRpcTimeout(Integer controllerRpcTimeout) {
    this.controllerRpcTimeout = controllerRpcTimeout;
  }

  public SeAgentProperties cpustatsInterval(Integer cpustatsInterval) {
    this.cpustatsInterval = cpustatsInterval;
    return this;
  }

   /**
   * Number of cpustats_interval.
   * @return cpustatsInterval
  **/
  @Schema(description = "Number of cpustats_interval.")
  public Integer getCpustatsInterval() {
    return cpustatsInterval;
  }

  public void setCpustatsInterval(Integer cpustatsInterval) {
    this.cpustatsInterval = cpustatsInterval;
  }

  public SeAgentProperties ctrlRegPendingMaxWaitTime(Integer ctrlRegPendingMaxWaitTime) {
    this.ctrlRegPendingMaxWaitTime = ctrlRegPendingMaxWaitTime;
    return this;
  }

   /**
   * Max time to wait for ctrl registration before assert. Allowed values are 1-1000.
   * @return ctrlRegPendingMaxWaitTime
  **/
  @Schema(description = "Max time to wait for ctrl registration before assert. Allowed values are 1-1000.")
  public Integer getCtrlRegPendingMaxWaitTime() {
    return ctrlRegPendingMaxWaitTime;
  }

  public void setCtrlRegPendingMaxWaitTime(Integer ctrlRegPendingMaxWaitTime) {
    this.ctrlRegPendingMaxWaitTime = ctrlRegPendingMaxWaitTime;
  }

  public SeAgentProperties debugMode(Boolean debugMode) {
    this.debugMode = debugMode;
    return this;
  }

   /**
   * Placeholder for description of property debug_mode of obj type SeAgentProperties field type str  type boolean
   * @return debugMode
  **/
  @Schema(description = "Placeholder for description of property debug_mode of obj type SeAgentProperties field type str  type boolean")
  public Boolean isDebugMode() {
    return debugMode;
  }

  public void setDebugMode(Boolean debugMode) {
    this.debugMode = debugMode;
  }

  public SeAgentProperties dpAggressiveDeqIntervalMsec(Integer dpAggressiveDeqIntervalMsec) {
    this.dpAggressiveDeqIntervalMsec = dpAggressiveDeqIntervalMsec;
    return this;
  }

   /**
   *  Allowed values are 1-1000.
   * @return dpAggressiveDeqIntervalMsec
  **/
  @Schema(description = " Allowed values are 1-1000.")
  public Integer getDpAggressiveDeqIntervalMsec() {
    return dpAggressiveDeqIntervalMsec;
  }

  public void setDpAggressiveDeqIntervalMsec(Integer dpAggressiveDeqIntervalMsec) {
    this.dpAggressiveDeqIntervalMsec = dpAggressiveDeqIntervalMsec;
  }

  public SeAgentProperties dpAggressiveEnqIntervalMsec(Integer dpAggressiveEnqIntervalMsec) {
    this.dpAggressiveEnqIntervalMsec = dpAggressiveEnqIntervalMsec;
    return this;
  }

   /**
   *  Allowed values are 1-1000.
   * @return dpAggressiveEnqIntervalMsec
  **/
  @Schema(description = " Allowed values are 1-1000.")
  public Integer getDpAggressiveEnqIntervalMsec() {
    return dpAggressiveEnqIntervalMsec;
  }

  public void setDpAggressiveEnqIntervalMsec(Integer dpAggressiveEnqIntervalMsec) {
    this.dpAggressiveEnqIntervalMsec = dpAggressiveEnqIntervalMsec;
  }

  public SeAgentProperties dpBatchSize(Integer dpBatchSize) {
    this.dpBatchSize = dpBatchSize;
    return this;
  }

   /**
   * Number of dp_batch_size.
   * @return dpBatchSize
  **/
  @Schema(description = "Number of dp_batch_size.")
  public Integer getDpBatchSize() {
    return dpBatchSize;
  }

  public void setDpBatchSize(Integer dpBatchSize) {
    this.dpBatchSize = dpBatchSize;
  }

  public SeAgentProperties dpDeqIntervalMsec(Integer dpDeqIntervalMsec) {
    this.dpDeqIntervalMsec = dpDeqIntervalMsec;
    return this;
  }

   /**
   *  Allowed values are 1-1000.
   * @return dpDeqIntervalMsec
  **/
  @Schema(description = " Allowed values are 1-1000.")
  public Integer getDpDeqIntervalMsec() {
    return dpDeqIntervalMsec;
  }

  public void setDpDeqIntervalMsec(Integer dpDeqIntervalMsec) {
    this.dpDeqIntervalMsec = dpDeqIntervalMsec;
  }

  public SeAgentProperties dpEnqIntervalMsec(Integer dpEnqIntervalMsec) {
    this.dpEnqIntervalMsec = dpEnqIntervalMsec;
    return this;
  }

   /**
   *  Allowed values are 1-1000.
   * @return dpEnqIntervalMsec
  **/
  @Schema(description = " Allowed values are 1-1000.")
  public Integer getDpEnqIntervalMsec() {
    return dpEnqIntervalMsec;
  }

  public void setDpEnqIntervalMsec(Integer dpEnqIntervalMsec) {
    this.dpEnqIntervalMsec = dpEnqIntervalMsec;
  }

  public SeAgentProperties dpMaxWaitRspTimeSec(Integer dpMaxWaitRspTimeSec) {
    this.dpMaxWaitRspTimeSec = dpMaxWaitRspTimeSec;
    return this;
  }

   /**
   * Number of dp_max_wait_rsp_time_sec.
   * @return dpMaxWaitRspTimeSec
  **/
  @Schema(description = "Number of dp_max_wait_rsp_time_sec.")
  public Integer getDpMaxWaitRspTimeSec() {
    return dpMaxWaitRspTimeSec;
  }

  public void setDpMaxWaitRspTimeSec(Integer dpMaxWaitRspTimeSec) {
    this.dpMaxWaitRspTimeSec = dpMaxWaitRspTimeSec;
  }

  public SeAgentProperties dpRegPendingMaxWaitTime(Integer dpRegPendingMaxWaitTime) {
    this.dpRegPendingMaxWaitTime = dpRegPendingMaxWaitTime;
    return this;
  }

   /**
   * Max time to wait for dp registration before assert.
   * @return dpRegPendingMaxWaitTime
  **/
  @Schema(description = "Max time to wait for dp registration before assert.")
  public Integer getDpRegPendingMaxWaitTime() {
    return dpRegPendingMaxWaitTime;
  }

  public void setDpRegPendingMaxWaitTime(Integer dpRegPendingMaxWaitTime) {
    this.dpRegPendingMaxWaitTime = dpRegPendingMaxWaitTime;
  }

  public SeAgentProperties headlessTimeoutSec(Integer headlessTimeoutSec) {
    this.headlessTimeoutSec = headlessTimeoutSec;
    return this;
  }

   /**
   * Number of headless_timeout_sec.
   * @return headlessTimeoutSec
  **/
  @Schema(description = "Number of headless_timeout_sec.")
  public Integer getHeadlessTimeoutSec() {
    return headlessTimeoutSec;
  }

  public void setHeadlessTimeoutSec(Integer headlessTimeoutSec) {
    this.headlessTimeoutSec = headlessTimeoutSec;
  }

  public SeAgentProperties ignoreDockerMacChange(Boolean ignoreDockerMacChange) {
    this.ignoreDockerMacChange = ignoreDockerMacChange;
    return this;
  }

   /**
   * Placeholder for description of property ignore_docker_mac_change of obj type SeAgentProperties field type str  type boolean
   * @return ignoreDockerMacChange
  **/
  @Schema(description = "Placeholder for description of property ignore_docker_mac_change of obj type SeAgentProperties field type str  type boolean")
  public Boolean isIgnoreDockerMacChange() {
    return ignoreDockerMacChange;
  }

  public void setIgnoreDockerMacChange(Boolean ignoreDockerMacChange) {
    this.ignoreDockerMacChange = ignoreDockerMacChange;
  }

  public SeAgentProperties nsHelperDeqIntervalMsec(Integer nsHelperDeqIntervalMsec) {
    this.nsHelperDeqIntervalMsec = nsHelperDeqIntervalMsec;
    return this;
  }

   /**
   * Dequeue interval for receive queue from NS HELPER. Allowed values are 1-1000. Field introduced in 17.2.13, 18.1.3, 18.2.1.
   * @return nsHelperDeqIntervalMsec
  **/
  @Schema(description = "Dequeue interval for receive queue from NS HELPER. Allowed values are 1-1000. Field introduced in 17.2.13, 18.1.3, 18.2.1.")
  public Integer getNsHelperDeqIntervalMsec() {
    return nsHelperDeqIntervalMsec;
  }

  public void setNsHelperDeqIntervalMsec(Integer nsHelperDeqIntervalMsec) {
    this.nsHelperDeqIntervalMsec = nsHelperDeqIntervalMsec;
  }

  public SeAgentProperties sdbFlushInterval(Integer sdbFlushInterval) {
    this.sdbFlushInterval = sdbFlushInterval;
    return this;
  }

   /**
   * SDB pipeline flush interval. Allowed values are 1-10000.
   * @return sdbFlushInterval
  **/
  @Schema(description = "SDB pipeline flush interval. Allowed values are 1-10000.")
  public Integer getSdbFlushInterval() {
    return sdbFlushInterval;
  }

  public void setSdbFlushInterval(Integer sdbFlushInterval) {
    this.sdbFlushInterval = sdbFlushInterval;
  }

  public SeAgentProperties sdbPipelineSize(Integer sdbPipelineSize) {
    this.sdbPipelineSize = sdbPipelineSize;
    return this;
  }

   /**
   * SDB pipeline size. Allowed values are 1-10000.
   * @return sdbPipelineSize
  **/
  @Schema(description = "SDB pipeline size. Allowed values are 1-10000.")
  public Integer getSdbPipelineSize() {
    return sdbPipelineSize;
  }

  public void setSdbPipelineSize(Integer sdbPipelineSize) {
    this.sdbPipelineSize = sdbPipelineSize;
  }

  public SeAgentProperties sdbScanCount(Integer sdbScanCount) {
    this.sdbScanCount = sdbScanCount;
    return this;
  }

   /**
   * SDB scan count. Allowed values are 1-1000.
   * @return sdbScanCount
  **/
  @Schema(description = "SDB scan count. Allowed values are 1-1000.")
  public Integer getSdbScanCount() {
    return sdbScanCount;
  }

  public void setSdbScanCount(Integer sdbScanCount) {
    this.sdbScanCount = sdbScanCount;
  }

  public SeAgentProperties seGrpChangeDisruptive(Boolean seGrpChangeDisruptive) {
    this.seGrpChangeDisruptive = seGrpChangeDisruptive;
    return this;
  }

   /**
   * Internal flag used to decide if SE restart is needed,when the se-group is changed. Field introduced in 18.2.3.
   * @return seGrpChangeDisruptive
  **/
  @Schema(description = "Internal flag used to decide if SE restart is needed,when the se-group is changed. Field introduced in 18.2.3.")
  public Boolean isSeGrpChangeDisruptive() {
    return seGrpChangeDisruptive;
  }

  public void setSeGrpChangeDisruptive(Boolean seGrpChangeDisruptive) {
    this.seGrpChangeDisruptive = seGrpChangeDisruptive;
  }

  public SeAgentProperties seagentStatecacheProperties(SeAgentStateCacheProperties seagentStatecacheProperties) {
    this.seagentStatecacheProperties = seagentStatecacheProperties;
    return this;
  }

   /**
   * Get seagentStatecacheProperties
   * @return seagentStatecacheProperties
  **/
  @Schema(description = "")
  public SeAgentStateCacheProperties getSeagentStatecacheProperties() {
    return seagentStatecacheProperties;
  }

  public void setSeagentStatecacheProperties(SeAgentStateCacheProperties seagentStatecacheProperties) {
    this.seagentStatecacheProperties = seagentStatecacheProperties;
  }

  public SeAgentProperties sendSeReadyTimeout(Integer sendSeReadyTimeout) {
    this.sendSeReadyTimeout = sendSeReadyTimeout;
    return this;
  }

   /**
   * Timeout for sending SE_READY without NS HELPER registration completion. Allowed values are 10-600. Field introduced in 17.2.13, 18.1.3, 18.2.1.
   * @return sendSeReadyTimeout
  **/
  @Schema(description = "Timeout for sending SE_READY without NS HELPER registration completion. Allowed values are 10-600. Field introduced in 17.2.13, 18.1.3, 18.2.1.")
  public Integer getSendSeReadyTimeout() {
    return sendSeReadyTimeout;
  }

  public void setSendSeReadyTimeout(Integer sendSeReadyTimeout) {
    this.sendSeReadyTimeout = sendSeReadyTimeout;
  }

  public SeAgentProperties statesFlushInterval(Integer statesFlushInterval) {
    this.statesFlushInterval = statesFlushInterval;
    return this;
  }

   /**
   * Interval for update of operational states to controller. Allowed values are 1-10000. Field introduced in 18.2.1, 17.2.14, 18.1.5.
   * @return statesFlushInterval
  **/
  @Schema(description = "Interval for update of operational states to controller. Allowed values are 1-10000. Field introduced in 18.2.1, 17.2.14, 18.1.5.")
  public Integer getStatesFlushInterval() {
    return statesFlushInterval;
  }

  public void setStatesFlushInterval(Integer statesFlushInterval) {
    this.statesFlushInterval = statesFlushInterval;
  }

  public SeAgentProperties vnicDhcpIpCheckInterval(Integer vnicDhcpIpCheckInterval) {
    this.vnicDhcpIpCheckInterval = vnicDhcpIpCheckInterval;
    return this;
  }

   /**
   * DHCP ip check interval. Allowed values are 1-1000.
   * @return vnicDhcpIpCheckInterval
  **/
  @Schema(description = "DHCP ip check interval. Allowed values are 1-1000.")
  public Integer getVnicDhcpIpCheckInterval() {
    return vnicDhcpIpCheckInterval;
  }

  public void setVnicDhcpIpCheckInterval(Integer vnicDhcpIpCheckInterval) {
    this.vnicDhcpIpCheckInterval = vnicDhcpIpCheckInterval;
  }

  public SeAgentProperties vnicDhcpIpMaxRetries(Integer vnicDhcpIpMaxRetries) {
    this.vnicDhcpIpMaxRetries = vnicDhcpIpMaxRetries;
    return this;
  }

   /**
   * DHCP ip max retries.
   * @return vnicDhcpIpMaxRetries
  **/
  @Schema(description = "DHCP ip max retries.")
  public Integer getVnicDhcpIpMaxRetries() {
    return vnicDhcpIpMaxRetries;
  }

  public void setVnicDhcpIpMaxRetries(Integer vnicDhcpIpMaxRetries) {
    this.vnicDhcpIpMaxRetries = vnicDhcpIpMaxRetries;
  }

  public SeAgentProperties vnicIpDeleteInterval(Integer vnicIpDeleteInterval) {
    this.vnicIpDeleteInterval = vnicIpDeleteInterval;
    return this;
  }

   /**
   * wait interval before deleting IP.
   * @return vnicIpDeleteInterval
  **/
  @Schema(description = "wait interval before deleting IP.")
  public Integer getVnicIpDeleteInterval() {
    return vnicIpDeleteInterval;
  }

  public void setVnicIpDeleteInterval(Integer vnicIpDeleteInterval) {
    this.vnicIpDeleteInterval = vnicIpDeleteInterval;
  }

  public SeAgentProperties vnicProbeInterval(Integer vnicProbeInterval) {
    this.vnicProbeInterval = vnicProbeInterval;
    return this;
  }

   /**
   * Probe vnic interval.
   * @return vnicProbeInterval
  **/
  @Schema(description = "Probe vnic interval.")
  public Integer getVnicProbeInterval() {
    return vnicProbeInterval;
  }

  public void setVnicProbeInterval(Integer vnicProbeInterval) {
    this.vnicProbeInterval = vnicProbeInterval;
  }

  public SeAgentProperties vnicRpcRetryInterval(Integer vnicRpcRetryInterval) {
    this.vnicRpcRetryInterval = vnicRpcRetryInterval;
    return this;
  }

   /**
   * Time interval for retrying the failed VNIC RPC requests. Field introduced in 18.2.6.
   * @return vnicRpcRetryInterval
  **/
  @Schema(description = "Time interval for retrying the failed VNIC RPC requests. Field introduced in 18.2.6.")
  public Integer getVnicRpcRetryInterval() {
    return vnicRpcRetryInterval;
  }

  public void setVnicRpcRetryInterval(Integer vnicRpcRetryInterval) {
    this.vnicRpcRetryInterval = vnicRpcRetryInterval;
  }

  public SeAgentProperties vnicdbCmdHistorySize(Integer vnicdbCmdHistorySize) {
    this.vnicdbCmdHistorySize = vnicdbCmdHistorySize;
    return this;
  }

   /**
   * Size of vnicdb command history. Allowed values are 0-65535. Field introduced in 18.2.3.
   * @return vnicdbCmdHistorySize
  **/
  @Schema(description = "Size of vnicdb command history. Allowed values are 0-65535. Field introduced in 18.2.3.")
  public Integer getVnicdbCmdHistorySize() {
    return vnicdbCmdHistorySize;
  }

  public void setVnicdbCmdHistorySize(Integer vnicdbCmdHistorySize) {
    this.vnicdbCmdHistorySize = vnicdbCmdHistorySize;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SeAgentProperties seAgentProperties = (SeAgentProperties) o;
    return Objects.equals(this.controllerEchoMissAggressiveLimit, seAgentProperties.controllerEchoMissAggressiveLimit) &&
        Objects.equals(this.controllerEchoMissLimit, seAgentProperties.controllerEchoMissLimit) &&
        Objects.equals(this.controllerEchoRpcAggressiveTimeout, seAgentProperties.controllerEchoRpcAggressiveTimeout) &&
        Objects.equals(this.controllerEchoRpcTimeout, seAgentProperties.controllerEchoRpcTimeout) &&
        Objects.equals(this.controllerHeartbeatMissLimit, seAgentProperties.controllerHeartbeatMissLimit) &&
        Objects.equals(this.controllerHeartbeatTimeoutSec, seAgentProperties.controllerHeartbeatTimeoutSec) &&
        Objects.equals(this.controllerRegistrationTimeoutSec, seAgentProperties.controllerRegistrationTimeoutSec) &&
        Objects.equals(this.controllerRpcTimeout, seAgentProperties.controllerRpcTimeout) &&
        Objects.equals(this.cpustatsInterval, seAgentProperties.cpustatsInterval) &&
        Objects.equals(this.ctrlRegPendingMaxWaitTime, seAgentProperties.ctrlRegPendingMaxWaitTime) &&
        Objects.equals(this.debugMode, seAgentProperties.debugMode) &&
        Objects.equals(this.dpAggressiveDeqIntervalMsec, seAgentProperties.dpAggressiveDeqIntervalMsec) &&
        Objects.equals(this.dpAggressiveEnqIntervalMsec, seAgentProperties.dpAggressiveEnqIntervalMsec) &&
        Objects.equals(this.dpBatchSize, seAgentProperties.dpBatchSize) &&
        Objects.equals(this.dpDeqIntervalMsec, seAgentProperties.dpDeqIntervalMsec) &&
        Objects.equals(this.dpEnqIntervalMsec, seAgentProperties.dpEnqIntervalMsec) &&
        Objects.equals(this.dpMaxWaitRspTimeSec, seAgentProperties.dpMaxWaitRspTimeSec) &&
        Objects.equals(this.dpRegPendingMaxWaitTime, seAgentProperties.dpRegPendingMaxWaitTime) &&
        Objects.equals(this.headlessTimeoutSec, seAgentProperties.headlessTimeoutSec) &&
        Objects.equals(this.ignoreDockerMacChange, seAgentProperties.ignoreDockerMacChange) &&
        Objects.equals(this.nsHelperDeqIntervalMsec, seAgentProperties.nsHelperDeqIntervalMsec) &&
        Objects.equals(this.sdbFlushInterval, seAgentProperties.sdbFlushInterval) &&
        Objects.equals(this.sdbPipelineSize, seAgentProperties.sdbPipelineSize) &&
        Objects.equals(this.sdbScanCount, seAgentProperties.sdbScanCount) &&
        Objects.equals(this.seGrpChangeDisruptive, seAgentProperties.seGrpChangeDisruptive) &&
        Objects.equals(this.seagentStatecacheProperties, seAgentProperties.seagentStatecacheProperties) &&
        Objects.equals(this.sendSeReadyTimeout, seAgentProperties.sendSeReadyTimeout) &&
        Objects.equals(this.statesFlushInterval, seAgentProperties.statesFlushInterval) &&
        Objects.equals(this.vnicDhcpIpCheckInterval, seAgentProperties.vnicDhcpIpCheckInterval) &&
        Objects.equals(this.vnicDhcpIpMaxRetries, seAgentProperties.vnicDhcpIpMaxRetries) &&
        Objects.equals(this.vnicIpDeleteInterval, seAgentProperties.vnicIpDeleteInterval) &&
        Objects.equals(this.vnicProbeInterval, seAgentProperties.vnicProbeInterval) &&
        Objects.equals(this.vnicRpcRetryInterval, seAgentProperties.vnicRpcRetryInterval) &&
        Objects.equals(this.vnicdbCmdHistorySize, seAgentProperties.vnicdbCmdHistorySize);
  }

  @Override
  public int hashCode() {
    return Objects.hash(controllerEchoMissAggressiveLimit, controllerEchoMissLimit, controllerEchoRpcAggressiveTimeout, controllerEchoRpcTimeout, controllerHeartbeatMissLimit, controllerHeartbeatTimeoutSec, controllerRegistrationTimeoutSec, controllerRpcTimeout, cpustatsInterval, ctrlRegPendingMaxWaitTime, debugMode, dpAggressiveDeqIntervalMsec, dpAggressiveEnqIntervalMsec, dpBatchSize, dpDeqIntervalMsec, dpEnqIntervalMsec, dpMaxWaitRspTimeSec, dpRegPendingMaxWaitTime, headlessTimeoutSec, ignoreDockerMacChange, nsHelperDeqIntervalMsec, sdbFlushInterval, sdbPipelineSize, sdbScanCount, seGrpChangeDisruptive, seagentStatecacheProperties, sendSeReadyTimeout, statesFlushInterval, vnicDhcpIpCheckInterval, vnicDhcpIpMaxRetries, vnicIpDeleteInterval, vnicProbeInterval, vnicRpcRetryInterval, vnicdbCmdHistorySize);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SeAgentProperties {\n");
    
    sb.append("    controllerEchoMissAggressiveLimit: ").append(toIndentedString(controllerEchoMissAggressiveLimit)).append("\n");
    sb.append("    controllerEchoMissLimit: ").append(toIndentedString(controllerEchoMissLimit)).append("\n");
    sb.append("    controllerEchoRpcAggressiveTimeout: ").append(toIndentedString(controllerEchoRpcAggressiveTimeout)).append("\n");
    sb.append("    controllerEchoRpcTimeout: ").append(toIndentedString(controllerEchoRpcTimeout)).append("\n");
    sb.append("    controllerHeartbeatMissLimit: ").append(toIndentedString(controllerHeartbeatMissLimit)).append("\n");
    sb.append("    controllerHeartbeatTimeoutSec: ").append(toIndentedString(controllerHeartbeatTimeoutSec)).append("\n");
    sb.append("    controllerRegistrationTimeoutSec: ").append(toIndentedString(controllerRegistrationTimeoutSec)).append("\n");
    sb.append("    controllerRpcTimeout: ").append(toIndentedString(controllerRpcTimeout)).append("\n");
    sb.append("    cpustatsInterval: ").append(toIndentedString(cpustatsInterval)).append("\n");
    sb.append("    ctrlRegPendingMaxWaitTime: ").append(toIndentedString(ctrlRegPendingMaxWaitTime)).append("\n");
    sb.append("    debugMode: ").append(toIndentedString(debugMode)).append("\n");
    sb.append("    dpAggressiveDeqIntervalMsec: ").append(toIndentedString(dpAggressiveDeqIntervalMsec)).append("\n");
    sb.append("    dpAggressiveEnqIntervalMsec: ").append(toIndentedString(dpAggressiveEnqIntervalMsec)).append("\n");
    sb.append("    dpBatchSize: ").append(toIndentedString(dpBatchSize)).append("\n");
    sb.append("    dpDeqIntervalMsec: ").append(toIndentedString(dpDeqIntervalMsec)).append("\n");
    sb.append("    dpEnqIntervalMsec: ").append(toIndentedString(dpEnqIntervalMsec)).append("\n");
    sb.append("    dpMaxWaitRspTimeSec: ").append(toIndentedString(dpMaxWaitRspTimeSec)).append("\n");
    sb.append("    dpRegPendingMaxWaitTime: ").append(toIndentedString(dpRegPendingMaxWaitTime)).append("\n");
    sb.append("    headlessTimeoutSec: ").append(toIndentedString(headlessTimeoutSec)).append("\n");
    sb.append("    ignoreDockerMacChange: ").append(toIndentedString(ignoreDockerMacChange)).append("\n");
    sb.append("    nsHelperDeqIntervalMsec: ").append(toIndentedString(nsHelperDeqIntervalMsec)).append("\n");
    sb.append("    sdbFlushInterval: ").append(toIndentedString(sdbFlushInterval)).append("\n");
    sb.append("    sdbPipelineSize: ").append(toIndentedString(sdbPipelineSize)).append("\n");
    sb.append("    sdbScanCount: ").append(toIndentedString(sdbScanCount)).append("\n");
    sb.append("    seGrpChangeDisruptive: ").append(toIndentedString(seGrpChangeDisruptive)).append("\n");
    sb.append("    seagentStatecacheProperties: ").append(toIndentedString(seagentStatecacheProperties)).append("\n");
    sb.append("    sendSeReadyTimeout: ").append(toIndentedString(sendSeReadyTimeout)).append("\n");
    sb.append("    statesFlushInterval: ").append(toIndentedString(statesFlushInterval)).append("\n");
    sb.append("    vnicDhcpIpCheckInterval: ").append(toIndentedString(vnicDhcpIpCheckInterval)).append("\n");
    sb.append("    vnicDhcpIpMaxRetries: ").append(toIndentedString(vnicDhcpIpMaxRetries)).append("\n");
    sb.append("    vnicIpDeleteInterval: ").append(toIndentedString(vnicIpDeleteInterval)).append("\n");
    sb.append("    vnicProbeInterval: ").append(toIndentedString(vnicProbeInterval)).append("\n");
    sb.append("    vnicRpcRetryInterval: ").append(toIndentedString(vnicRpcRetryInterval)).append("\n");
    sb.append("    vnicdbCmdHistorySize: ").append(toIndentedString(vnicdbCmdHistorySize)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
