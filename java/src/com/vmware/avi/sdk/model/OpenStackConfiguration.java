/*
 * Avi avi_global_spec Object API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 20.1.1
 * Contact: support@avinetworks.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.vmware.avi.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.vmware.avi.sdk.model.OpenStackHypervisorProperties;
import com.vmware.avi.sdk.model.OpenStackRoleMapping;
import com.vmware.avi.sdk.model.OpenStackVipNetwork;
import com.vmware.avi.sdk.model.Property;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;
/**
 * OpenStackConfiguration
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-03-12T12:27:26.755+05:30[Asia/Kolkata]")
public class OpenStackConfiguration {
  @JsonProperty("admin_tenant")
  private String adminTenant = null;

  @JsonProperty("admin_tenant_uuid")
  private String adminTenantUuid = null;

  @JsonProperty("allowed_address_pairs")
  private Boolean allowedAddressPairs = true;

  @JsonProperty("anti_affinity")
  private Boolean antiAffinity = true;

  @JsonProperty("auth_url")
  private String authUrl = null;

  @JsonProperty("config_drive")
  private Boolean configDrive = true;

  @JsonProperty("contrail_disable_policy")
  private Boolean contrailDisablePolicy = null;

  @JsonProperty("contrail_endpoint")
  private String contrailEndpoint = null;

  @JsonProperty("contrail_plugin")
  private Boolean contrailPlugin = null;

  @JsonProperty("custom_se_image_properties")
  private List<Property> customSeImageProperties = null;

  @JsonProperty("external_networks")
  private Boolean externalNetworks = null;

  @JsonProperty("free_floatingips")
  private Boolean freeFloatingips = null;

  @JsonProperty("hypervisor")
  private String hypervisor = "KVM";

  @JsonProperty("hypervisor_properties")
  private List<OpenStackHypervisorProperties> hypervisorProperties = null;

  @JsonProperty("img_format")
  private String imgFormat = "OS_IMG_FMT_AUTO";

  @JsonProperty("import_keystone_tenants")
  private Boolean importKeystoneTenants = true;

  @JsonProperty("insecure")
  private Boolean insecure = true;

  @JsonProperty("intf_sec_ips")
  private Boolean intfSecIps = null;

  @JsonProperty("keystone_host")
  private String keystoneHost = null;

  @JsonProperty("map_admin_to_cloudadmin")
  private Boolean mapAdminToCloudadmin = null;

  @JsonProperty("mgmt_network_name")
  private String mgmtNetworkName = null;

  @JsonProperty("mgmt_network_uuid")
  private String mgmtNetworkUuid = null;

  @JsonProperty("name_owner")
  private Boolean nameOwner = true;

  @JsonProperty("neutron_rbac")
  private Boolean neutronRbac = true;

  @JsonProperty("nuage_organization")
  private String nuageOrganization = null;

  @JsonProperty("nuage_password")
  private String nuagePassword = null;

  @JsonProperty("nuage_port")
  private Integer nuagePort = 8443;

  @JsonProperty("nuage_username")
  private String nuageUsername = null;

  @JsonProperty("nuage_virtualip")
  private Boolean nuageVirtualip = null;

  @JsonProperty("nuage_vsd_host")
  private String nuageVsdHost = null;

  @JsonProperty("password")
  private String password = null;

  @JsonProperty("port_security")
  private Boolean portSecurity = null;

  @JsonProperty("privilege")
  private String privilege = null;

  @JsonProperty("prov_name")
  private List<String> provName = null;

  @JsonProperty("provider_vip_networks")
  private List<OpenStackVipNetwork> providerVipNetworks = null;

  @JsonProperty("region")
  private String region = null;

  @JsonProperty("role_mapping")
  private List<OpenStackRoleMapping> roleMapping = null;

  @JsonProperty("se_group_ref")
  private String seGroupRef = null;

  @JsonProperty("security_groups")
  private Boolean securityGroups = true;

  @JsonProperty("tenant_se")
  private Boolean tenantSe = true;

  @JsonProperty("usable_network_uuids")
  private List<String> usableNetworkUuids = null;

  @JsonProperty("use_admin_url")
  private Boolean useAdminUrl = true;

  @JsonProperty("use_internal_endpoints")
  private Boolean useInternalEndpoints = null;

  @JsonProperty("use_keystone_auth")
  private Boolean useKeystoneAuth = true;

  @JsonProperty("use_nuagevip")
  private Boolean useNuagevip = null;

  @JsonProperty("username")
  private String username = null;

  @JsonProperty("wildcard_access")
  private Boolean wildcardAccess = null;

  public OpenStackConfiguration adminTenant(String adminTenant) {
    this.adminTenant = adminTenant;
    return this;
  }

   /**
   * OpenStack admin tenant (or project) information. For Keystone v3, provide the project information in project@domain format. Domain need not be specified if the project belongs to the &#x27;Default&#x27; domain.
   * @return adminTenant
  **/
  @Schema(required = true, description = "OpenStack admin tenant (or project) information. For Keystone v3, provide the project information in project@domain format. Domain need not be specified if the project belongs to the 'Default' domain.")
  public String getAdminTenant() {
    return adminTenant;
  }

  public void setAdminTenant(String adminTenant) {
    this.adminTenant = adminTenant;
  }

  public OpenStackConfiguration adminTenantUuid(String adminTenantUuid) {
    this.adminTenantUuid = adminTenantUuid;
    return this;
  }

   /**
   * admin-tenant&#x27;s UUID in OpenStack.
   * @return adminTenantUuid
  **/
  @Schema(description = "admin-tenant's UUID in OpenStack.")
  public String getAdminTenantUuid() {
    return adminTenantUuid;
  }

  public void setAdminTenantUuid(String adminTenantUuid) {
    this.adminTenantUuid = adminTenantUuid;
  }

  public OpenStackConfiguration allowedAddressPairs(Boolean allowedAddressPairs) {
    this.allowedAddressPairs = allowedAddressPairs;
    return this;
  }

   /**
   * If false, allowed-address-pairs extension will not be used. .
   * @return allowedAddressPairs
  **/
  @Schema(description = "If false, allowed-address-pairs extension will not be used. .")
  public Boolean isAllowedAddressPairs() {
    return allowedAddressPairs;
  }

  public void setAllowedAddressPairs(Boolean allowedAddressPairs) {
    this.allowedAddressPairs = allowedAddressPairs;
  }

  public OpenStackConfiguration antiAffinity(Boolean antiAffinity) {
    this.antiAffinity = antiAffinity;
    return this;
  }

   /**
   * If true, an anti-affinity policy will be applied to all SEs of a SE-Group, else no such policy will be applied.
   * @return antiAffinity
  **/
  @Schema(description = "If true, an anti-affinity policy will be applied to all SEs of a SE-Group, else no such policy will be applied.")
  public Boolean isAntiAffinity() {
    return antiAffinity;
  }

  public void setAntiAffinity(Boolean antiAffinity) {
    this.antiAffinity = antiAffinity;
  }

  public OpenStackConfiguration authUrl(String authUrl) {
    this.authUrl = authUrl;
    return this;
  }

   /**
   * Auth URL for connecting to keystone. If this is specified, any value provided for keystone_host is ignored.
   * @return authUrl
  **/
  @Schema(description = "Auth URL for connecting to keystone. If this is specified, any value provided for keystone_host is ignored.")
  public String getAuthUrl() {
    return authUrl;
  }

  public void setAuthUrl(String authUrl) {
    this.authUrl = authUrl;
  }

  public OpenStackConfiguration configDrive(Boolean configDrive) {
    this.configDrive = configDrive;
    return this;
  }

   /**
   * If false, metadata service will be used instead of  config-drive functionality to retrieve SE VM metadata.
   * @return configDrive
  **/
  @Schema(description = "If false, metadata service will be used instead of  config-drive functionality to retrieve SE VM metadata.")
  public Boolean isConfigDrive() {
    return configDrive;
  }

  public void setConfigDrive(Boolean configDrive) {
    this.configDrive = configDrive;
  }

  public OpenStackConfiguration contrailDisablePolicy(Boolean contrailDisablePolicy) {
    this.contrailDisablePolicy = contrailDisablePolicy;
    return this;
  }

   /**
   * When set to True, the VIP and Data ports will be programmed to set virtual machine interface disable-policy. Please refer Contrail documentation for more on disable-policy. Field introduced in 18.1.2.
   * @return contrailDisablePolicy
  **/
  @Schema(description = "When set to True, the VIP and Data ports will be programmed to set virtual machine interface disable-policy. Please refer Contrail documentation for more on disable-policy. Field introduced in 18.1.2.")
  public Boolean isContrailDisablePolicy() {
    return contrailDisablePolicy;
  }

  public void setContrailDisablePolicy(Boolean contrailDisablePolicy) {
    this.contrailDisablePolicy = contrailDisablePolicy;
  }

  public OpenStackConfiguration contrailEndpoint(String contrailEndpoint) {
    this.contrailEndpoint = contrailEndpoint;
    return this;
  }

   /**
   * Contrail VNC endpoint url (example http //10.10.10.100 8082). By default, &#x27;http //&#x27; scheme and 8082 port will be used if not provided in the url.
   * @return contrailEndpoint
  **/
  @Schema(description = "Contrail VNC endpoint url (example http //10.10.10.100 8082). By default, 'http //' scheme and 8082 port will be used if not provided in the url.")
  public String getContrailEndpoint() {
    return contrailEndpoint;
  }

  public void setContrailEndpoint(String contrailEndpoint) {
    this.contrailEndpoint = contrailEndpoint;
  }

  public OpenStackConfiguration contrailPlugin(Boolean contrailPlugin) {
    this.contrailPlugin = contrailPlugin;
    return this;
  }

   /**
   * Enable Contrail plugin mode. (deprecated).
   * @return contrailPlugin
  **/
  @Schema(description = "Enable Contrail plugin mode. (deprecated).")
  public Boolean isContrailPlugin() {
    return contrailPlugin;
  }

  public void setContrailPlugin(Boolean contrailPlugin) {
    this.contrailPlugin = contrailPlugin;
  }

  public OpenStackConfiguration customSeImageProperties(List<Property> customSeImageProperties) {
    this.customSeImageProperties = customSeImageProperties;
    return this;
  }

  public OpenStackConfiguration addCustomSeImagePropertiesItem(Property customSeImagePropertiesItem) {
    if (this.customSeImageProperties == null) {
      this.customSeImageProperties = new ArrayList<Property>();
    }
    this.customSeImageProperties.add(customSeImagePropertiesItem);
    return this;
  }

   /**
   * Custom image properties to be set on a Service Engine image. Only hw_vif_multiqueue_enabled property is supported. Other properties will be ignored. Field introduced in 18.2.7, 20.1.1.
   * @return customSeImageProperties
  **/
  @Schema(description = "Custom image properties to be set on a Service Engine image. Only hw_vif_multiqueue_enabled property is supported. Other properties will be ignored. Field introduced in 18.2.7, 20.1.1.")
  public List<Property> getCustomSeImageProperties() {
    return customSeImageProperties;
  }

  public void setCustomSeImageProperties(List<Property> customSeImageProperties) {
    this.customSeImageProperties = customSeImageProperties;
  }

  public OpenStackConfiguration externalNetworks(Boolean externalNetworks) {
    this.externalNetworks = externalNetworks;
    return this;
  }

   /**
   * If True, allow selection of networks marked as &#x27;external&#x27; for management,  vip or data networks.
   * @return externalNetworks
  **/
  @Schema(description = "If True, allow selection of networks marked as 'external' for management,  vip or data networks.")
  public Boolean isExternalNetworks() {
    return externalNetworks;
  }

  public void setExternalNetworks(Boolean externalNetworks) {
    this.externalNetworks = externalNetworks;
  }

  public OpenStackConfiguration freeFloatingips(Boolean freeFloatingips) {
    this.freeFloatingips = freeFloatingips;
    return this;
  }

   /**
   * Free unused floating IPs.
   * @return freeFloatingips
  **/
  @Schema(description = "Free unused floating IPs.")
  public Boolean isFreeFloatingips() {
    return freeFloatingips;
  }

  public void setFreeFloatingips(Boolean freeFloatingips) {
    this.freeFloatingips = freeFloatingips;
  }

  public OpenStackConfiguration hypervisor(String hypervisor) {
    this.hypervisor = hypervisor;
    return this;
  }

   /**
   * Default hypervisor type. Enum options - DEFAULT, VMWARE_ESX, KVM, VMWARE_VSAN, XEN.
   * @return hypervisor
  **/
  @Schema(description = "Default hypervisor type. Enum options - DEFAULT, VMWARE_ESX, KVM, VMWARE_VSAN, XEN.")
  public String getHypervisor() {
    return hypervisor;
  }

  public void setHypervisor(String hypervisor) {
    this.hypervisor = hypervisor;
  }

  public OpenStackConfiguration hypervisorProperties(List<OpenStackHypervisorProperties> hypervisorProperties) {
    this.hypervisorProperties = hypervisorProperties;
    return this;
  }

  public OpenStackConfiguration addHypervisorPropertiesItem(OpenStackHypervisorProperties hypervisorPropertiesItem) {
    if (this.hypervisorProperties == null) {
      this.hypervisorProperties = new ArrayList<OpenStackHypervisorProperties>();
    }
    this.hypervisorProperties.add(hypervisorPropertiesItem);
    return this;
  }

   /**
   * Custom properties per hypervisor type. Field introduced in 17.2.1.
   * @return hypervisorProperties
  **/
  @Schema(description = "Custom properties per hypervisor type. Field introduced in 17.2.1.")
  public List<OpenStackHypervisorProperties> getHypervisorProperties() {
    return hypervisorProperties;
  }

  public void setHypervisorProperties(List<OpenStackHypervisorProperties> hypervisorProperties) {
    this.hypervisorProperties = hypervisorProperties;
  }

  public OpenStackConfiguration imgFormat(String imgFormat) {
    this.imgFormat = imgFormat;
    return this;
  }

   /**
   * If OS_IMG_FMT_RAW, use RAW images else use QCOW2 or streamOptimized/flat VMDK as appropriate. . Enum options - OS_IMG_FMT_AUTO, OS_IMG_FMT_QCOW2, OS_IMG_FMT_VMDK, OS_IMG_FMT_RAW, OS_IMG_FMT_FLAT.
   * @return imgFormat
  **/
  @Schema(description = "If OS_IMG_FMT_RAW, use RAW images else use QCOW2 or streamOptimized/flat VMDK as appropriate. . Enum options - OS_IMG_FMT_AUTO, OS_IMG_FMT_QCOW2, OS_IMG_FMT_VMDK, OS_IMG_FMT_RAW, OS_IMG_FMT_FLAT.")
  public String getImgFormat() {
    return imgFormat;
  }

  public void setImgFormat(String imgFormat) {
    this.imgFormat = imgFormat;
  }

  public OpenStackConfiguration importKeystoneTenants(Boolean importKeystoneTenants) {
    this.importKeystoneTenants = importKeystoneTenants;
    return this;
  }

   /**
   * Import keystone tenants list into Avi.
   * @return importKeystoneTenants
  **/
  @Schema(description = "Import keystone tenants list into Avi.")
  public Boolean isImportKeystoneTenants() {
    return importKeystoneTenants;
  }

  public void setImportKeystoneTenants(Boolean importKeystoneTenants) {
    this.importKeystoneTenants = importKeystoneTenants;
  }

  public OpenStackConfiguration insecure(Boolean insecure) {
    this.insecure = insecure;
    return this;
  }

   /**
   * Allow self-signed certificates when communicating with https service endpoints.
   * @return insecure
  **/
  @Schema(description = "Allow self-signed certificates when communicating with https service endpoints.")
  public Boolean isInsecure() {
    return insecure;
  }

  public void setInsecure(Boolean insecure) {
    this.insecure = insecure;
  }

  public OpenStackConfiguration intfSecIps(Boolean intfSecIps) {
    this.intfSecIps = intfSecIps;
    return this;
  }

   /**
   * If True, interface-secondary-ips method will be used for VIP association. Field deprecated in 18.1.2.
   * @return intfSecIps
  **/
  @Schema(description = "If True, interface-secondary-ips method will be used for VIP association. Field deprecated in 18.1.2.")
  public Boolean isIntfSecIps() {
    return intfSecIps;
  }

  public void setIntfSecIps(Boolean intfSecIps) {
    this.intfSecIps = intfSecIps;
  }

  public OpenStackConfiguration keystoneHost(String keystoneHost) {
    this.keystoneHost = keystoneHost;
    return this;
  }

   /**
   * Keystone&#x27;s hostname or IP address. (Deprecated) Use auth_url instead.
   * @return keystoneHost
  **/
  @Schema(description = "Keystone's hostname or IP address. (Deprecated) Use auth_url instead.")
  public String getKeystoneHost() {
    return keystoneHost;
  }

  public void setKeystoneHost(String keystoneHost) {
    this.keystoneHost = keystoneHost;
  }

  public OpenStackConfiguration mapAdminToCloudadmin(Boolean mapAdminToCloudadmin) {
    this.mapAdminToCloudadmin = mapAdminToCloudadmin;
    return this;
  }

   /**
   * If True, map Avi &#x27;admin&#x27; tenant to the admin_tenant of the Cloud. Else map Avi &#x27;admin&#x27; to OpenStack &#x27;admin&#x27; tenant.
   * @return mapAdminToCloudadmin
  **/
  @Schema(description = "If True, map Avi 'admin' tenant to the admin_tenant of the Cloud. Else map Avi 'admin' to OpenStack 'admin' tenant.")
  public Boolean isMapAdminToCloudadmin() {
    return mapAdminToCloudadmin;
  }

  public void setMapAdminToCloudadmin(Boolean mapAdminToCloudadmin) {
    this.mapAdminToCloudadmin = mapAdminToCloudadmin;
  }

  public OpenStackConfiguration mgmtNetworkName(String mgmtNetworkName) {
    this.mgmtNetworkName = mgmtNetworkName;
    return this;
  }

   /**
   * Avi Management network name or cidr.
   * @return mgmtNetworkName
  **/
  @Schema(required = true, description = "Avi Management network name or cidr.")
  public String getMgmtNetworkName() {
    return mgmtNetworkName;
  }

  public void setMgmtNetworkName(String mgmtNetworkName) {
    this.mgmtNetworkName = mgmtNetworkName;
  }

  public OpenStackConfiguration mgmtNetworkUuid(String mgmtNetworkUuid) {
    this.mgmtNetworkUuid = mgmtNetworkUuid;
    return this;
  }

   /**
   * Management network UUID.
   * @return mgmtNetworkUuid
  **/
  @Schema(description = "Management network UUID.")
  public String getMgmtNetworkUuid() {
    return mgmtNetworkUuid;
  }

  public void setMgmtNetworkUuid(String mgmtNetworkUuid) {
    this.mgmtNetworkUuid = mgmtNetworkUuid;
  }

  public OpenStackConfiguration nameOwner(Boolean nameOwner) {
    this.nameOwner = nameOwner;
    return this;
  }

   /**
   * If True, embed owner info in VIP port &#x27;name&#x27;, else embed owner info in &#x27;device_id&#x27; field.
   * @return nameOwner
  **/
  @Schema(description = "If True, embed owner info in VIP port 'name', else embed owner info in 'device_id' field.")
  public Boolean isNameOwner() {
    return nameOwner;
  }

  public void setNameOwner(Boolean nameOwner) {
    this.nameOwner = nameOwner;
  }

  public OpenStackConfiguration neutronRbac(Boolean neutronRbac) {
    this.neutronRbac = neutronRbac;
    return this;
  }

   /**
   * If True, enable neutron rbac discovery of networks shared across tenants/projects.
   * @return neutronRbac
  **/
  @Schema(description = "If True, enable neutron rbac discovery of networks shared across tenants/projects.")
  public Boolean isNeutronRbac() {
    return neutronRbac;
  }

  public void setNeutronRbac(Boolean neutronRbac) {
    this.neutronRbac = neutronRbac;
  }

  public OpenStackConfiguration nuageOrganization(String nuageOrganization) {
    this.nuageOrganization = nuageOrganization;
    return this;
  }

   /**
   * nuage_organization of OpenStackConfiguration.
   * @return nuageOrganization
  **/
  @Schema(description = "nuage_organization of OpenStackConfiguration.")
  public String getNuageOrganization() {
    return nuageOrganization;
  }

  public void setNuageOrganization(String nuageOrganization) {
    this.nuageOrganization = nuageOrganization;
  }

  public OpenStackConfiguration nuagePassword(String nuagePassword) {
    this.nuagePassword = nuagePassword;
    return this;
  }

   /**
   * nuage_password of OpenStackConfiguration.
   * @return nuagePassword
  **/
  @Schema(description = "nuage_password of OpenStackConfiguration.")
  public String getNuagePassword() {
    return nuagePassword;
  }

  public void setNuagePassword(String nuagePassword) {
    this.nuagePassword = nuagePassword;
  }

  public OpenStackConfiguration nuagePort(Integer nuagePort) {
    this.nuagePort = nuagePort;
    return this;
  }

   /**
   * Number of nuage_port.
   * @return nuagePort
  **/
  @Schema(description = "Number of nuage_port.")
  public Integer getNuagePort() {
    return nuagePort;
  }

  public void setNuagePort(Integer nuagePort) {
    this.nuagePort = nuagePort;
  }

  public OpenStackConfiguration nuageUsername(String nuageUsername) {
    this.nuageUsername = nuageUsername;
    return this;
  }

   /**
   * nuage_username of OpenStackConfiguration.
   * @return nuageUsername
  **/
  @Schema(description = "nuage_username of OpenStackConfiguration.")
  public String getNuageUsername() {
    return nuageUsername;
  }

  public void setNuageUsername(String nuageUsername) {
    this.nuageUsername = nuageUsername;
  }

  public OpenStackConfiguration nuageVirtualip(Boolean nuageVirtualip) {
    this.nuageVirtualip = nuageVirtualip;
    return this;
  }

   /**
   * Applicable only if allowed-address-pairs is disabled or unusable. VIP placement uses Nuage virtualIp if true, else redirectionTarget. Field introduced in 17.2.3.
   * @return nuageVirtualip
  **/
  @Schema(description = "Applicable only if allowed-address-pairs is disabled or unusable. VIP placement uses Nuage virtualIp if true, else redirectionTarget. Field introduced in 17.2.3.")
  public Boolean isNuageVirtualip() {
    return nuageVirtualip;
  }

  public void setNuageVirtualip(Boolean nuageVirtualip) {
    this.nuageVirtualip = nuageVirtualip;
  }

  public OpenStackConfiguration nuageVsdHost(String nuageVsdHost) {
    this.nuageVsdHost = nuageVsdHost;
    return this;
  }

   /**
   * Nuage VSD host name or IP address.
   * @return nuageVsdHost
  **/
  @Schema(description = "Nuage VSD host name or IP address.")
  public String getNuageVsdHost() {
    return nuageVsdHost;
  }

  public void setNuageVsdHost(String nuageVsdHost) {
    this.nuageVsdHost = nuageVsdHost;
  }

  public OpenStackConfiguration password(String password) {
    this.password = password;
    return this;
  }

   /**
   * The password Avi Vantage will use when authenticating to Keystone.
   * @return password
  **/
  @Schema(description = "The password Avi Vantage will use when authenticating to Keystone.")
  public String getPassword() {
    return password;
  }

  public void setPassword(String password) {
    this.password = password;
  }

  public OpenStackConfiguration portSecurity(Boolean portSecurity) {
    this.portSecurity = portSecurity;
    return this;
  }

   /**
   * If true, port-security extension (if detected) will be used instead of security-groups, allowed-address-pairs or interface-secondary-ips. If false, port-security extension is skipped.
   * @return portSecurity
  **/
  @Schema(description = "If true, port-security extension (if detected) will be used instead of security-groups, allowed-address-pairs or interface-secondary-ips. If false, port-security extension is skipped.")
  public Boolean isPortSecurity() {
    return portSecurity;
  }

  public void setPortSecurity(Boolean portSecurity) {
    this.portSecurity = portSecurity;
  }

  public OpenStackConfiguration privilege(String privilege) {
    this.privilege = privilege;
    return this;
  }

   /**
   * Access privilege. Enum options - NO_ACCESS, READ_ACCESS, WRITE_ACCESS.
   * @return privilege
  **/
  @Schema(required = true, description = "Access privilege. Enum options - NO_ACCESS, READ_ACCESS, WRITE_ACCESS.")
  public String getPrivilege() {
    return privilege;
  }

  public void setPrivilege(String privilege) {
    this.privilege = privilege;
  }

  public OpenStackConfiguration provName(List<String> provName) {
    this.provName = provName;
    return this;
  }

  public OpenStackConfiguration addProvNameItem(String provNameItem) {
    if (this.provName == null) {
      this.provName = new ArrayList<String>();
    }
    this.provName.add(provNameItem);
    return this;
  }

   /**
   * LBaaS provider name.
   * @return provName
  **/
  @Schema(description = "LBaaS provider name.")
  public List<String> getProvName() {
    return provName;
  }

  public void setProvName(List<String> provName) {
    this.provName = provName;
  }

  public OpenStackConfiguration providerVipNetworks(List<OpenStackVipNetwork> providerVipNetworks) {
    this.providerVipNetworks = providerVipNetworks;
    return this;
  }

  public OpenStackConfiguration addProviderVipNetworksItem(OpenStackVipNetwork providerVipNetworksItem) {
    if (this.providerVipNetworks == null) {
      this.providerVipNetworks = new ArrayList<OpenStackVipNetwork>();
    }
    this.providerVipNetworks.add(providerVipNetworksItem);
    return this;
  }

   /**
   * A tenant can normally use its own networks and any networks shared with it. In addition, this setting provides extra networks that are usable by tenants. Field introduced in 18.1.2.
   * @return providerVipNetworks
  **/
  @Schema(description = "A tenant can normally use its own networks and any networks shared with it. In addition, this setting provides extra networks that are usable by tenants. Field introduced in 18.1.2.")
  public List<OpenStackVipNetwork> getProviderVipNetworks() {
    return providerVipNetworks;
  }

  public void setProviderVipNetworks(List<OpenStackVipNetwork> providerVipNetworks) {
    this.providerVipNetworks = providerVipNetworks;
  }

  public OpenStackConfiguration region(String region) {
    this.region = region;
    return this;
  }

   /**
   * Region name.
   * @return region
  **/
  @Schema(description = "Region name.")
  public String getRegion() {
    return region;
  }

  public void setRegion(String region) {
    this.region = region;
  }

  public OpenStackConfiguration roleMapping(List<OpenStackRoleMapping> roleMapping) {
    this.roleMapping = roleMapping;
    return this;
  }

  public OpenStackConfiguration addRoleMappingItem(OpenStackRoleMapping roleMappingItem) {
    if (this.roleMapping == null) {
      this.roleMapping = new ArrayList<OpenStackRoleMapping>();
    }
    this.roleMapping.add(roleMappingItem);
    return this;
  }

   /**
   * Defines the mapping from OpenStack role names to avi local role names. For an OpenStack role, this mapping is consulted only if there is no local Avi role with the same name as the OpenStack role. This is an ordered list and only the first matching entry is used. You can use &#x27;*&#x27; to match all OpenStack role names.
   * @return roleMapping
  **/
  @Schema(description = "Defines the mapping from OpenStack role names to avi local role names. For an OpenStack role, this mapping is consulted only if there is no local Avi role with the same name as the OpenStack role. This is an ordered list and only the first matching entry is used. You can use '*' to match all OpenStack role names.")
  public List<OpenStackRoleMapping> getRoleMapping() {
    return roleMapping;
  }

  public void setRoleMapping(List<OpenStackRoleMapping> roleMapping) {
    this.roleMapping = roleMapping;
  }

  public OpenStackConfiguration seGroupRef(String seGroupRef) {
    this.seGroupRef = seGroupRef;
    return this;
  }

   /**
   * This field has been generalized for all clouds and has been renamed to se_group_template_uuid. It is a reference to an object of type ServiceEngineGroup. Field deprecated in 18.2.5.
   * @return seGroupRef
  **/
  @Schema(description = "This field has been generalized for all clouds and has been renamed to se_group_template_uuid. It is a reference to an object of type ServiceEngineGroup. Field deprecated in 18.2.5.")
  public String getSeGroupRef() {
    return seGroupRef;
  }

  public void setSeGroupRef(String seGroupRef) {
    this.seGroupRef = seGroupRef;
  }

  public OpenStackConfiguration securityGroups(Boolean securityGroups) {
    this.securityGroups = securityGroups;
    return this;
  }

   /**
   * If false, security-groups extension will not be used. .
   * @return securityGroups
  **/
  @Schema(description = "If false, security-groups extension will not be used. .")
  public Boolean isSecurityGroups() {
    return securityGroups;
  }

  public void setSecurityGroups(Boolean securityGroups) {
    this.securityGroups = securityGroups;
  }

  public OpenStackConfiguration tenantSe(Boolean tenantSe) {
    this.tenantSe = tenantSe;
    return this;
  }

   /**
   * If true, then SEs will be created in the appropriate tenants, else SEs will be created in the admin_tenant.
   * @return tenantSe
  **/
  @Schema(description = "If true, then SEs will be created in the appropriate tenants, else SEs will be created in the admin_tenant.")
  public Boolean isTenantSe() {
    return tenantSe;
  }

  public void setTenantSe(Boolean tenantSe) {
    this.tenantSe = tenantSe;
  }

  public OpenStackConfiguration usableNetworkUuids(List<String> usableNetworkUuids) {
    this.usableNetworkUuids = usableNetworkUuids;
    return this;
  }

  public OpenStackConfiguration addUsableNetworkUuidsItem(String usableNetworkUuidsItem) {
    if (this.usableNetworkUuids == null) {
      this.usableNetworkUuids = new ArrayList<String>();
    }
    this.usableNetworkUuids.add(usableNetworkUuidsItem);
    return this;
  }

   /**
   * Deprecated, please use provider_vip_networks. Field deprecated in 18.2.2. Field introduced in 17.1.1.
   * @return usableNetworkUuids
  **/
  @Schema(description = "Deprecated, please use provider_vip_networks. Field deprecated in 18.2.2. Field introduced in 17.1.1.")
  public List<String> getUsableNetworkUuids() {
    return usableNetworkUuids;
  }

  public void setUsableNetworkUuids(List<String> usableNetworkUuids) {
    this.usableNetworkUuids = usableNetworkUuids;
  }

  public OpenStackConfiguration useAdminUrl(Boolean useAdminUrl) {
    this.useAdminUrl = useAdminUrl;
    return this;
  }

   /**
   * If admin URLs are either inaccessible or not to be accessed from Avi Controller, then set this to False.
   * @return useAdminUrl
  **/
  @Schema(description = "If admin URLs are either inaccessible or not to be accessed from Avi Controller, then set this to False.")
  public Boolean isUseAdminUrl() {
    return useAdminUrl;
  }

  public void setUseAdminUrl(Boolean useAdminUrl) {
    this.useAdminUrl = useAdminUrl;
  }

  public OpenStackConfiguration useInternalEndpoints(Boolean useInternalEndpoints) {
    this.useInternalEndpoints = useInternalEndpoints;
    return this;
  }

   /**
   * Use internalURL for OpenStack endpoints instead of the default publicURL endpoints.
   * @return useInternalEndpoints
  **/
  @Schema(description = "Use internalURL for OpenStack endpoints instead of the default publicURL endpoints.")
  public Boolean isUseInternalEndpoints() {
    return useInternalEndpoints;
  }

  public void setUseInternalEndpoints(Boolean useInternalEndpoints) {
    this.useInternalEndpoints = useInternalEndpoints;
  }

  public OpenStackConfiguration useKeystoneAuth(Boolean useKeystoneAuth) {
    this.useKeystoneAuth = useKeystoneAuth;
    return this;
  }

   /**
   * Use keystone for user authentication.
   * @return useKeystoneAuth
  **/
  @Schema(description = "Use keystone for user authentication.")
  public Boolean isUseKeystoneAuth() {
    return useKeystoneAuth;
  }

  public void setUseKeystoneAuth(Boolean useKeystoneAuth) {
    this.useKeystoneAuth = useKeystoneAuth;
  }

  public OpenStackConfiguration useNuagevip(Boolean useNuagevip) {
    this.useNuagevip = useNuagevip;
    return this;
  }

   /**
   * If True, use nuage vip as device_owner of VIP ports, else use neutron LOADBALANCER. Field introduced in 17.2.1.
   * @return useNuagevip
  **/
  @Schema(description = "If True, use nuage vip as device_owner of VIP ports, else use neutron LOADBALANCER. Field introduced in 17.2.1.")
  public Boolean isUseNuagevip() {
    return useNuagevip;
  }

  public void setUseNuagevip(Boolean useNuagevip) {
    this.useNuagevip = useNuagevip;
  }

  public OpenStackConfiguration username(String username) {
    this.username = username;
    return this;
  }

   /**
   * The username Avi Vantage will use when authenticating to Keystone. For Keystone v3, provide the user information in user@domain format, unless that user belongs to the Default domain.
   * @return username
  **/
  @Schema(required = true, description = "The username Avi Vantage will use when authenticating to Keystone. For Keystone v3, provide the user information in user@domain format, unless that user belongs to the Default domain.")
  public String getUsername() {
    return username;
  }

  public void setUsername(String username) {
    this.username = username;
  }

  public OpenStackConfiguration wildcardAccess(Boolean wildcardAccess) {
    this.wildcardAccess = wildcardAccess;
    return this;
  }

   /**
   * If enabled, program SE security group with ingress rule to allow SSH (port 22) access from 0.0.0.0/0. Field deprecated in 17.1.5. Field introduced in 17.1.3.
   * @return wildcardAccess
  **/
  @Schema(description = "If enabled, program SE security group with ingress rule to allow SSH (port 22) access from 0.0.0.0/0. Field deprecated in 17.1.5. Field introduced in 17.1.3.")
  public Boolean isWildcardAccess() {
    return wildcardAccess;
  }

  public void setWildcardAccess(Boolean wildcardAccess) {
    this.wildcardAccess = wildcardAccess;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OpenStackConfiguration openStackConfiguration = (OpenStackConfiguration) o;
    return Objects.equals(this.adminTenant, openStackConfiguration.adminTenant) &&
        Objects.equals(this.adminTenantUuid, openStackConfiguration.adminTenantUuid) &&
        Objects.equals(this.allowedAddressPairs, openStackConfiguration.allowedAddressPairs) &&
        Objects.equals(this.antiAffinity, openStackConfiguration.antiAffinity) &&
        Objects.equals(this.authUrl, openStackConfiguration.authUrl) &&
        Objects.equals(this.configDrive, openStackConfiguration.configDrive) &&
        Objects.equals(this.contrailDisablePolicy, openStackConfiguration.contrailDisablePolicy) &&
        Objects.equals(this.contrailEndpoint, openStackConfiguration.contrailEndpoint) &&
        Objects.equals(this.contrailPlugin, openStackConfiguration.contrailPlugin) &&
        Objects.equals(this.customSeImageProperties, openStackConfiguration.customSeImageProperties) &&
        Objects.equals(this.externalNetworks, openStackConfiguration.externalNetworks) &&
        Objects.equals(this.freeFloatingips, openStackConfiguration.freeFloatingips) &&
        Objects.equals(this.hypervisor, openStackConfiguration.hypervisor) &&
        Objects.equals(this.hypervisorProperties, openStackConfiguration.hypervisorProperties) &&
        Objects.equals(this.imgFormat, openStackConfiguration.imgFormat) &&
        Objects.equals(this.importKeystoneTenants, openStackConfiguration.importKeystoneTenants) &&
        Objects.equals(this.insecure, openStackConfiguration.insecure) &&
        Objects.equals(this.intfSecIps, openStackConfiguration.intfSecIps) &&
        Objects.equals(this.keystoneHost, openStackConfiguration.keystoneHost) &&
        Objects.equals(this.mapAdminToCloudadmin, openStackConfiguration.mapAdminToCloudadmin) &&
        Objects.equals(this.mgmtNetworkName, openStackConfiguration.mgmtNetworkName) &&
        Objects.equals(this.mgmtNetworkUuid, openStackConfiguration.mgmtNetworkUuid) &&
        Objects.equals(this.nameOwner, openStackConfiguration.nameOwner) &&
        Objects.equals(this.neutronRbac, openStackConfiguration.neutronRbac) &&
        Objects.equals(this.nuageOrganization, openStackConfiguration.nuageOrganization) &&
        Objects.equals(this.nuagePassword, openStackConfiguration.nuagePassword) &&
        Objects.equals(this.nuagePort, openStackConfiguration.nuagePort) &&
        Objects.equals(this.nuageUsername, openStackConfiguration.nuageUsername) &&
        Objects.equals(this.nuageVirtualip, openStackConfiguration.nuageVirtualip) &&
        Objects.equals(this.nuageVsdHost, openStackConfiguration.nuageVsdHost) &&
        Objects.equals(this.password, openStackConfiguration.password) &&
        Objects.equals(this.portSecurity, openStackConfiguration.portSecurity) &&
        Objects.equals(this.privilege, openStackConfiguration.privilege) &&
        Objects.equals(this.provName, openStackConfiguration.provName) &&
        Objects.equals(this.providerVipNetworks, openStackConfiguration.providerVipNetworks) &&
        Objects.equals(this.region, openStackConfiguration.region) &&
        Objects.equals(this.roleMapping, openStackConfiguration.roleMapping) &&
        Objects.equals(this.seGroupRef, openStackConfiguration.seGroupRef) &&
        Objects.equals(this.securityGroups, openStackConfiguration.securityGroups) &&
        Objects.equals(this.tenantSe, openStackConfiguration.tenantSe) &&
        Objects.equals(this.usableNetworkUuids, openStackConfiguration.usableNetworkUuids) &&
        Objects.equals(this.useAdminUrl, openStackConfiguration.useAdminUrl) &&
        Objects.equals(this.useInternalEndpoints, openStackConfiguration.useInternalEndpoints) &&
        Objects.equals(this.useKeystoneAuth, openStackConfiguration.useKeystoneAuth) &&
        Objects.equals(this.useNuagevip, openStackConfiguration.useNuagevip) &&
        Objects.equals(this.username, openStackConfiguration.username) &&
        Objects.equals(this.wildcardAccess, openStackConfiguration.wildcardAccess);
  }

  @Override
  public int hashCode() {
    return Objects.hash(adminTenant, adminTenantUuid, allowedAddressPairs, antiAffinity, authUrl, configDrive, contrailDisablePolicy, contrailEndpoint, contrailPlugin, customSeImageProperties, externalNetworks, freeFloatingips, hypervisor, hypervisorProperties, imgFormat, importKeystoneTenants, insecure, intfSecIps, keystoneHost, mapAdminToCloudadmin, mgmtNetworkName, mgmtNetworkUuid, nameOwner, neutronRbac, nuageOrganization, nuagePassword, nuagePort, nuageUsername, nuageVirtualip, nuageVsdHost, password, portSecurity, privilege, provName, providerVipNetworks, region, roleMapping, seGroupRef, securityGroups, tenantSe, usableNetworkUuids, useAdminUrl, useInternalEndpoints, useKeystoneAuth, useNuagevip, username, wildcardAccess);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OpenStackConfiguration {\n");
    
    sb.append("    adminTenant: ").append(toIndentedString(adminTenant)).append("\n");
    sb.append("    adminTenantUuid: ").append(toIndentedString(adminTenantUuid)).append("\n");
    sb.append("    allowedAddressPairs: ").append(toIndentedString(allowedAddressPairs)).append("\n");
    sb.append("    antiAffinity: ").append(toIndentedString(antiAffinity)).append("\n");
    sb.append("    authUrl: ").append(toIndentedString(authUrl)).append("\n");
    sb.append("    configDrive: ").append(toIndentedString(configDrive)).append("\n");
    sb.append("    contrailDisablePolicy: ").append(toIndentedString(contrailDisablePolicy)).append("\n");
    sb.append("    contrailEndpoint: ").append(toIndentedString(contrailEndpoint)).append("\n");
    sb.append("    contrailPlugin: ").append(toIndentedString(contrailPlugin)).append("\n");
    sb.append("    customSeImageProperties: ").append(toIndentedString(customSeImageProperties)).append("\n");
    sb.append("    externalNetworks: ").append(toIndentedString(externalNetworks)).append("\n");
    sb.append("    freeFloatingips: ").append(toIndentedString(freeFloatingips)).append("\n");
    sb.append("    hypervisor: ").append(toIndentedString(hypervisor)).append("\n");
    sb.append("    hypervisorProperties: ").append(toIndentedString(hypervisorProperties)).append("\n");
    sb.append("    imgFormat: ").append(toIndentedString(imgFormat)).append("\n");
    sb.append("    importKeystoneTenants: ").append(toIndentedString(importKeystoneTenants)).append("\n");
    sb.append("    insecure: ").append(toIndentedString(insecure)).append("\n");
    sb.append("    intfSecIps: ").append(toIndentedString(intfSecIps)).append("\n");
    sb.append("    keystoneHost: ").append(toIndentedString(keystoneHost)).append("\n");
    sb.append("    mapAdminToCloudadmin: ").append(toIndentedString(mapAdminToCloudadmin)).append("\n");
    sb.append("    mgmtNetworkName: ").append(toIndentedString(mgmtNetworkName)).append("\n");
    sb.append("    mgmtNetworkUuid: ").append(toIndentedString(mgmtNetworkUuid)).append("\n");
    sb.append("    nameOwner: ").append(toIndentedString(nameOwner)).append("\n");
    sb.append("    neutronRbac: ").append(toIndentedString(neutronRbac)).append("\n");
    sb.append("    nuageOrganization: ").append(toIndentedString(nuageOrganization)).append("\n");
    sb.append("    nuagePassword: ").append(toIndentedString(nuagePassword)).append("\n");
    sb.append("    nuagePort: ").append(toIndentedString(nuagePort)).append("\n");
    sb.append("    nuageUsername: ").append(toIndentedString(nuageUsername)).append("\n");
    sb.append("    nuageVirtualip: ").append(toIndentedString(nuageVirtualip)).append("\n");
    sb.append("    nuageVsdHost: ").append(toIndentedString(nuageVsdHost)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    portSecurity: ").append(toIndentedString(portSecurity)).append("\n");
    sb.append("    privilege: ").append(toIndentedString(privilege)).append("\n");
    sb.append("    provName: ").append(toIndentedString(provName)).append("\n");
    sb.append("    providerVipNetworks: ").append(toIndentedString(providerVipNetworks)).append("\n");
    sb.append("    region: ").append(toIndentedString(region)).append("\n");
    sb.append("    roleMapping: ").append(toIndentedString(roleMapping)).append("\n");
    sb.append("    seGroupRef: ").append(toIndentedString(seGroupRef)).append("\n");
    sb.append("    securityGroups: ").append(toIndentedString(securityGroups)).append("\n");
    sb.append("    tenantSe: ").append(toIndentedString(tenantSe)).append("\n");
    sb.append("    usableNetworkUuids: ").append(toIndentedString(usableNetworkUuids)).append("\n");
    sb.append("    useAdminUrl: ").append(toIndentedString(useAdminUrl)).append("\n");
    sb.append("    useInternalEndpoints: ").append(toIndentedString(useInternalEndpoints)).append("\n");
    sb.append("    useKeystoneAuth: ").append(toIndentedString(useKeystoneAuth)).append("\n");
    sb.append("    useNuagevip: ").append(toIndentedString(useNuagevip)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("    wildcardAccess: ").append(toIndentedString(wildcardAccess)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
