/*
 * Avi avi_global_spec Object API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 20.1.1
 * Contact: support@avinetworks.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.vmware.avi.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.vmware.avi.sdk.model.HSMSafenetClientInfo;
import com.vmware.avi.sdk.model.HSMSafenetLunaServer;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;
/**
 * HSMSafenetLuna
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-03-12T12:27:26.755+05:30[Asia/Kolkata]")
public class HSMSafenetLuna {
  @JsonProperty("ha_group_num")
  private Long haGroupNum = null;

  @JsonProperty("is_ha")
  private Boolean isHa = null;

  @JsonProperty("node_info")
  private List<HSMSafenetClientInfo> nodeInfo = null;

  @JsonProperty("server")
  private List<HSMSafenetLunaServer> server = null;

  @JsonProperty("server_pem")
  private String serverPem = null;

  @JsonProperty("use_dedicated_network")
  private Boolean useDedicatedNetwork = null;

  public HSMSafenetLuna haGroupNum(Long haGroupNum) {
    this.haGroupNum = haGroupNum;
    return this;
  }

   /**
   * Group Number of generated HA Group.
   * @return haGroupNum
  **/
  @Schema(description = "Group Number of generated HA Group.")
  public Long getHaGroupNum() {
    return haGroupNum;
  }

  public void setHaGroupNum(Long haGroupNum) {
    this.haGroupNum = haGroupNum;
  }

  public HSMSafenetLuna isHa(Boolean isHa) {
    this.isHa = isHa;
    return this;
  }

   /**
   * Set to indicate HA across more than one servers.
   * @return isHa
  **/
  @Schema(required = true, description = "Set to indicate HA across more than one servers.")
  public Boolean isIsHa() {
    return isHa;
  }

  public void setIsHa(Boolean isHa) {
    this.isHa = isHa;
  }

  public HSMSafenetLuna nodeInfo(List<HSMSafenetClientInfo> nodeInfo) {
    this.nodeInfo = nodeInfo;
    return this;
  }

  public HSMSafenetLuna addNodeInfoItem(HSMSafenetClientInfo nodeInfoItem) {
    if (this.nodeInfo == null) {
      this.nodeInfo = new ArrayList<HSMSafenetClientInfo>();
    }
    this.nodeInfo.add(nodeInfoItem);
    return this;
  }

   /**
   * Node specific information.
   * @return nodeInfo
  **/
  @Schema(description = "Node specific information.")
  public List<HSMSafenetClientInfo> getNodeInfo() {
    return nodeInfo;
  }

  public void setNodeInfo(List<HSMSafenetClientInfo> nodeInfo) {
    this.nodeInfo = nodeInfo;
  }

  public HSMSafenetLuna server(List<HSMSafenetLunaServer> server) {
    this.server = server;
    return this;
  }

  public HSMSafenetLuna addServerItem(HSMSafenetLunaServer serverItem) {
    if (this.server == null) {
      this.server = new ArrayList<HSMSafenetLunaServer>();
    }
    this.server.add(serverItem);
    return this;
  }

   /**
   * SafeNet/Gemalto HSM Servers used for crypto operations.
   * @return server
  **/
  @Schema(description = "SafeNet/Gemalto HSM Servers used for crypto operations.")
  public List<HSMSafenetLunaServer> getServer() {
    return server;
  }

  public void setServer(List<HSMSafenetLunaServer> server) {
    this.server = server;
  }

  public HSMSafenetLuna serverPem(String serverPem) {
    this.serverPem = serverPem;
    return this;
  }

   /**
   * Generated File - server.pem.
   * @return serverPem
  **/
  @Schema(description = "Generated File - server.pem.")
  public String getServerPem() {
    return serverPem;
  }

  public void setServerPem(String serverPem) {
    this.serverPem = serverPem;
  }

  public HSMSafenetLuna useDedicatedNetwork(Boolean useDedicatedNetwork) {
    this.useDedicatedNetwork = useDedicatedNetwork;
    return this;
  }

   /**
   * If enabled, dedicated network is used to communicate with HSM,else, the management network is used.
   * @return useDedicatedNetwork
  **/
  @Schema(description = "If enabled, dedicated network is used to communicate with HSM,else, the management network is used.")
  public Boolean isUseDedicatedNetwork() {
    return useDedicatedNetwork;
  }

  public void setUseDedicatedNetwork(Boolean useDedicatedNetwork) {
    this.useDedicatedNetwork = useDedicatedNetwork;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HSMSafenetLuna hsMSafenetLuna = (HSMSafenetLuna) o;
    return Objects.equals(this.haGroupNum, hsMSafenetLuna.haGroupNum) &&
        Objects.equals(this.isHa, hsMSafenetLuna.isHa) &&
        Objects.equals(this.nodeInfo, hsMSafenetLuna.nodeInfo) &&
        Objects.equals(this.server, hsMSafenetLuna.server) &&
        Objects.equals(this.serverPem, hsMSafenetLuna.serverPem) &&
        Objects.equals(this.useDedicatedNetwork, hsMSafenetLuna.useDedicatedNetwork);
  }

  @Override
  public int hashCode() {
    return Objects.hash(haGroupNum, isHa, nodeInfo, server, serverPem, useDedicatedNetwork);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HSMSafenetLuna {\n");
    
    sb.append("    haGroupNum: ").append(toIndentedString(haGroupNum)).append("\n");
    sb.append("    isHa: ").append(toIndentedString(isHa)).append("\n");
    sb.append("    nodeInfo: ").append(toIndentedString(nodeInfo)).append("\n");
    sb.append("    server: ").append(toIndentedString(server)).append("\n");
    sb.append("    serverPem: ").append(toIndentedString(serverPem)).append("\n");
    sb.append("    useDedicatedNetwork: ").append(toIndentedString(useDedicatedNetwork)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
