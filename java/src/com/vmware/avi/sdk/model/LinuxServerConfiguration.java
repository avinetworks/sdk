/*
 * Avi avi_global_spec Object API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 20.1.1
 * Contact: support@avinetworks.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.vmware.avi.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.vmware.avi.sdk.model.DockerRegistry;
import com.vmware.avi.sdk.model.LinuxServerHost;
import com.vmware.avi.sdk.model.SSHSeDeployment;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;
/**
 * LinuxServerConfiguration
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-03-12T12:27:26.755+05:30[Asia/Kolkata]")
public class LinuxServerConfiguration {
  @JsonProperty("docker_registry_se")
  private DockerRegistry dockerRegistrySe = null;

  @JsonProperty("hosts")
  private List<LinuxServerHost> hosts = null;

  @JsonProperty("se_inband_mgmt")
  private Boolean seInbandMgmt = null;

  @JsonProperty("se_log_disk_path")
  private String seLogDiskPath = null;

  @JsonProperty("se_log_disk_size_GB")
  private Integer seLogDiskSizeGB = 5;

  @JsonProperty("se_sys_disk_path")
  private String seSysDiskPath = null;

  @JsonProperty("se_sys_disk_size_GB")
  private Integer seSysDiskSizeGB = 10;

  @JsonProperty("ssh_attr")
  private SSHSeDeployment sshAttr = null;

  @JsonProperty("ssh_user_ref")
  private String sshUserRef = null;

  public LinuxServerConfiguration dockerRegistrySe(DockerRegistry dockerRegistrySe) {
    this.dockerRegistrySe = dockerRegistrySe;
    return this;
  }

   /**
   * Get dockerRegistrySe
   * @return dockerRegistrySe
  **/
  @Schema(description = "")
  public DockerRegistry getDockerRegistrySe() {
    return dockerRegistrySe;
  }

  public void setDockerRegistrySe(DockerRegistry dockerRegistrySe) {
    this.dockerRegistrySe = dockerRegistrySe;
  }

  public LinuxServerConfiguration hosts(List<LinuxServerHost> hosts) {
    this.hosts = hosts;
    return this;
  }

  public LinuxServerConfiguration addHostsItem(LinuxServerHost hostsItem) {
    if (this.hosts == null) {
      this.hosts = new ArrayList<LinuxServerHost>();
    }
    this.hosts.add(hostsItem);
    return this;
  }

   /**
   * Placeholder for description of property hosts of obj type LinuxServerConfiguration field type str  type object
   * @return hosts
  **/
  @Schema(description = "Placeholder for description of property hosts of obj type LinuxServerConfiguration field type str  type object")
  public List<LinuxServerHost> getHosts() {
    return hosts;
  }

  public void setHosts(List<LinuxServerHost> hosts) {
    this.hosts = hosts;
  }

  public LinuxServerConfiguration seInbandMgmt(Boolean seInbandMgmt) {
    this.seInbandMgmt = seInbandMgmt;
    return this;
  }

   /**
   * Flag to notify the SE&#x27;s in this cloud have an inband management interface, this can be overridden at SE host level by setting host_attr attr_key as SE_INBAND_MGMT with value of true or false.
   * @return seInbandMgmt
  **/
  @Schema(description = "Flag to notify the SE's in this cloud have an inband management interface, this can be overridden at SE host level by setting host_attr attr_key as SE_INBAND_MGMT with value of true or false.")
  public Boolean isSeInbandMgmt() {
    return seInbandMgmt;
  }

  public void setSeInbandMgmt(Boolean seInbandMgmt) {
    this.seInbandMgmt = seInbandMgmt;
  }

  public LinuxServerConfiguration seLogDiskPath(String seLogDiskPath) {
    this.seLogDiskPath = seLogDiskPath;
    return this;
  }

   /**
   * SE Client Logs disk path for cloud.
   * @return seLogDiskPath
  **/
  @Schema(description = "SE Client Logs disk path for cloud.")
  public String getSeLogDiskPath() {
    return seLogDiskPath;
  }

  public void setSeLogDiskPath(String seLogDiskPath) {
    this.seLogDiskPath = seLogDiskPath;
  }

  public LinuxServerConfiguration seLogDiskSizeGB(Integer seLogDiskSizeGB) {
    this.seLogDiskSizeGB = seLogDiskSizeGB;
    return this;
  }

   /**
   * SE Client Log disk size for cloud.
   * @return seLogDiskSizeGB
  **/
  @Schema(description = "SE Client Log disk size for cloud.")
  public Integer getSeLogDiskSizeGB() {
    return seLogDiskSizeGB;
  }

  public void setSeLogDiskSizeGB(Integer seLogDiskSizeGB) {
    this.seLogDiskSizeGB = seLogDiskSizeGB;
  }

  public LinuxServerConfiguration seSysDiskPath(String seSysDiskPath) {
    this.seSysDiskPath = seSysDiskPath;
    return this;
  }

   /**
   * SE System Logs disk path for cloud.
   * @return seSysDiskPath
  **/
  @Schema(description = "SE System Logs disk path for cloud.")
  public String getSeSysDiskPath() {
    return seSysDiskPath;
  }

  public void setSeSysDiskPath(String seSysDiskPath) {
    this.seSysDiskPath = seSysDiskPath;
  }

  public LinuxServerConfiguration seSysDiskSizeGB(Integer seSysDiskSizeGB) {
    this.seSysDiskSizeGB = seSysDiskSizeGB;
    return this;
  }

   /**
   * SE System Logs disk size for cloud.
   * @return seSysDiskSizeGB
  **/
  @Schema(description = "SE System Logs disk size for cloud.")
  public Integer getSeSysDiskSizeGB() {
    return seSysDiskSizeGB;
  }

  public void setSeSysDiskSizeGB(Integer seSysDiskSizeGB) {
    this.seSysDiskSizeGB = seSysDiskSizeGB;
  }

  public LinuxServerConfiguration sshAttr(SSHSeDeployment sshAttr) {
    this.sshAttr = sshAttr;
    return this;
  }

   /**
   * Get sshAttr
   * @return sshAttr
  **/
  @Schema(description = "")
  public SSHSeDeployment getSshAttr() {
    return sshAttr;
  }

  public void setSshAttr(SSHSeDeployment sshAttr) {
    this.sshAttr = sshAttr;
  }

  public LinuxServerConfiguration sshUserRef(String sshUserRef) {
    this.sshUserRef = sshUserRef;
    return this;
  }

   /**
   * Cloud connector user uuid for SSH to hosts. It is a reference to an object of type CloudConnectorUser. Field introduced in 17.1.1.
   * @return sshUserRef
  **/
  @Schema(description = "Cloud connector user uuid for SSH to hosts. It is a reference to an object of type CloudConnectorUser. Field introduced in 17.1.1.")
  public String getSshUserRef() {
    return sshUserRef;
  }

  public void setSshUserRef(String sshUserRef) {
    this.sshUserRef = sshUserRef;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LinuxServerConfiguration linuxServerConfiguration = (LinuxServerConfiguration) o;
    return Objects.equals(this.dockerRegistrySe, linuxServerConfiguration.dockerRegistrySe) &&
        Objects.equals(this.hosts, linuxServerConfiguration.hosts) &&
        Objects.equals(this.seInbandMgmt, linuxServerConfiguration.seInbandMgmt) &&
        Objects.equals(this.seLogDiskPath, linuxServerConfiguration.seLogDiskPath) &&
        Objects.equals(this.seLogDiskSizeGB, linuxServerConfiguration.seLogDiskSizeGB) &&
        Objects.equals(this.seSysDiskPath, linuxServerConfiguration.seSysDiskPath) &&
        Objects.equals(this.seSysDiskSizeGB, linuxServerConfiguration.seSysDiskSizeGB) &&
        Objects.equals(this.sshAttr, linuxServerConfiguration.sshAttr) &&
        Objects.equals(this.sshUserRef, linuxServerConfiguration.sshUserRef);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dockerRegistrySe, hosts, seInbandMgmt, seLogDiskPath, seLogDiskSizeGB, seSysDiskPath, seSysDiskSizeGB, sshAttr, sshUserRef);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LinuxServerConfiguration {\n");
    
    sb.append("    dockerRegistrySe: ").append(toIndentedString(dockerRegistrySe)).append("\n");
    sb.append("    hosts: ").append(toIndentedString(hosts)).append("\n");
    sb.append("    seInbandMgmt: ").append(toIndentedString(seInbandMgmt)).append("\n");
    sb.append("    seLogDiskPath: ").append(toIndentedString(seLogDiskPath)).append("\n");
    sb.append("    seLogDiskSizeGB: ").append(toIndentedString(seLogDiskSizeGB)).append("\n");
    sb.append("    seSysDiskPath: ").append(toIndentedString(seSysDiskPath)).append("\n");
    sb.append("    seSysDiskSizeGB: ").append(toIndentedString(seSysDiskSizeGB)).append("\n");
    sb.append("    sshAttr: ").append(toIndentedString(sshAttr)).append("\n");
    sb.append("    sshUserRef: ").append(toIndentedString(sshUserRef)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
